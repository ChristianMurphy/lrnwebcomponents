{"version":3,"file":"cms-hax.umd.js","sources":["cms-hax.umd.js"],"sourcesContent":["import { LitElement, html, css } from \"lit-element/lit-element.js\";\nimport \"@polymer/iron-ajax/iron-ajax.js\";\nimport \"@lrnwebcomponents/h-a-x/h-a-x.js\";\n/**\n * `cms-hax`\n * @customElement cms-hax\n * @demo ../../demo/index.html\n */\nclass CmsHax extends LitElement {\n  /**\n   * LitElement constructable styles enhancement\n   */\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: block;\n          font-size: 16px;\n          box-sizing: content-box;\n        }\n      `\n    ];\n  }\n  render() {\n    return html`\n      <iron-ajax\n        id=\"pageupdateajax\"\n        url=\"${this.endPoint}\"\n        method=\"${this.method}\"\n        body=\"${this.updatePageData}\"\n        content-type=\"application/json\"\n        handle-as=\"json\"\n        @response=\"${this._handleUpdateResponse}\"\n      ></iron-ajax>\n      <h-a-x app-store=\"${this.appStoreConnection}\"></h-a-x>\n    `;\n  }\n\n  static get tag() {\n    return \"cms-hax\";\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Default the panel to open\n       */\n      openDefault: {\n        type: Boolean,\n        reflect: true,\n        attribute: \"open-default\"\n      },\n      /**\n       * Hide the export button, showing it is good for developers\n       * or those doing QA testing of new elements.\n       */\n      hideExportButton: {\n        type: Boolean,\n        attribute: \"hide-export-button\"\n      },\n      /**\n       * Hide the panel operations (save and cancel),\n       */\n      hidePanelOps: {\n        type: Boolean,\n        attribute: \"hide-panel-ops\"\n      },\n      /**\n       * Hide preferences button\n       */\n      hidePreferencesButton: {\n        type: Boolean,\n        attribute: \"hide-preferences-button\"\n      },\n      /**\n       * Direction to align the hax edit panel\n       */\n      align: {\n        type: String\n      },\n      /**\n       * allowed Tags, usually as dictated by the input filtering\n       * layer of the backend system that HAX is riding on.\n       * While not fullproof, this at least will enforce front-end\n       * filtering to match what actually is going to be allowed\n       * to be saved in the first place.\n       */\n      allowedTags: {\n        type: Array\n      },\n      /**\n       * Location to save content to.\n       */\n      endPoint: {\n        type: String,\n        attribute: \"end-point\"\n      },\n      /**\n       * Method to save content.\n       */\n      method: {\n        type: String\n      },\n      /**\n       * Page data, body of text as a string.\n       */\n      updatePageData: {\n        type: String,\n        attribute: \"udpate-page-data\"\n      },\n      /**\n       * Connection object for talking to an app store.\n       */\n      appStoreConnection: {\n        type: String,\n        attribute: \"app-store-connection\"\n      },\n      /**\n       * State of the panel\n       */\n      editMode: {\n        type: Boolean,\n        reflect: true,\n        attribute: \"edit-mode\"\n      },\n      /**\n       * syncBody\n       */\n      syncBody: {\n        type: Boolean,\n        attribute: \"sync-body\"\n      },\n      /**\n       * Only available if syncBody is true; this allows data binding to the value being worked on in hax-body tag\n       */\n      bodyValue: {\n        type: String,\n        attribute: \"body-value\"\n      },\n      /**\n       * Flag to hide the toast.\n       */\n      hideMessage: {\n        type: Boolean,\n        attribute: \"hide-message\"\n      },\n      /**\n       * Optional URL to redirect to once we save.\n       */\n      redirectLocation: {\n        type: String,\n        attribute: \"redirect-location\"\n      },\n      /**\n       * Option to redirect once we save successfully\n       */\n      redirectOnSave: {\n        type: Boolean,\n        attribute: \"redirect-on-save\"\n      },\n      /**\n       * Reference to activeBody.\n       */\n      activeHaxBody: {\n        type: Object\n      },\n      __imported: {\n        type: Boolean\n      }\n    };\n  }\n\n  /**\n   * Ensure we've imported our content on initial setup\n   */\n  _activeHaxBodyUpdated(newValue, oldValue) {\n    // ensure we import our content once we get an initial registration of active body\n    if (newValue != null && !this.__imported) {\n      this.__imported = true;\n      // see what's inside of this, in a template tag\n      let children = this.querySelector(\"template\");\n      // convert this template content into the real thing\n      // this helps with correctly preserving everything on the way down\n      if (children != null) {\n        newValue.importContent(children.innerHTML);\n      }\n    }\n  }\n\n  /**\n   * Calculate if we have anywhere to redirect to.\n   */\n  _computeRedirectOnSave(redirectLocation) {\n    if (typeof redirectLocation !== typeof undefined) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * LitElement without shadowRoot\n   */\n  createRenderRoot() {\n    return this;\n  }\n  /**\n   * Set certain data bound values to the store once it's ready\n   */\n  _noticeTagChanges(\n    openDefault,\n    allowedTags,\n    hideExportButton,\n    hidePanelOps,\n    hidePreferencesButton,\n    align\n  ) {\n    if (window.HaxStore.ready) {\n      // double check because this can cause issues\n      if (allowedTags) {\n        window.HaxStore.instance.validTagList = allowedTags;\n      }\n      window.HaxStore.instance.haxPanel.hideExportButton = hideExportButton;\n      window.HaxStore.instance.haxPanel.hidePanelOps = hidePanelOps;\n      window.HaxStore.instance.haxPanel.hidePreferencesButton = hidePreferencesButton;\n      window.HaxStore.instance.haxPanel.align = align;\n      if (openDefault) {\n        window.HaxStore.write(\"editMode\", openDefault, this);\n      }\n    }\n  }\n  /**\n   * LitElement ready\n   */\n  firstUpdated() {\n    this.__applyMO();\n  }\n  /**\n   * Set certain data bound values to the store once it's ready\n   */\n  _storeReady(e) {\n    // delay as there can be some timing issues with attributes in CMSs\n    setTimeout(() => {\n      // trigger the update of different parts of the global state\n      this._noticeTagChanges(\n        this.openDefault,\n        this.allowedTags,\n        this.hideExportButton,\n        this.hidePanelOps,\n        this.hidePreferencesButton,\n        this.align\n      );\n      this.__applyMO();\n    }, 250);\n  }\n  /**\n   * Created life cycle\n   */\n  constructor() {\n    super();\n    this.__lock = false;\n    this.openDefault = false;\n    this.hideExportButton = true;\n    this.hidePanelOps = false;\n    this.hidePreferencesButton = false;\n    this.align = \"right\";\n    this.method = \"PUT\";\n    this.syncBody = false;\n    this.bodyValue = \"\";\n    this.hideMessage = false;\n    this.__imported = false;\n    window.SimpleToast.requestAvailability();\n    import(\"@lrnwebcomponents/cms-hax/lib/cms-token.js\");\n    import(\"@lrnwebcomponents/cms-hax/lib/cms-block.js\");\n    import(\"@lrnwebcomponents/cms-hax/lib/cms-views.js\");\n    import(\"@lrnwebcomponents/cms-hax/lib/cms-entity.js\");\n    import(\"@lrnwebcomponents/simple-toast/simple-toast.js\");\n  }\n  updated(changedProperties) {\n    changedProperties.forEach((oldValue, propName) => {\n      if (propName == \"redirectLocation\") {\n        this.redirectOnSave = this._computeRedirectOnSave(this[propName]);\n      }\n      if (propName == \"activeHaxBody\") {\n        this._activeHaxBodyUpdated(this[propName]);\n      }\n      if (\n        [\n          \"openDefault\",\n          \"allowedTags\",\n          \"hideExportButton\",\n          \"hidePanelOps\",\n          \"hidePreferencesButton\",\n          \"align\"\n        ].includes(propName)\n      ) {\n        this._noticeTagChanges(\n          this.openDefault,\n          this.allowedTags,\n          this.hideExportButton,\n          this.hidePanelOps,\n          this.hidePreferencesButton,\n          this.align\n        );\n      }\n    });\n  }\n  /**\n   * detached life cycle\n   */\n  disconnectedCallback() {\n    if (this._observer) {\n      this._observer.disconnect();\n      this._observer = null;\n    }\n    window.removeEventListener(\n      \"hax-store-property-updated\",\n      this._haxStorePropertyUpdated.bind(this)\n    );\n    window.removeEventListener(\"hax-store-ready\", this._storeReady.bind(this));\n    window.removeEventListener(\"hax-save\", this._saveFired.bind(this));\n    super.disconnectedCallback();\n  }\n  /**\n   * Attached to the DOM; now we can fire event to the store that\n   * we exist and are the thing being edited.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    setTimeout(() => {\n      window.addEventListener(\n        \"hax-store-property-updated\",\n        this._haxStorePropertyUpdated.bind(this)\n      );\n      window.addEventListener(\"hax-store-ready\", this._storeReady.bind(this));\n      window.addEventListener(\"hax-save\", this._saveFired.bind(this));\n    }, 0);\n    this.__applyMO();\n  }\n  __applyMO() {\n    // notice ANY change to body and bubble up, only when we are attached though\n    if (\n      !this._observer &&\n      this.syncBody &&\n      window.HaxStore &&\n      window.HaxStore.instance &&\n      window.HaxStore.instance.activeHaxBody\n    ) {\n      this._observer = new MutationObserver(mutations => {\n        if (!this.__lock) {\n          this.__lock = true;\n          this.dispatchEvent(\n            new CustomEvent(\"hax-body-content-changed\", {\n              bubbles: true,\n              cancelable: true,\n              composed: true,\n              detail: window.HaxStore.instance.activeHaxBody.haxToContent()\n            })\n          );\n          setTimeout(() => {\n            this.__lock = false;\n          }, 100);\n        }\n      });\n      this._observer.observe(window.HaxStore.instance.activeHaxBody, {\n        childList: true,\n        subtree: true\n      });\n    }\n  }\n  /**\n   * Store updated, sync.\n   */\n  _haxStorePropertyUpdated(e) {\n    if (\n      e.detail &&\n      typeof e.detail.value !== typeof undefined &&\n      e.detail.property\n    ) {\n      if (typeof e.detail.value === \"object\") {\n        this[e.detail.property] = { ...e.detail.value };\n      } else {\n        this[e.detail.property] = e.detail.value;\n      }\n    }\n  }\n\n  /**\n   * _saveFired\n   */\n  _saveFired(e) {\n    // generate sanitized content\n    this.updatePageData = window.HaxStore.instance.activeHaxBody.haxToContent();\n    // send the request\n    this.querySelector(\"#pageupdateajax\").generateRequest();\n  }\n\n  /**\n   * _handleUpdateResponse\n   */\n  _handleUpdateResponse(e) {\n    if (!this.hideMessage) {\n      const evt = new CustomEvent(\"simple-toast-show\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: {\n          text: \"Saved!\",\n          duration: 3000\n        }\n      });\n      this.dispatchEvent(evt);\n      // support auto redirecting on save if that's been requested\n      // in the integration point\n      if (this.redirectOnSave) {\n        setTimeout(() => {\n          // trigger redirect\n          window.location = this.redirectLocation;\n        }, 500);\n      }\n    }\n  }\n}\nwindow.customElements.define(CmsHax.tag, CmsHax);\nexport { CmsHax };\n"],"names":["CmsHax","__lock","openDefault","hideExportButton","hidePanelOps","hidePreferencesButton","align","method","syncBody","bodyValue","hideMessage","__imported","window","SimpleToast","requestAvailability","LitElement","html","this","endPoint","updatePageData","_handleUpdateResponse","appStoreConnection","newValue","oldValue","children","querySelector","importContent","innerHTML","redirectLocation","_typeof","allowedTags","HaxStore","ready","instance","validTagList","haxPanel","write","__applyMO","e","setTimeout","_this2","_noticeTagChanges","css","type","Boolean","reflect","attribute","String","Array","editMode","redirectOnSave","activeHaxBody","Object","changedProperties","forEach","propName","_this3","_computeRedirectOnSave","_activeHaxBodyUpdated","includes","_observer","disconnect","removeEventListener","_haxStorePropertyUpdated","bind","_storeReady","_saveFired","addEventListener","_this4","MutationObserver","mutations","_this5","dispatchEvent","CustomEvent","bubbles","cancelable","composed","detail","haxToContent","observe","childList","subtree","value","property","generateRequest","evt","text","duration","location","_this6","customElements","define","tag"],"mappings":"2yEAQMA,yKA0PGC,QAAS,IACTC,aAAc,IACdC,kBAAmB,IACnBC,cAAe,IACfC,uBAAwB,IACxBC,MAAQ,UACRC,OAAS,QACTC,UAAW,IACXC,UAAY,KACZC,aAAc,IACdC,YAAa,EAClBC,OAAOC,YAAYC,6BACZ,qDACA,qDACA,qDACA,sDACA,gSA1QUC,yDAgBVC,WAGIC,KAAKC,SACFD,KAAKV,OACPU,KAAKE,eAGAF,KAAKG,sBAEAH,KAAKI,kEA6IPC,EAAUC,MAEd,MAAZD,IAAqBL,KAAKN,WAAY,MACnCA,YAAa,MAEda,EAAWP,KAAKQ,cAAc,YAGlB,MAAZD,GACFF,EAASI,cAAcF,EAASG,2DAQfC,uBACjBC,EAAOD,qDASJX,+CAMPf,EACA4B,EACA3B,EACAC,EACAC,EACAC,GAEIM,OAAOmB,SAASC,QAEdF,IACFlB,OAAOmB,SAASE,SAASC,aAAeJ,GAE1ClB,OAAOmB,SAASE,SAASE,SAAShC,iBAAmBA,EACrDS,OAAOmB,SAASE,SAASE,SAAS/B,aAAeA,EACjDQ,OAAOmB,SAASE,SAASE,SAAS9B,sBAAwBA,EAC1DO,OAAOmB,SAASE,SAASE,SAAS7B,MAAQA,EACtCJ,GACFU,OAAOmB,SAASK,MAAM,WAAYlC,EAAae,mDAQ9CoB,gDAKKC,cAEVC,WAAW,WAETC,EAAKC,kBACHD,EAAKtC,YACLsC,EAAKV,YACLU,EAAKrC,iBACLqC,EAAKpC,aACLoC,EAAKnC,sBACLmC,EAAKlC,OAEPkC,EAAKH,aACJ,4CA9OI,CACLK,8CAyBK,mDAIA,CAILxC,YAAa,CACXyC,KAAMC,QACNC,SAAS,EACTC,UAAW,gBAMb3C,iBAAkB,CAChBwC,KAAMC,QACNE,UAAW,sBAKb1C,aAAc,CACZuC,KAAMC,QACNE,UAAW,kBAKbzC,sBAAuB,CACrBsC,KAAMC,QACNE,UAAW,2BAKbxC,MAAO,CACLqC,KAAMI,QASRjB,YAAa,CACXa,KAAMK,OAKR9B,SAAU,CACRyB,KAAMI,OACND,UAAW,aAKbvC,OAAQ,CACNoC,KAAMI,QAKR5B,eAAgB,CACdwB,KAAMI,OACND,UAAW,oBAKbzB,mBAAoB,CAClBsB,KAAMI,OACND,UAAW,wBAKbG,SAAU,CACRN,KAAMC,QACNC,SAAS,EACTC,UAAW,aAKbtC,SAAU,CACRmC,KAAMC,QACNE,UAAW,aAKbrC,UAAW,CACTkC,KAAMI,OACND,UAAW,cAKbpC,YAAa,CACXiC,KAAMC,QACNE,UAAW,gBAKblB,iBAAkB,CAChBe,KAAMI,OACND,UAAW,qBAKbI,eAAgB,CACdP,KAAMC,QACNE,UAAW,oBAKbK,cAAe,CACbR,KAAMS,QAERzC,WAAY,CACVgC,KAAMC,iDA6GJS,cACNA,EAAkBC,QAAQ,SAAC/B,EAAUgC,GACnB,oBAAZA,IACFC,EAAKN,eAAiBM,EAAKC,uBAAuBD,EAAKD,KAEzC,iBAAZA,GACFC,EAAKE,sBAAsBF,EAAKD,IAGhC,CACE,cACA,cACA,mBACA,eACA,wBACA,SACAI,SAASJ,IAEXC,EAAKf,kBACHe,EAAKtD,YACLsD,EAAK1B,YACL0B,EAAKrD,iBACLqD,EAAKpD,aACLoD,EAAKnD,sBACLmD,EAAKlD,wDASPW,KAAK2C,iBACFA,UAAUC,kBACVD,UAAY,MAEnBhD,OAAOkD,oBACL,6BACA7C,KAAK8C,yBAAyBC,KAAK/C,OAErCL,OAAOkD,oBAAoB,kBAAmB7C,KAAKgD,YAAYD,KAAK/C,OACpEL,OAAOkD,oBAAoB,WAAY7C,KAAKiD,WAAWF,KAAK/C,6KAS5DsB,WAAW,WACT3B,OAAOuD,iBACL,6BACAC,EAAKL,yBAAyBC,KAAKI,IAErCxD,OAAOuD,iBAAiB,kBAAmBC,EAAKH,YAAYD,KAAKI,IACjExD,OAAOuD,iBAAiB,WAAYC,EAAKF,WAAWF,KAAKI,KACxD,QACE/B,4DAKFpB,KAAK2C,WACN3C,KAAKT,UACLI,OAAOmB,UACPnB,OAAOmB,SAASE,UAChBrB,OAAOmB,SAASE,SAASkB,qBAEpBS,UAAY,IAAIS,iBAAiB,SAAAC,GAC/BC,EAAKtE,SACRsE,EAAKtE,QAAS,EACdsE,EAAKC,cACH,IAAIC,YAAY,2BAA4B,CAC1CC,SAAS,EACTC,YAAY,EACZC,UAAU,EACVC,OAAQjE,OAAOmB,SAASE,SAASkB,cAAc2B,kBAGnDvC,WAAW,WACTgC,EAAKtE,QAAS,GACb,aAGF2D,UAAUmB,QAAQnE,OAAOmB,SAASE,SAASkB,cAAe,CAC7D6B,WAAW,EACXC,SAAS,sDAOU3C,GAErBA,EAAEuC,sBACFhD,EAAOS,EAAEuC,OAAOK,QAChB5C,EAAEuC,OAAOM,WAEqB,WAA1BtD,EAAOS,EAAEuC,OAAOK,YACb5C,EAAEuC,OAAOM,gVAAiB7C,EAAEuC,OAAOK,YAEnC5C,EAAEuC,OAAOM,UAAY7C,EAAEuC,OAAOK,0CAQ9B5C,QAEJnB,eAAiBP,OAAOmB,SAASE,SAASkB,cAAc2B,oBAExDrD,cAAc,mBAAmB2D,gEAMlB9C,kBACfrB,KAAKP,YAAa,KACf2E,EAAM,IAAIZ,YAAY,oBAAqB,CAC/CC,SAAS,EACTC,YAAY,EACZC,UAAU,EACVC,OAAQ,CACNS,KAAM,SACNC,SAAU,YAGTf,cAAca,GAGfpE,KAAKiC,gBACPX,WAAW,WAET3B,OAAO4E,SAAWC,EAAK7D,kBACtB,eAKXhB,OAAO8E,eAAeC,OAAO3F,EAAO4F,IAAK5F"}