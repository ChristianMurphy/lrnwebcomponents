{
  "version": 2,
  "tags": [
    {
      "name": "cms-hax",
      "description": "`cms-hax`",
      "jsDoc": "/**\n * `cms-hax`\n * @customElement cms-hax\n * @demo ../../demo/index.html\n */",
      "attributes": [
        {
          "name": "allowedTags",
          "description": "allowed Tags, usually as dictated by the input filtering\nlayer of the backend system that HAX is riding on.\nWhile not fullproof, this at least will enforce front-end\nfiltering to match what actually is going to be allowed\nto be saved in the first place.",
          "jsDoc": "/**\n       * allowed Tags, usually as dictated by the input filtering\n       * layer of the backend system that HAX is riding on.\n       * While not fullproof, this at least will enforce front-end\n       * filtering to match what actually is going to be allowed\n       * to be saved in the first place.\n       */",
          "type": "any[]"
        },
        {
          "name": "end-point",
          "description": "Location to save content to.",
          "jsDoc": "/**\n       * Location to save content to.\n       */",
          "type": "string"
        },
        {
          "name": "udpate-page-data",
          "description": "Page data, body of text as a string.",
          "jsDoc": "/**\n       * Page data, body of text as a string.\n       */",
          "type": "string"
        },
        {
          "name": "app-store-connection",
          "description": "Connection object for talking to an app store.",
          "jsDoc": "/**\n       * Connection object for talking to an app store.\n       */",
          "type": "string"
        },
        {
          "name": "edit-mode",
          "description": "State of the panel",
          "jsDoc": "/**\n       * State of the panel\n       */",
          "type": "boolean"
        },
        {
          "name": "redirect-location",
          "description": "Optional URL to redirect to once we save.",
          "jsDoc": "/**\n       * Optional URL to redirect to once we save.\n       */",
          "type": "string"
        },
        {
          "name": "redirect-on-save",
          "description": "Option to redirect once we save successfully",
          "jsDoc": "/**\n       * Option to redirect once we save successfully\n       */",
          "type": "boolean"
        },
        {
          "name": "activeHaxBody",
          "description": "Reference to activeBody.",
          "jsDoc": "/**\n       * Reference to activeBody.\n       */",
          "type": "{}"
        },
        {
          "name": "open-default",
          "type": "boolean"
        },
        {
          "name": "hide-export-button",
          "type": "boolean"
        },
        {
          "name": "hide-panel-ops",
          "type": "boolean"
        },
        {
          "name": "hide-preferences-button",
          "type": "boolean"
        },
        {
          "name": "align",
          "type": "string"
        },
        {
          "name": "method",
          "type": "string"
        },
        {
          "name": "sync-body",
          "type": "boolean"
        },
        {
          "name": "body-value",
          "type": "string"
        },
        {
          "name": "hide-message",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "allowedTags",
          "description": "allowed Tags, usually as dictated by the input filtering\nlayer of the backend system that HAX is riding on.\nWhile not fullproof, this at least will enforce front-end\nfiltering to match what actually is going to be allowed\nto be saved in the first place.",
          "jsDoc": "/**\n       * allowed Tags, usually as dictated by the input filtering\n       * layer of the backend system that HAX is riding on.\n       * While not fullproof, this at least will enforce front-end\n       * filtering to match what actually is going to be allowed\n       * to be saved in the first place.\n       */",
          "type": "any[]"
        },
        {
          "name": "endPoint",
          "description": "Location to save content to.",
          "jsDoc": "/**\n       * Location to save content to.\n       */",
          "type": "string"
        },
        {
          "name": "updatePageData",
          "description": "Page data, body of text as a string.",
          "jsDoc": "/**\n       * Page data, body of text as a string.\n       */",
          "type": "string"
        },
        {
          "name": "appStoreConnection",
          "description": "Connection object for talking to an app store.",
          "jsDoc": "/**\n       * Connection object for talking to an app store.\n       */",
          "type": "string"
        },
        {
          "name": "editMode",
          "description": "State of the panel",
          "jsDoc": "/**\n       * State of the panel\n       */",
          "type": "boolean"
        },
        {
          "name": "redirectLocation",
          "description": "Optional URL to redirect to once we save.",
          "jsDoc": "/**\n       * Optional URL to redirect to once we save.\n       */",
          "type": "string"
        },
        {
          "name": "redirectOnSave",
          "description": "Option to redirect once we save successfully",
          "jsDoc": "/**\n       * Option to redirect once we save successfully\n       */",
          "type": "boolean"
        },
        {
          "name": "activeHaxBody",
          "description": "Reference to activeBody.",
          "jsDoc": "/**\n       * Reference to activeBody.\n       */",
          "type": "{}"
        },
        {
          "name": "openDefault",
          "type": "boolean"
        },
        {
          "name": "hideExportButton",
          "type": "boolean"
        },
        {
          "name": "hidePanelOps",
          "type": "boolean"
        },
        {
          "name": "hidePreferencesButton",
          "type": "boolean"
        },
        {
          "name": "align",
          "type": "string"
        },
        {
          "name": "method",
          "type": "string"
        },
        {
          "name": "syncBody",
          "type": "boolean"
        },
        {
          "name": "bodyValue",
          "type": "string"
        },
        {
          "name": "hideMessage",
          "type": "boolean"
        }
      ],
      "events": [
        {
          "name": "simple-toast-show"
        },
        {
          "name": "hax-body-content-changed"
        }
      ],
      "slots": []
    },
    {
      "name": "cms-hax",
      "description": "`cms-hax`",
      "jsDoc": "/**\n * `cms-hax`\n * @customElement cms-hax\n * @demo ../../demo/index.html\n */",
      "attributes": [
        {
          "name": "allowedTags",
          "description": "allowed Tags, usually as dictated by the input filtering\nlayer of the backend system that HAX is riding on.\nWhile not fullproof, this at least will enforce front-end\nfiltering to match what actually is going to be allowed\nto be saved in the first place.",
          "jsDoc": "/**\n       * allowed Tags, usually as dictated by the input filtering\n       * layer of the backend system that HAX is riding on.\n       * While not fullproof, this at least will enforce front-end\n       * filtering to match what actually is going to be allowed\n       * to be saved in the first place.\n       */",
          "type": "any[]"
        },
        {
          "name": "end-point",
          "description": "Location to save content to.",
          "jsDoc": "/**\n       * Location to save content to.\n       */",
          "type": "string"
        },
        {
          "name": "udpate-page-data",
          "description": "Page data, body of text as a string.",
          "jsDoc": "/**\n       * Page data, body of text as a string.\n       */",
          "type": "string"
        },
        {
          "name": "app-store-connection",
          "description": "Connection object for talking to an app store.",
          "jsDoc": "/**\n       * Connection object for talking to an app store.\n       */",
          "type": "string"
        },
        {
          "name": "edit-mode",
          "description": "State of the panel",
          "jsDoc": "/**\n       * State of the panel\n       */",
          "type": "boolean"
        },
        {
          "name": "redirect-location",
          "description": "Optional URL to redirect to once we save.",
          "jsDoc": "/**\n       * Optional URL to redirect to once we save.\n       */",
          "type": "string"
        },
        {
          "name": "redirect-on-save",
          "description": "Option to redirect once we save successfully",
          "jsDoc": "/**\n       * Option to redirect once we save successfully\n       */",
          "type": "boolean"
        },
        {
          "name": "activeHaxBody",
          "description": "Reference to activeBody.",
          "jsDoc": "/**\n       * Reference to activeBody.\n       */",
          "type": "{}"
        },
        {
          "name": "open-default",
          "type": "boolean"
        },
        {
          "name": "hide-export-button",
          "type": "boolean"
        },
        {
          "name": "hide-panel-ops",
          "type": "boolean"
        },
        {
          "name": "hide-preferences-button",
          "type": "boolean"
        },
        {
          "name": "align",
          "type": "string"
        },
        {
          "name": "method",
          "type": "string"
        },
        {
          "name": "sync-body",
          "type": "boolean"
        },
        {
          "name": "body-value",
          "type": "string"
        },
        {
          "name": "hide-message",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "allowedTags",
          "description": "allowed Tags, usually as dictated by the input filtering\nlayer of the backend system that HAX is riding on.\nWhile not fullproof, this at least will enforce front-end\nfiltering to match what actually is going to be allowed\nto be saved in the first place.",
          "jsDoc": "/**\n       * allowed Tags, usually as dictated by the input filtering\n       * layer of the backend system that HAX is riding on.\n       * While not fullproof, this at least will enforce front-end\n       * filtering to match what actually is going to be allowed\n       * to be saved in the first place.\n       */",
          "type": "any[]"
        },
        {
          "name": "endPoint",
          "description": "Location to save content to.",
          "jsDoc": "/**\n       * Location to save content to.\n       */",
          "type": "string"
        },
        {
          "name": "updatePageData",
          "description": "Page data, body of text as a string.",
          "jsDoc": "/**\n       * Page data, body of text as a string.\n       */",
          "type": "string"
        },
        {
          "name": "appStoreConnection",
          "description": "Connection object for talking to an app store.",
          "jsDoc": "/**\n       * Connection object for talking to an app store.\n       */",
          "type": "string"
        },
        {
          "name": "editMode",
          "description": "State of the panel",
          "jsDoc": "/**\n       * State of the panel\n       */",
          "type": "boolean"
        },
        {
          "name": "redirectLocation",
          "description": "Optional URL to redirect to once we save.",
          "jsDoc": "/**\n       * Optional URL to redirect to once we save.\n       */",
          "type": "string"
        },
        {
          "name": "redirectOnSave",
          "description": "Option to redirect once we save successfully",
          "jsDoc": "/**\n       * Option to redirect once we save successfully\n       */",
          "type": "boolean"
        },
        {
          "name": "activeHaxBody",
          "description": "Reference to activeBody.",
          "jsDoc": "/**\n       * Reference to activeBody.\n       */",
          "type": "{}"
        },
        {
          "name": "openDefault",
          "type": "boolean"
        },
        {
          "name": "hideExportButton",
          "type": "boolean"
        },
        {
          "name": "hidePanelOps",
          "type": "boolean"
        },
        {
          "name": "hidePreferencesButton",
          "type": "boolean"
        },
        {
          "name": "align",
          "type": "string"
        },
        {
          "name": "method",
          "type": "string"
        },
        {
          "name": "syncBody",
          "type": "boolean"
        },
        {
          "name": "bodyValue",
          "type": "string"
        },
        {
          "name": "hideMessage",
          "type": "boolean"
        }
      ],
      "events": [
        {
          "name": "simple-toast-show"
        },
        {
          "name": "hax-body-content-changed"
        }
      ],
      "slots": []
    },
    {
      "name": "cms-block",
      "description": "`cms-block`\n`Render and process a  / block from a content management system.`",
      "jsDoc": "/**\n * `cms-block`\n * `Render and process a  / block from a content management system.`\n * @customElement cms-block\n */",
      "attributes": [
        {
          "name": "block-module",
          "description": "Module supplying the block",
          "jsDoc": "/**\n       * Module supplying the block\n       */",
          "type": "string"
        },
        {
          "name": "block-delta",
          "description": "A delta value relative to the module",
          "jsDoc": "/**\n       * A delta value relative to the module\n       */",
          "type": "string"
        },
        {
          "name": "block-end-point",
          "description": "block end point updated, change the way we do processing.",
          "jsDoc": "/**\n       * block end point updated, change the way we do processing.\n       */",
          "type": "string"
        },
        {
          "name": "bodyData",
          "description": "Body data which is just block with some encapsulation.",
          "jsDoc": "/**\n       * Body data which is just block with some encapsulation.\n       */",
          "type": "{}"
        },
        {
          "name": "loading",
          "type": "boolean"
        },
        {
          "name": "block-prefix",
          "type": "string"
        },
        {
          "name": "block-suffix",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "blockModule",
          "description": "Module supplying the block",
          "jsDoc": "/**\n       * Module supplying the block\n       */",
          "type": "string"
        },
        {
          "name": "blockDelta",
          "description": "A delta value relative to the module",
          "jsDoc": "/**\n       * A delta value relative to the module\n       */",
          "type": "string"
        },
        {
          "name": "blockEndPoint",
          "description": "block end point updated, change the way we do processing.",
          "jsDoc": "/**\n       * block end point updated, change the way we do processing.\n       */",
          "type": "string"
        },
        {
          "name": "bodyData",
          "description": "Body data which is just block with some encapsulation.",
          "jsDoc": "/**\n       * Body data which is just block with some encapsulation.\n       */",
          "type": "{}"
        },
        {
          "name": "loading",
          "type": "boolean"
        },
        {
          "name": "blockPrefix",
          "type": "string"
        },
        {
          "name": "blockSuffix",
          "type": "string"
        }
      ],
      "events": [],
      "slots": []
    },
    {
      "name": "cms-entity\n`Render and process a  / entity from a content management system.`",
      "description": "`cms-entity`",
      "jsDoc": "/**\n * `cms-entity`\n * @customElement cms-entity\n * `Render and process a  / entity from a content management system.`\n */",
      "attributes": [
        {
          "name": "loading",
          "description": "Loading state",
          "jsDoc": "/**\n       * Loading state\n       */",
          "type": "boolean"
        },
        {
          "name": "entity-type",
          "description": "Type of entity to load",
          "jsDoc": "/**\n       * Type of entity to load\n       */",
          "type": "string"
        },
        {
          "name": "entity-id",
          "description": "ID of the item to load",
          "jsDoc": "/**\n       * ID of the item to load\n       */",
          "type": "string"
        },
        {
          "name": "entity-display-mode",
          "description": "Display mode of the entity",
          "jsDoc": "/**\n       * Display mode of the entity\n       */",
          "type": "string"
        },
        {
          "name": "entity-end-point",
          "description": "entity end point updated, change the way we do processing.",
          "jsDoc": "/**\n       * entity end point updated, change the way we do processing.\n       */",
          "type": "string"
        },
        {
          "name": "entity-prefix",
          "description": "Prefix for the entity to be processed",
          "jsDoc": "/**\n       * Prefix for the entity to be processed\n       */",
          "type": "string"
        },
        {
          "name": "entity-suffix",
          "description": "Suffix for the entity to be processed",
          "jsDoc": "/**\n       * Suffix for the entity to be processed\n       */",
          "type": "string"
        },
        {
          "name": "bodyData",
          "description": "Body data which is just entity with some encapsulation.",
          "jsDoc": "/**\n       * Body data which is just entity with some encapsulation.\n       */",
          "type": "{}"
        },
        {
          "name": "entity-data",
          "description": "entity data from the end point.",
          "jsDoc": "/**\n       * entity data from the end point.\n       */",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "loading",
          "description": "Loading state",
          "jsDoc": "/**\n       * Loading state\n       */",
          "type": "boolean"
        },
        {
          "name": "entityType",
          "description": "Type of entity to load",
          "jsDoc": "/**\n       * Type of entity to load\n       */",
          "type": "string"
        },
        {
          "name": "entityId",
          "description": "ID of the item to load",
          "jsDoc": "/**\n       * ID of the item to load\n       */",
          "type": "string"
        },
        {
          "name": "entityDisplayMode",
          "description": "Display mode of the entity",
          "jsDoc": "/**\n       * Display mode of the entity\n       */",
          "type": "string"
        },
        {
          "name": "entityEndPoint",
          "description": "entity end point updated, change the way we do processing.",
          "jsDoc": "/**\n       * entity end point updated, change the way we do processing.\n       */",
          "type": "string"
        },
        {
          "name": "entityPrefix",
          "description": "Prefix for the entity to be processed",
          "jsDoc": "/**\n       * Prefix for the entity to be processed\n       */",
          "type": "string"
        },
        {
          "name": "entitySuffix",
          "description": "Suffix for the entity to be processed",
          "jsDoc": "/**\n       * Suffix for the entity to be processed\n       */",
          "type": "string"
        },
        {
          "name": "bodyData",
          "description": "Body data which is just entity with some encapsulation.",
          "jsDoc": "/**\n       * Body data which is just entity with some encapsulation.\n       */",
          "type": "{}"
        },
        {
          "name": "entityData",
          "description": "entity data from the end point.",
          "jsDoc": "/**\n       * entity data from the end point.\n       */",
          "type": "string"
        }
      ],
      "events": [],
      "slots": []
    },
    {
      "name": "cms-token",
      "description": "`cms-token`\n`Render and process a shortcode / token from a content management system.`",
      "jsDoc": "/**\n * `cms-token`\n * `Render and process a shortcode / token from a content management system.`\n * @microcopy - the mental model for this element\n * - cms   Content management system, while writen against Drupal should be\n *         abstract enough to work with just about anything.\n * - token a snippet / shortcode of logic to unpack and turn into something\n *         more complex. Usually of the form [actual:thing:here] or\n *         [[action|thing=stuff|here=place]] style. Either way, it's a\n *         snippet which will get sent to a backend and dynamically replaced.\n * @customElement cms-token\n */",
      "attributes": [
        {
          "name": "loading",
          "description": "Loading state",
          "jsDoc": "/**\n       * Loading state\n       */",
          "type": "boolean"
        },
        {
          "name": "token",
          "description": "Token changed (somehow) do the token processing.",
          "jsDoc": "/**\n       * Token changed (somehow) do the token processing.\n       */",
          "type": "string"
        },
        {
          "name": "token-end-point",
          "description": "Token end point updated, change the way we do processing.",
          "jsDoc": "/**\n       * Token end point updated, change the way we do processing.\n       */",
          "type": "string"
        },
        {
          "name": "bodyData",
          "description": "Body data which is just token with some encapsulation.",
          "jsDoc": "/**\n       * Body data which is just token with some encapsulation.\n       */",
          "type": "{}"
        },
        {
          "name": "token-data",
          "description": "Token data from the end point.",
          "jsDoc": "/**\n       * Token data from the end point.\n       */",
          "type": "string"
        },
        {
          "name": "token-prefix",
          "description": "Prefix for the token to be processed",
          "jsDoc": "/**\n       * Prefix for the token to be processed\n       */",
          "type": "string"
        },
        {
          "name": "token-suffix",
          "description": "Suffix for the token to be processed",
          "jsDoc": "/**\n       * Suffix for the token to be processed\n       */",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "loading",
          "description": "Loading state",
          "jsDoc": "/**\n       * Loading state\n       */",
          "type": "boolean"
        },
        {
          "name": "token",
          "description": "Token changed (somehow) do the token processing.",
          "jsDoc": "/**\n       * Token changed (somehow) do the token processing.\n       */",
          "type": "string"
        },
        {
          "name": "tokenEndPoint",
          "description": "Token end point updated, change the way we do processing.",
          "jsDoc": "/**\n       * Token end point updated, change the way we do processing.\n       */",
          "type": "string"
        },
        {
          "name": "bodyData",
          "description": "Body data which is just token with some encapsulation.",
          "jsDoc": "/**\n       * Body data which is just token with some encapsulation.\n       */",
          "type": "{}"
        },
        {
          "name": "tokenData",
          "description": "Token data from the end point.",
          "jsDoc": "/**\n       * Token data from the end point.\n       */",
          "type": "string"
        },
        {
          "name": "tokenPrefix",
          "description": "Prefix for the token to be processed",
          "jsDoc": "/**\n       * Prefix for the token to be processed\n       */",
          "type": "string"
        },
        {
          "name": "tokenSuffix",
          "description": "Suffix for the token to be processed",
          "jsDoc": "/**\n       * Suffix for the token to be processed\n       */",
          "type": "string"
        }
      ],
      "events": [],
      "slots": []
    },
    {
      "name": "cms-views\n`Render and process a  / views from a content management system.`",
      "description": "`cms-views`",
      "jsDoc": "/**\n * `cms-views`\n * @customElement cms-views\n * `Render and process a  / views from a content management system.`\n */",
      "attributes": [
        {
          "name": "loading",
          "description": "Loading state",
          "jsDoc": "/**\n       * Loading state\n       */",
          "type": "boolean"
        },
        {
          "name": "views-name",
          "description": "Name of the views to render",
          "jsDoc": "/**\n       * Name of the views to render\n       */",
          "type": "string"
        },
        {
          "name": "views-display",
          "description": "Display from the views",
          "jsDoc": "/**\n       * Display from the views\n       */",
          "type": "string"
        },
        {
          "name": "views-end-point",
          "description": "views end point updated, change the way we do processing.",
          "jsDoc": "/**\n       * views end point updated, change the way we do processing.\n       */",
          "type": "string"
        },
        {
          "name": "views-prefix",
          "description": "Prefix for the views to be processed",
          "jsDoc": "/**\n       * Prefix for the views to be processed\n       */",
          "type": "string"
        },
        {
          "name": "views-suffix",
          "description": "Suffix for the views to be processed",
          "jsDoc": "/**\n       * Suffix for the views to be processed\n       */",
          "type": "string"
        },
        {
          "name": "bodyData",
          "description": "Body data which is just views with some encapsulation.",
          "jsDoc": "/**\n       * Body data which is just views with some encapsulation.\n       */",
          "type": "{}"
        },
        {
          "name": "views-data",
          "description": "views data from the end point.",
          "jsDoc": "/**\n       * views data from the end point.\n       */",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "loading",
          "description": "Loading state",
          "jsDoc": "/**\n       * Loading state\n       */",
          "type": "boolean"
        },
        {
          "name": "viewsName",
          "description": "Name of the views to render",
          "jsDoc": "/**\n       * Name of the views to render\n       */",
          "type": "string"
        },
        {
          "name": "viewsDisplay",
          "description": "Display from the views",
          "jsDoc": "/**\n       * Display from the views\n       */",
          "type": "string"
        },
        {
          "name": "viewsEndPoint",
          "description": "views end point updated, change the way we do processing.",
          "jsDoc": "/**\n       * views end point updated, change the way we do processing.\n       */",
          "type": "string"
        },
        {
          "name": "viewsPrefix",
          "description": "Prefix for the views to be processed",
          "jsDoc": "/**\n       * Prefix for the views to be processed\n       */",
          "type": "string"
        },
        {
          "name": "viewsSuffix",
          "description": "Suffix for the views to be processed",
          "jsDoc": "/**\n       * Suffix for the views to be processed\n       */",
          "type": "string"
        },
        {
          "name": "bodyData",
          "description": "Body data which is just views with some encapsulation.",
          "jsDoc": "/**\n       * Body data which is just views with some encapsulation.\n       */",
          "type": "{}"
        },
        {
          "name": "viewsData",
          "description": "views data from the end point.",
          "jsDoc": "/**\n       * views data from the end point.\n       */",
          "type": "string"
        }
      ],
      "events": [],
      "slots": []
    },
    {
      "name": "cms-hax",
      "description": "`cms-hax`",
      "jsDoc": "/**\n * `cms-hax`\n * @customElement cms-hax\n * @demo ../../demo/index.html\n */",
      "attributes": [
        {
          "name": "allowedTags",
          "description": "allowed Tags, usually as dictated by the input filtering\nlayer of the backend system that HAX is riding on.\nWhile not fullproof, this at least will enforce front-end\nfiltering to match what actually is going to be allowed\nto be saved in the first place.",
          "jsDoc": "/**\n       * allowed Tags, usually as dictated by the input filtering\n       * layer of the backend system that HAX is riding on.\n       * While not fullproof, this at least will enforce front-end\n       * filtering to match what actually is going to be allowed\n       * to be saved in the first place.\n       */",
          "type": "any[]"
        },
        {
          "name": "end-point",
          "description": "Location to save content to.",
          "jsDoc": "/**\n       * Location to save content to.\n       */",
          "type": "string"
        },
        {
          "name": "udpate-page-data",
          "description": "Page data, body of text as a string.",
          "jsDoc": "/**\n       * Page data, body of text as a string.\n       */",
          "type": "string"
        },
        {
          "name": "app-store-connection",
          "description": "Connection object for talking to an app store.",
          "jsDoc": "/**\n       * Connection object for talking to an app store.\n       */",
          "type": "string"
        },
        {
          "name": "edit-mode",
          "description": "State of the panel",
          "jsDoc": "/**\n       * State of the panel\n       */",
          "type": "boolean"
        },
        {
          "name": "redirect-location",
          "description": "Optional URL to redirect to once we save.",
          "jsDoc": "/**\n       * Optional URL to redirect to once we save.\n       */",
          "type": "string"
        },
        {
          "name": "redirect-on-save",
          "description": "Option to redirect once we save successfully",
          "jsDoc": "/**\n       * Option to redirect once we save successfully\n       */",
          "type": "boolean"
        },
        {
          "name": "activeHaxBody",
          "description": "Reference to activeBody.",
          "jsDoc": "/**\n       * Reference to activeBody.\n       */",
          "type": "{}"
        },
        {
          "name": "open-default",
          "type": "boolean"
        },
        {
          "name": "hide-export-button",
          "type": "boolean"
        },
        {
          "name": "hide-panel-ops",
          "type": "boolean"
        },
        {
          "name": "hide-preferences-button",
          "type": "boolean"
        },
        {
          "name": "align",
          "type": "string"
        },
        {
          "name": "method",
          "type": "string"
        },
        {
          "name": "sync-body",
          "type": "boolean"
        },
        {
          "name": "body-value",
          "type": "string"
        },
        {
          "name": "hide-message",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "allowedTags",
          "description": "allowed Tags, usually as dictated by the input filtering\nlayer of the backend system that HAX is riding on.\nWhile not fullproof, this at least will enforce front-end\nfiltering to match what actually is going to be allowed\nto be saved in the first place.",
          "jsDoc": "/**\n       * allowed Tags, usually as dictated by the input filtering\n       * layer of the backend system that HAX is riding on.\n       * While not fullproof, this at least will enforce front-end\n       * filtering to match what actually is going to be allowed\n       * to be saved in the first place.\n       */",
          "type": "any[]"
        },
        {
          "name": "endPoint",
          "description": "Location to save content to.",
          "jsDoc": "/**\n       * Location to save content to.\n       */",
          "type": "string"
        },
        {
          "name": "updatePageData",
          "description": "Page data, body of text as a string.",
          "jsDoc": "/**\n       * Page data, body of text as a string.\n       */",
          "type": "string"
        },
        {
          "name": "appStoreConnection",
          "description": "Connection object for talking to an app store.",
          "jsDoc": "/**\n       * Connection object for talking to an app store.\n       */",
          "type": "string"
        },
        {
          "name": "editMode",
          "description": "State of the panel",
          "jsDoc": "/**\n       * State of the panel\n       */",
          "type": "boolean"
        },
        {
          "name": "redirectLocation",
          "description": "Optional URL to redirect to once we save.",
          "jsDoc": "/**\n       * Optional URL to redirect to once we save.\n       */",
          "type": "string"
        },
        {
          "name": "redirectOnSave",
          "description": "Option to redirect once we save successfully",
          "jsDoc": "/**\n       * Option to redirect once we save successfully\n       */",
          "type": "boolean"
        },
        {
          "name": "activeHaxBody",
          "description": "Reference to activeBody.",
          "jsDoc": "/**\n       * Reference to activeBody.\n       */",
          "type": "{}"
        },
        {
          "name": "openDefault",
          "type": "boolean"
        },
        {
          "name": "hideExportButton",
          "type": "boolean"
        },
        {
          "name": "hidePanelOps",
          "type": "boolean"
        },
        {
          "name": "hidePreferencesButton",
          "type": "boolean"
        },
        {
          "name": "align",
          "type": "string"
        },
        {
          "name": "method",
          "type": "string"
        },
        {
          "name": "syncBody",
          "type": "boolean"
        },
        {
          "name": "bodyValue",
          "type": "string"
        },
        {
          "name": "hideMessage",
          "type": "boolean"
        }
      ],
      "events": [
        {
          "name": "simple-toast-show"
        },
        {
          "name": "hax-body-content-changed"
        }
      ],
      "slots": []
    }
  ]
}
