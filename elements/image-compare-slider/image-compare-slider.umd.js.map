{"version":3,"file":"image-compare-slider.umd.js","sources":["image-compare-slider.umd.js"],"sourcesContent":["import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { SchemaBehaviors } from \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\n/**\n * `image-compare-slider`\n * Layers images over each other with a slider interface to compare them\n * @microcopy - the mental model for this element\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass ImageCompareSlider extends SchemaBehaviors(PolymerElement) {\n  constructor() {\n    super();\n    import(\"@lrnwebcomponents/user-action/user-action.js\");\n    import(\"@polymer/iron-image/iron-image.js\");\n    import(\"@polymer/paper-slider/paper-slider.js\");\n  }\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-flex;\n          width: 100%;\n          @apply --image-compare-slider;\n        }\n        :host > div,\n        :host #container,\n        :host #top {\n          width: 100%;\n        }\n        :host #container {\n          background-size: cover;\n          overflow: visible;\n          @apply --image-compare-slider-container;\n        }\n        :host #top {\n          background-size: auto 100%;\n          overflow: hidden;\n        }\n        :host #slider {\n          width: calc(100% + 30px);\n          margin-left: -15px;\n          @apply --image-compare-slider-control;\n        }\n      </style>\n      <div>\n        <h2>[[title]]</h2>\n        <div id=\"container\" style$=\"background-image: url([[bottomSrc]]);\">\n          <div id=\"top\" style$=\"background-image: url([[topSrc]]);\"></div>\n        </div>\n        <user-action track=\"click\">\n          <paper-slider id=\"slider\" value=\"50\"></paper-slider>\n        </user-action>\n        <div></div>\n      </div>\n    `;\n  }\n\n  static get tag() {\n    return \"image-compare-slider\";\n  }\n  static get observers() {\n    return [\"_setStyles(width,height,sliderPercent)\"];\n  }\n\n  static get properties() {\n    return {\n      ...super.properties,\n\n      /**\n       * Title\n       */\n      title: {\n        type: String\n      },\n      /**\n       * src for top image\n       */\n      topSrc: {\n        type: String,\n        observer: \"_updateAspect\"\n      },\n      /**\n       * mode for the slider: wipe\n       */\n      opacity: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * src for top image\n       */\n      bottomSrc: {\n        type: String\n      }\n    };\n  }\n  static get haxProperties() {\n    return {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Image comparison\",\n        description:\n          \"Simple element to allow one image to swipe over top of the other.\",\n        icon: \"image:compare\",\n        color: \"orange\",\n        groups: [\"Image\", \"Media\"],\n        handles: [\n          {\n            type: \"image\",\n            source: \"bottomSrc\",\n            source2: \"topSrc\",\n            title: \"title\"\n          }\n        ],\n        meta: {\n          author: \"LRNWebComponents\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"opacity\",\n            title: \"Slider Behavior\",\n            description:\n              \"Do you want the slider to wipe the top image across the bottom one (default), or to adjust the opacity of the top image?\",\n            inputMethod: \"select\",\n            options: {\n              false: \"wipe across\",\n              true: \"adjust opacity\"\n            },\n            icon: \"image:compare\"\n          }\n        ],\n        configure: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"bottomSrc\",\n            title: \"Bottom image\",\n            description: \"The base image to swipe over\",\n            inputMethod: \"haxupload\",\n            validationType: \"url\"\n          },\n          {\n            property: \"topSrc\",\n            title: \"Top image\",\n            description: \"The top image that swipes over\",\n            inputMethod: \"haxupload\",\n            validationType: \"url\"\n          }\n        ],\n        advanced: []\n      }\n    };\n  }\n  ready() {\n    super.ready();\n    this._updateAspect();\n    this._slide();\n    this.shadowRoot\n      .querySelector(\"#slider\")\n      .addEventListener(\"immediate-value-changed\", e => {\n        this._slide();\n      });\n  }\n  /**\n   * updates the slider\n   */\n  _slide() {\n    if (this.opacity === false) {\n      this.shadowRoot.querySelector(\"#top\").style.width =\n        this.shadowRoot.querySelector(\"#slider\").immediateValue + \"%\";\n    } else {\n      this.shadowRoot.querySelector(\"#top\").style.opacity =\n        this.shadowRoot.querySelector(\"#slider\").immediateValue / 100;\n    }\n  }\n  /**\n   * updates the aspect ratio\n   */\n  _updateAspect() {\n    let img = document.createElement(\"img\"),\n      el = this.shadowRoot.querySelector(\"#top\"),\n      getAspect = img => {\n        el.style.paddingTop = (img.height * 100) / img.width + \"%\";\n      };\n    this.__aspect = \"75\";\n    img.setAttribute(\"src\", this.topSrc);\n    if (img.height !== undefined && img.height > 0) {\n      getAspect(img);\n    } else {\n      img.addEventListener(\"load\", function() {\n        getAspect(img);\n      });\n    }\n  }\n}\nwindow.customElements.define(ImageCompareSlider.tag, ImageCompareSlider);\nexport { ImageCompareSlider };\n"],"names":["ImageCompareSlider","SchemaBehaviors","PolymerElement","html","title","type","String","topSrc","observer","opacity","Boolean","value","bottomSrc","canScale","canPosition","canEditSource","gizmo","description","icon","color","groups","handles","source","source2","meta","author","settings","quick","property","inputMethod","options","configure","validationType","advanced","_updateAspect","_slide","shadowRoot","querySelector","addEventListener","e","_this2","this","style","width","immediateValue","img","document","createElement","el","getAspect","paddingTop","height","__aspect","setAttribute","undefined","window","customElements","define","tag"],"mappings":"0mFAWMA,8KAGK,uDACA,4CACA,iSALsBC,kBAAgBC,gEAQtCC,8CAyCA,+DAGA,CAAC,qbAUNC,MAAO,CACLC,KAAMC,QAKRC,OAAQ,CACNF,KAAMC,OACNE,SAAU,iBAKZC,QAAS,CACPJ,KAAMK,QACNC,OAAO,GAKTC,UAAW,CACTP,KAAMC,sDAKH,CACLO,UAAU,EACVC,aAAa,EACbC,eAAe,EACfC,MAAO,CACLZ,MAAO,mBACPa,YACE,oEACFC,KAAM,gBACNC,MAAO,SACPC,OAAQ,CAAC,QAAS,SAClBC,QAAS,CACP,CACEhB,KAAM,QACNiB,OAAQ,YACRC,QAAS,SACTnB,MAAO,UAGXoB,KAAM,CACJC,OAAQ,qBAGZC,SAAU,CACRC,MAAO,CACL,CACEC,SAAU,QACVxB,MAAO,QACPa,YAAa,2BACbY,YAAa,YACbX,KAAM,gBAER,CACEU,SAAU,UACVxB,MAAO,kBACPa,YACE,2HACFY,YAAa,SACbC,QAAS,OACA,mBACD,kBAERZ,KAAM,kBAGVa,UAAW,CACT,CACEH,SAAU,QACVxB,MAAO,QACPa,YAAa,2BACbY,YAAa,aAEf,CACED,SAAU,YACVxB,MAAO,eACPa,YAAa,+BACbY,YAAa,YACbG,eAAgB,OAElB,CACEJ,SAAU,SACVxB,MAAO,YACPa,YAAa,iCACbY,YAAa,YACbG,eAAgB,QAGpBC,SAAU,oGAMTC,qBACAC,cACAC,WACFC,cAAc,WACdC,iBAAiB,0BAA2B,SAAAC,GAC3CC,EAAKL,6CAOY,IAAjBM,KAAKhC,aACF2B,WAAWC,cAAc,QAAQK,MAAMC,MAC1CF,KAAKL,WAAWC,cAAc,WAAWO,eAAiB,SAEvDR,WAAWC,cAAc,QAAQK,MAAMjC,QAC1CgC,KAAKL,WAAWC,cAAc,WAAWO,eAAiB,gDAO1DC,EAAMC,SAASC,cAAc,OAC/BC,EAAKP,KAAKL,WAAWC,cAAc,QACnCY,EAAY,SAAAJ,GACVG,EAAGN,MAAMQ,WAA2B,IAAbL,EAAIM,OAAgBN,EAAIF,MAAQ,UAEtDS,SAAW,KAChBP,EAAIQ,aAAa,MAAOZ,KAAKlC,aACV+C,IAAfT,EAAIM,QAAwBN,EAAIM,OAAS,EAC3CF,EAAUJ,GAEVA,EAAIP,iBAAiB,OAAQ,WAC3BW,EAAUJ,0CAKlBU,OAAOC,eAAeC,OAAOzD,EAAmB0D,IAAK1D"}