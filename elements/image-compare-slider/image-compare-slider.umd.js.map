{"version":3,"file":"image-compare-slider.umd.js","sources":["image-compare-slider.umd.js"],"sourcesContent":["import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nimport \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\nimport \"@polymer/iron-image/iron-image.js\";\nimport \"@polymer/paper-slider/paper-slider.js\";\n/**\n * `image-compare-slider`\n * Layers images over each other with a slider interface to compare them\n * @microcopy - the mental model for this element\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nlet ImageCompareSlider = Polymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-flex;\n        width: 100%;\n        @apply --image-compare-slider;\n      }\n      :host > div,\n      :host #container,\n      :host #top {\n        width: 100%;\n      }\n      :host #container {\n        background-size: cover;\n        overflow: visible;\n        @apply --image-compare-slider-container;\n      }\n      :host #top {\n        background-size: auto 100%;\n        overflow: hidden;\n      }\n      :host #slider {\n        width: calc(100% + 30px);\n        margin-left: -15px;\n        @apply --image-compare-slider-control;\n      }\n    </style>\n    <div>\n      <h2>[[title]]</h2>\n      <div id=\"container\" style$=\"background-image: url([[bottomSrc]]);\">\n        <div id=\"top\" style$=\"background-image: url([[topSrc]]);\"></div>\n      </div>\n      <paper-slider id=\"slider\" value=\"50\"></paper-slider>\n      <div></div>\n    </div>\n  `,\n\n  is: \"image-compare-slider\",\n  behaviors: [HAXBehaviors.PropertiesBehaviors, SchemaBehaviors.Schema],\n  observers: [\"_setStyles(width,height,sliderPercent)\"],\n\n  properties: {\n    /**\n     * Title\n     */\n    title: {\n      type: String\n    },\n    /**\n     * src for top image\n     */\n    topSrc: {\n      type: String,\n      observer: \"_updateAspect\"\n    },\n    /**\n     * mode for the slider: wipe\n     */\n    opacity: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * src for top image\n     */\n    bottomSrc: {\n      type: String\n    }\n  },\n\n  ready: function() {\n    let root = this,\n      slider = root.$.slider;\n    root._updateAspect();\n    root._slide();\n    slider.addEventListener(\"immediate-value-changed\", function(e) {\n      root._slide();\n    });\n  },\n  /**\n   * updates the slider\n   */\n  _slide: function() {\n    let root = this,\n      slider = root.$.slider,\n      top = root.$.top;\n    if (this.opacity === false) {\n      top.style.width = slider.immediateValue + \"%\";\n    } else {\n      top.style.opacity = slider.immediateValue / 100;\n    }\n  },\n  /**\n   * updates the aspect ratio\n   */\n  _updateAspect: function() {\n    let root = this,\n      img = document.createElement(\"img\"),\n      el = root.$.top,\n      getAspect = img => {\n        el.style.paddingTop = (img.height * 100) / img.width + \"%\";\n      };\n    root.__aspect = \"75\";\n    img.setAttribute(\"src\", root.topSrc);\n    if (img.height !== undefined && img.height > 0) {\n      getAspect(img);\n    } else {\n      img.addEventListener(\"load\", function() {\n        getAspect(img);\n      });\n    }\n  },\n\n  /**\n   * Attached to the DOM, now fire.\n   */\n  attached: function() {\n    // Establish hax property binding\n    let props = {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Image comparison\",\n        description:\n          \"Simple element to allow one image to swipe over top of the other.\",\n        icon: \"image:compare\",\n        color: \"orange\",\n        groups: [\"Image\", \"Media\"],\n        handles: [\n          {\n            type: \"image\",\n            source: \"bottomSrc\",\n            source2: \"topSrc\",\n            title: \"title\"\n          }\n        ],\n        meta: {\n          author: \"LRNWebComponents\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"opacity\",\n            title: \"Slider Behavior\",\n            description:\n              \"Do you want the slider to wipe the top image across the bottom one (default), or to adjust the opacity of the top image?\",\n            inputMethod: \"select\",\n            options: {\n              false: \"wipe across\",\n              true: \"adjust opacity\"\n            },\n            icon: \"image:compare\"\n          }\n        ],\n        configure: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"bottomSrc\",\n            title: \"Bottom image\",\n            description: \"The base image to swipe over\",\n            inputMethod: \"haxupload\",\n            validationType: \"url\"\n          },\n          {\n            property: \"topSrc\",\n            title: \"Top image\",\n            description: \"The top image that swipes over\",\n            inputMethod: \"haxupload\",\n            validationType: \"url\"\n          }\n        ],\n        advanced: []\n      }\n    };\n    this.setHaxProperties(props);\n  }\n});\nexport { ImageCompareSlider };\n"],"names":["ImageCompareSlider","Polymer","_template","html","is","behaviors","HAXBehaviors","PropertiesBehaviors","SchemaBehaviors","Schema","observers","properties","title","type","String","topSrc","observer","opacity","Boolean","value","bottomSrc","ready","root","this","slider","$","_updateAspect","_slide","addEventListener","e","top","style","width","immediateValue","img","document","createElement","el","getAspect","paddingTop","height","__aspect","setAttribute","undefined","attached","setHaxProperties","canScale","canPosition","canEditSource","gizmo","description","icon","color","groups","handles","source","source2","meta","author","settings","quick","property","inputMethod","options","configure","validationType","advanced"],"mappings":"0wDAcIA,EAAqBC,UAAQ,CAC/BC,UAAWC,YAqCXC,GAAI,uBACJC,UAAW,CAACC,aAAaC,oBAAqBC,gBAAgBC,QAC9DC,UAAW,CAAC,0CAEZC,WAAY,CAIVC,MAAO,CACLC,KAAMC,QAKRC,OAAQ,CACNF,KAAMC,OACNE,SAAU,iBAKZC,QAAS,CACPJ,KAAMK,QACNC,OAAO,GAKTC,UAAW,CACTP,KAAMC,SAIVO,MAAO,eACDC,EAAOC,KACTC,EAASF,EAAKG,EAAED,OAClBF,EAAKI,gBACLJ,EAAKK,SACLH,EAAOI,iBAAiB,0BAA2B,SAASC,GAC1DP,EAAKK,YAMTA,OAAQ,eAEJH,EADSD,KACKE,EAAED,OAChBM,EAFSP,KAEEE,EAAEK,KACM,IAAjBP,KAAKN,QACPa,EAAIC,MAAMC,MAAQR,EAAOS,eAAiB,IAE1CH,EAAIC,MAAMd,QAAUO,EAAOS,eAAiB,KAMhDP,cAAe,eAEXQ,EAAMC,SAASC,cAAc,OAC7BC,EAFSd,KAECE,EAAEK,IACZQ,EAAY,SAAAJ,GACVG,EAAGN,MAAMQ,WAA2B,IAAbL,EAAIM,OAAgBN,EAAIF,MAAQ,KAJhDT,KAMNkB,SAAW,KAChBP,EAAIQ,aAAa,MAPNnB,KAOkBR,aACV4B,IAAfT,EAAIM,QAAwBN,EAAIM,OAAS,EAC3CF,EAAUJ,GAEVA,EAAIN,iBAAiB,OAAQ,WAC3BU,EAAUJ,MAQhBU,SAAU,gBAwEHC,iBAtEO,CACVC,UAAU,EACVC,aAAa,EACbC,eAAe,EACfC,MAAO,CACLrC,MAAO,mBACPsC,YACE,oEACFC,KAAM,gBACNC,MAAO,SACPC,OAAQ,CAAC,QAAS,SAClBC,QAAS,CACP,CACEzC,KAAM,QACN0C,OAAQ,YACRC,QAAS,SACT5C,MAAO,UAGX6C,KAAM,CACJC,OAAQ,qBAGZC,SAAU,CACRC,MAAO,CACL,CACEC,SAAU,QACVjD,MAAO,QACPsC,YAAa,2BACbY,YAAa,YACbX,KAAM,gBAER,CACEU,SAAU,UACVjD,MAAO,kBACPsC,YACE,2HACFY,YAAa,SACbC,QAAS,OACA,mBACD,kBAERZ,KAAM,kBAGVa,UAAW,CACT,CACEH,SAAU,QACVjD,MAAO,QACPsC,YAAa,2BACbY,YAAa,aAEf,CACED,SAAU,YACVjD,MAAO,eACPsC,YAAa,+BACbY,YAAa,YACbG,eAAgB,OAElB,CACEJ,SAAU,SACVjD,MAAO,YACPsC,YAAa,iCACbY,YAAa,YACbG,eAAgB,QAGpBC,SAAU"}