{"version":3,"file":"simple-modal.umd.js","sources":["simple-modal.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport * as async from \"@polymer/polymer/lib/utils/async.js\";\nimport \"@polymer/paper-dialog/paper-dialog.js\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable.js\";\nimport \"@polymer/paper-button/paper-button.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"@polymer/iron-icon/iron-icon.js\";\nimport \"@polymer/neon-animation/animations/scale-up-animation.js\";\nimport \"@polymer/neon-animation/animations/fade-out-animation.js\";\n// register globally so we can make sure there is only one\nwindow.SimpleModal = window.SimpleModal || {};\n// request if this exists. This helps invoke the element existing in the dom\n// as well as that there is only one of them. That way we can ensure everything\n// is rendered through the same modal\nwindow.SimpleModal.requestAvailability = () => {\n  if (!window.SimpleModal.instance) {\n    window.SimpleModal.instance = document.createElement(\"simple-modal\");\n    document.body.appendChild(window.SimpleModal.instance);\n  }\n  return window.SimpleModal.instance;\n};\n/**\n * `simple-modal`\n * `A simple modal that ensures accessibility and stack order context appropriately`\n *\n * @microcopy - language worth noting:\n *  -\n * \n * CSS Variables: ```\n--simple-modal-titlebar-color: #444;\n--simple-modal-titlebar-background: #ddd;\n--simple-modal-header-color: #222;\n--simple-modal-header-background: #ccc;\n--simple-modal-content-container-color: #222;\n--simple-modal-content-container-background: #fff;\n--simple-modal-buttons-color: unset;\n--simple-modal-buttons-background: unset;\n--simple-modal-button-color: var(--simple-modal-buttons-color);\n--simple-modal-button-background: var(--simple-modal-buttons-background-color);\n```\n *\n * @customElement\n * @polymer\n * @demo demo/index.html demo\n * @demo demo/template.html using simple-modal-template\n */\nclass SimpleModal extends PolymerElement {\n  \n  // render function\n  static get template() {\n    return html`\n<style>:host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host ::slotted(*) {\n  font-size: 14px;\n  @apply --simple-modal-content;\n}\n\n:host #dialog {\n  display: block;\n  margin: auto;\n  width: auto;\n  height: auto;\n  z-index: 1000;\n  width: var(--simple-modal-width, 50%);\n  height: var(--simple-modal-height, 50vh);\n  min-width: var(--simple-modal-min-width, --simple-modal-width);\n  min-height: var(--simple-modal-min-height, --simple-modal-height);\n  max-width: var(--simple-modal-max-width, 100%);\n  max-height: var(--simple-modal-max-height, 75vh);\n  border-radius: 3px;\n  @apply --simple-modal-dialog;\n}\n\n:host #titlebar {\n  margin-top: 0;\n  padding: 0px 16px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: var(--simple-modal-titlebar-color,#444);\n  background-color: var(--simple-modal-titlebar-background,#ddd);\n  border-radius: 3px 3px 0 0;\n  @apply --simple-modal-top;\n}\n\n:host #headerbar {\n  margin: 0;\n  padding: 0 16px;\n  color: var(--simple-modal-header-color, #222);\n  background-color: var(--simple-modal-header-background, #ccc);\n  @apply --simple-modal-headerbar;\n}\n\n:host h2 {\n  margin-right: 8px;\n  padding: 0;\n  flex: auto;\n  font-size: 18px;\n  line-height: 18px;\n  @apply --simple-modal-title;\n}\n\n:host #close {\n  top: 0;\n  padding: 10px 0;\n  min-width: unset;\n  text-transform: none;\n  color: var(--simple-modal-titlebar-color,#444);\n  background-color: transparent;\n  @apply --simple-modal-close;\n}\n\n:host #close iron-icon {\n  width: 16px;\n  height: 16px;\n  color: var(--simple-modal-titlebar-color,#444);\n  @apply --simple-modal-close-icon;\n}\n\n#simple-modal-content {\n  padding: 8px 16px;\n  margin: 0;\n  color: var(--simple-modal-content-container-color, #222);\n  background-color: var(--simple-modal-content-container-background, #fff);\n  --paper-dialog-scrollable: {\n    padding: 0;\n  }\n  @apply --simple-modal-content-container;\n}\n.buttons {\n  padding: 0;\n  margin: 0;\n  color: var(--simple-modal-buttons-color, unset);\n  background-color: var(--simple-modal-buttons-background,unset);\n  @apply --simple-modal-buttons;\n}\n.buttons ::slotted(*) {\n  padding: 0;\n  margin: 0;\n  color: var(--simple-modal-button-color,--simple-modal-buttons-color);\n  background-color: var(--simple-modal-button-background,--simple-modal-buttons-background);\n  @apply --simple-modal-button;\n}</style>\n<paper-dialog id=\"dialog\" \n  always-on-top\n  aria-describedby=\"simple-modal-content\"\n  aria-label$=\"[[_getAriaLabel(title)]]\"\n  aria-labelledby$=\"[[_getAriaLabelledby(title)]]\"\n  aria-modal=\"true\"\n  entry-animation=\"scale-up-animation\" \n  exit-animation=\"fade-out-animation\" \n  role=\"dialog\"\n  opened=\"{{opened}}\" \n  with-backdrop>\n  <div id=\"titlebar\">\n    <h2 id=\"simple-modal-title\" hidden$=\"[[!title]]\">[[title]]</h2>\n    <div></div>\n    <paper-button id=\"close\" dialog-dismiss hidden$=\"[[!opened]]\" label=\"[[closeLabel]]\">\n      <iron-icon aria-hidden=\"true\" icon=\"[[closeIcon]]\"></iron-icon>\n    </paper-button>\n  </div>\n  <div id=\"headerbar\"><slot name=\"header\"></slot></div>\n  <paper-dialog-scrollable id=\"simple-modal-content\">\n    <slot name=\"content\"></slot>\n  </paper-dialog-scrollable>\n  <div class=\"buttons\">\n    <slot name=\"buttons\"></slot>\n  </div>\n</paper-dialog>`;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n  /**\n   * heading / label of the modal\n   */\n  \"title\": {\n    \"name\": \"title\",\n    \"type\": String,\n    \"value\": \"\"\n  },\n  /**\n   * open state\n   */\n  \"opened\": {\n    \"name\": \"opened\",\n    \"type\": Boolean,\n    \"value\": false,\n    \"reflectToAttribute\": true,\n    \"observer\": \"_openedChanged\"\n  },\n  /**\n   * Close label\n   */\n  \"closeLabel\": {\n    \"name\": \"closeLabel\",\n    \"type\": String,\n    \"value\": \"Close\"\n  },\n  /**\n   * Close icon\n   */\n  \"closeIcon\": {\n    \"name\": \"closeIcon\",\n    \"type\": String,\n    \"value\": \"close\"\n  },\n  /**\n   * The element that invoked this. This way we can track our way back accessibly\n   */\n  \"invokedBy\": {\n    \"name\": \"invokedBy\",\n    \"type\": Object\n  }\n}\n;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"simple-modal\";\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"simple-modal-hide\", this.close.bind(this));\n    window.addEventListener(\"simple-modal-show\", this.showEvent.bind(this));\n    this.shadowRoot\n      .querySelector(\"#simple-modal-content\")\n      .addEventListener(\n        \"neon-animation-finish\",\n        this._ironOverlayClosed.bind(this)\n      );\n  }\n  /**\n   * Ensure everything is visible in what's been expanded.\n   */\n  _resizeContent(e) {\n    // fake a resize event to make contents happy\n    async.microTask.run(() => {\n      window.dispatchEvent(new Event(\"resize\"));\n    });\n  }\n  /**\n   * show event call to open the modal and display it's content\n   */\n  showEvent(e) {\n    // if we're already opened and we get told to open again....\n    // swap out the contents\n    if (this.opened) {\n      // wipe the slot of our modal\n      while (dom(this).firstChild !== null) {\n        dom(this).removeChild(dom(this).firstChild);\n      }\n      setTimeout(() => {\n        this.show(\n          e.detail.title,\n          e.detail.elements,\n          e.detail.invokedBy,\n          e.detail.clone\n        );\n      }, 100);\n    } else {\n      this.show(\n        e.detail.title,\n        e.detail.elements,\n        e.detail.invokedBy,\n        e.detail.clone\n      );\n    }\n  }\n  /**\n   * Show the modal and display the material\n   */\n  show(title, elements, invokedBy, clone = false) {\n    this.set(\"invokedBy\", invokedBy);\n    this.title = title;\n    let element;\n    // append element areas into the appropriate slots\n    // ensuring they are set if it wasn't previously\n    let slots = [\"header\", \"content\", \"buttons\"];\n    for (var i in slots) {\n      if (elements[slots[i]]) {\n        if (clone) {\n          element = elements[slots[i]].cloneNode(true);\n        } else {\n          element = elements[slots[i]];\n        }\n        element.setAttribute(\"slot\", slots[i]);\n        dom(this).appendChild(element);\n      }\n    }\n    // minor delay to help the above happen prior to opening\n    setTimeout(() => {\n      this.opened = true;\n      this._resizeContent();\n    }, 100);\n  }\n  /**\n   * check state and if we should clean up on close.\n   * This keeps the DOM tiddy and allows animation to happen gracefully.\n   */\n  animationEnded(e) {\n    // wipe the slot of our modal\n    this.title = \"\";\n    while (dom(this).firstChild !== null) {\n      dom(this).removeChild(dom(this).firstChild);\n    }\n    if (this.invokedBy) {\n      async.microTask.run(() => {\n        setTimeout(() => {\n          this.invokedBy.focus();\n        }, 500);\n      });\n    }\n  }\n  /**\n   * Close the modal and do some clean up\n   */\n  close() {\n    this.$.dialog.close();\n  }\n  // Observer opened for changes\n  _openedChanged(newValue, oldValue) {\n    if (typeof newValue !== typeof undefined && !newValue) {\n      this.animationEnded();\n      const evt = new CustomEvent(\"simple-modal-closed\", {\n        bubbles: true,\n        cancelable: true,\n        detail: {\n          opened: false,\n          invokedBy: this.invokedBy\n        }\n      });\n      this.dispatchEvent(evt);\n    } else if (newValue) {\n      const evt = new CustomEvent(\"simple-modal-opened\", {\n        bubbles: true,\n        cancelable: true,\n        detail: {\n          opened: true,\n          invokedBy: this.invokedBy\n        }\n      });\n      this.dispatchEvent(evt);\n    }\n  }\n  /**\n   * If there is a title, aria-labelledby should point to #simple-modal-title\n   */\n  _getAriaLabelledby(title) {\n    return !title ? null : \"simple-modal-title\";\n  }\n  /**\n   * If there is no title, supply a generic aria-label\n   */\n  _getAriaLabel(title) {\n    return !title ? \"Modal Dialog\" : null;\n  }\n  _ironOverlayClosed(e) {\n    console.log(\"i got here..\");\n    e.preventDefault();\n    e.stopPropagation();\n  }\n  /**\n   * life cycle, element is removed from the DOM\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\"simple-modal-hide\", this.close.bind(this));\n    window.removeEventListener(\"simple-modal-show\", this.showEvent.bind(this));\n    this.shadowRoot\n      .querySelector(\"#simple-modal-content\")\n      .removeEventListener(\n        \"neon-animation-finish\",\n        this._ironOverlayClosed.bind(this)\n      );\n  }\n}\nwindow.customElements.define(SimpleModal.tag, SimpleModal);\nexport { SimpleModal };\n"],"names":["window","SimpleModal","requestAvailability","instance","document","createElement","body","appendChild","PolymerElement","html","String","Boolean","Object","addEventListener","this","close","bind","showEvent","shadowRoot","querySelector","_ironOverlayClosed","e","async","run","dispatchEvent","Event","opened","dom","firstChild","removeChild","setTimeout","_this","show","detail","title","elements","invokedBy","clone","element","set","slots","i","cloneNode","setAttribute","_this2","_resizeContent","_this3","focus","$","dialog","newValue","oldValue","_typeof","evt","CustomEvent","bubbles","cancelable","animationEnded","console","log","preventDefault","stopPropagation","removeEventListener","customElements","define","tag"],"mappings":"6uLAeAA,OAAOC,YAAcD,OAAOC,aAAe,GAI3CD,OAAOC,YAAYC,oBAAsB,kBAClCF,OAAOC,YAAYE,WACtBH,OAAOC,YAAYE,SAAWC,SAASC,cAAc,gBACrDD,SAASE,KAAKC,YAAYP,OAAOC,YAAYE,WAExCH,OAAOC,YAAYE,cA2BtBF,gaAAoBO,+DAIfC,qDAkIA,OAIA,MACC,aACAC,aACC,WAKD,MACA,cACAC,eACC,sBACa,WACV,6BAKA,MACJ,kBACAD,aACC,mBAKE,MACH,iBACAA,aACC,mBAKE,MACH,iBACAE,2CAWD,sHAOPZ,OAAOa,iBAAiB,oBAAqBC,KAAKC,MAAMC,KAAKF,OAC7Dd,OAAOa,iBAAiB,oBAAqBC,KAAKG,UAAUD,KAAKF,YAC5DI,WACFC,cAAc,yBACdN,iBACC,wBACAC,KAAKM,mBAAmBJ,KAAKF,8CAMpBO,GAEbC,YAAgBC,IAAI,WAClBvB,OAAOwB,cAAc,IAAIC,MAAM,+CAMzBJ,iBAGJP,KAAKY,OAAQ,MAEiB,OAAzBC,MAAIb,MAAMc,YACfD,MAAIb,MAAMe,YAAYF,MAAIb,MAAMc,YAElCE,WAAW,WACTC,EAAKC,KACHX,EAAEY,OAAOC,MACTb,EAAEY,OAAOE,SACTd,EAAEY,OAAOG,UACTf,EAAEY,OAAOI,QAEV,eAEEL,KACHX,EAAEY,OAAOC,MACTb,EAAEY,OAAOE,SACTd,EAAEY,OAAOG,UACTf,EAAEY,OAAOI,oCAOVH,EAAOC,EAAUC,OAGhBE,SAH2BD,+DAC1BE,IAAI,YAAaH,QACjBF,MAAQA,MAITM,EAAQ,CAAC,SAAU,UAAW,eAC7B,IAAIC,KAAKD,EACRL,EAASK,EAAMC,OAEfH,EADED,EACQF,EAASK,EAAMC,IAAIC,WAAU,GAE7BP,EAASK,EAAMC,KAEnBE,aAAa,OAAQH,EAAMC,IACnCd,MAAIb,MAAMP,YAAY+B,IAI1BR,WAAW,WACTc,EAAKlB,QAAS,EACdkB,EAAKC,kBACJ,4CAMUxB,uBAERa,MAAQ,GACmB,OAAzBP,MAAIb,MAAMc,YACfD,MAAIb,MAAMe,YAAYF,MAAIb,MAAMc,YAE9Bd,KAAKsB,WACPd,YAAgBC,IAAI,WAClBO,WAAW,WACTgB,EAAKV,UAAUW,SACd,4CAQFC,EAAEC,OAAOlC,+CAGDmC,EAAUC,oBACnBC,EAAOF,IAAkCA,GAWtC,GAAIA,EAAU,KACbG,EAAM,IAAIC,YAAY,sBAAuB,CACjDC,SAAS,EACTC,YAAY,EACZvB,OAAQ,CACNP,QAAQ,EACRU,UAAWtB,KAAKsB,kBAGfZ,cAAc6B,QApBkC,MAChDI,qBACCJ,EAAM,IAAIC,YAAY,sBAAuB,CACjDC,SAAS,EACTC,YAAY,EACZvB,OAAQ,CACNP,QAAQ,EACRU,UAAWtB,KAAKsB,kBAGfZ,cAAc6B,+CAgBJnB,UACTA,EAAe,qBAAP,2CAKJA,UACJA,EAAyB,KAAjB,0DAECb,GACjBqC,QAAQC,IAAI,gBACZtC,EAAEuC,iBACFvC,EAAEwC,0HAOF7D,OAAO8D,oBAAoB,oBAAqBhD,KAAKC,MAAMC,KAAKF,OAChEd,OAAO8D,oBAAoB,oBAAqBhD,KAAKG,UAAUD,KAAKF,YAC/DI,WACFC,cAAc,yBACd2C,oBACC,wBACAhD,KAAKM,mBAAmBJ,KAAKF,4CAIrCd,OAAO+D,eAAeC,OAAO/D,EAAYgE,IAAKhE"}