{"version":3,"file":"moment-element.umd.js","sources":["moment-element.umd.js"],"sourcesContent":["import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { pathFromUrl } from \"@polymer/polymer/lib/utils/resolve-url.js\";\nimport \"@lrnwebcomponents/es-global-bridge/es-global-bridge.js\";\n/**\n * @license\n * Copyright (c) 2016 Abdón Rodríguez Davila (@abdonrd). All rights reserved.\n * This code may only be used under the MIT style license found at https://abdonrd.github.io/LICENSE.txt\n */\n/**\nPolymer element wrapper for the [moment](https://github.com/moment/moment) library.\n\nExamples:\n\n    <moment-element></moment-element>\n    <moment-element datetime=\"1991-12-31\" output-format=\"MMM DD[,] YYYY\"></moment-element>\n\n* @demo demo/index.html\n*/\nlet MomentElement = Polymer({\n  _template: html`\n    [[output]]\n  `,\n\n  is: \"moment-element\",\n\n  properties: {\n    /**\n     * The input datetime. If don't set the datetime, the datetime will be now.\n     * For consistent results, parsing anything other than ISO 8601 strings\n     * with the `inputFormat` property. More information in [moment String](http://momentjs.com/docs/#/parsing/string/).\n     */\n    datetime: {\n      type: String,\n      value: function() {\n        return new Date();\n      }\n    },\n\n    /**\n     * The datetime input format. An string using the\n     * [moment String + Format](http://momentjs.com/docs/#/parsing/string-format/).\n     */\n    inputFormat: {\n      type: String,\n      value: \"\"\n    },\n\n    /**\n     * The datetime output format. Options are 'now' or datetime using the\n     * [moment Format](http://momentjs.com/docs/#/displaying/format/).\n     */\n    outputFormat: {\n      type: String,\n      value: \"\"\n    },\n\n    /**\n     * Relative time using [momen time from now](http://momentjs.com/docs/#/displaying/fromnow/)\n     * or [momen Time from datetime](http://momentjs.com/docs/#/displaying/from/).\n     */\n    from: {\n      type: String,\n      value: \"\"\n    },\n\n    /**\n     * Relative time using [momen Time to now](http://momentjs.com/docs/#/displaying/tonow/)\n     * or [momen Time to datetime](http://momentjs.com/docs/#/displaying/to/).\n     */\n    to: {\n      type: String,\n      value: \"\"\n    },\n\n    /**\n     * The output datetime.\n     */\n    output: {\n      type: String,\n      notify: true\n    },\n    /**\n     * library loaded\n     */\n    libraryLoaded: {\n      type: Boolean\n    }\n  },\n\n  observers: [\n    \"_computeOutput(datetime, inputFormat, outputFormat, from, to, libraryLoaded)\"\n  ],\n  created: function() {\n    const name = \"moment\";\n    const basePath = pathFromUrl(decodeURIComponent(import.meta.url));\n    const location = `${basePath}lib/moment/moment.js`;\n    window.addEventListener(\n      `es-bridge-${name}-loaded`,\n      this._momentLoaded.bind(this)\n    );\n    window.ESGlobalBridge.requestAvailability();\n    window.ESGlobalBridge.instance.load(name, location);\n  },\n  _momentLoaded: function() {\n    this.libraryLoaded = true;\n  },\n  /**\n   * Recomputes the output\n   */\n  update: function() {\n    this._computeOutput(\n      this.datetime,\n      this.inputFormat,\n      this.outputFormat,\n      this.from,\n      this.to,\n      this.libraryLoaded\n    );\n  },\n\n  _computeOutput: function(\n    datetime,\n    inputFormat,\n    outputFormat,\n    from,\n    to,\n    libraryLoaded\n  ) {\n    if (libraryLoaded) {\n      var output = inputFormat\n        ? moment(datetime, inputFormat)\n        : moment(datetime);\n      if (outputFormat) {\n        output = output.format(outputFormat);\n      } else if (from) {\n        output = from === \"now\" ? output.fromNow() : output.from(moment(from));\n      } else if (to) {\n        output = to === \"now\" ? output.toNow() : output.to(moment(to));\n      }\n      this.set(\"output\", output);\n    }\n  }\n});\nexport { MomentElement };\n"],"names":["MomentElement","Polymer","_template","html","is","properties","datetime","type","String","value","Date","inputFormat","outputFormat","from","to","output","notify","libraryLoaded","Boolean","observers","created","basePath","pathFromUrl","decodeURIComponent","location","window","addEventListener","this","_momentLoaded","bind","ESGlobalBridge","requestAvailability","instance","load","update","_computeOutput","moment","format","fromNow","toNow","set"],"mappings":"mtBAkBIA,EAAgBC,UAAQ,CAC1BC,UAAWC,YAIXC,GAAI,iBAEJC,WAAY,CAMVC,SAAU,CACRC,KAAMC,OACNC,MAAO,kBACE,IAAIC,OAQfC,YAAa,CACXJ,KAAMC,OACNC,MAAO,IAOTG,aAAc,CACZL,KAAMC,OACNC,MAAO,IAOTI,KAAM,CACJN,KAAMC,OACNC,MAAO,IAOTK,GAAI,CACFP,KAAMC,OACNC,MAAO,IAMTM,OAAQ,CACNR,KAAMC,OACNQ,QAAQ,GAKVC,cAAe,CACbV,KAAMW,UAIVC,UAAW,CACT,gFAEFC,QAAS,eAEDC,EAAWC,cAAYC,oMACvBC,YAAcH,0BACpBI,OAAOC,qCAHM,oBAKXC,KAAKC,cAAcC,KAAKF,OAE1BF,OAAOK,eAAeC,sBACtBN,OAAOK,eAAeE,SAASC,KARlB,SAQ6BT,IAE5CI,cAAe,gBACRX,eAAgB,GAKvBiB,OAAQ,gBACDC,eACHR,KAAKrB,SACLqB,KAAKhB,YACLgB,KAAKf,aACLe,KAAKd,KACLc,KAAKb,GACLa,KAAKV,gBAITkB,eAAgB,SACd7B,EACAK,EACAC,EACAC,EACAC,EACAG,MAEIA,EAAe,KACbF,EAASJ,EACTyB,OAAO9B,EAAUK,GACjByB,OAAO9B,GACPM,EACFG,EAASA,EAAOsB,OAAOzB,GACdC,EACTE,EAAkB,QAATF,EAAiBE,EAAOuB,UAAYvB,EAAOF,KAAKuB,OAAOvB,IACvDC,IACTC,EAAgB,QAAPD,EAAeC,EAAOwB,QAAUxB,EAAOD,GAAGsB,OAAOtB,UAEvD0B,IAAI,SAAUzB"}