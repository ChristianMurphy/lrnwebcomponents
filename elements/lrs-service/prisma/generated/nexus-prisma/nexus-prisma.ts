/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Statement: StatementObject
      Actor: ActorObject
      Verb: VerbObject
      Object: ObjectObject
      Result: ResultObject
      ResultScore: ResultScoreObject
      StatementConnection: StatementConnectionObject
      PageInfo: PageInfoObject
      StatementEdge: StatementEdgeObject
      AggregateStatement: AggregateStatementObject
      ActorConnection: ActorConnectionObject
      ActorEdge: ActorEdgeObject
      AggregateActor: AggregateActorObject
      VerbConnection: VerbConnectionObject
      VerbEdge: VerbEdgeObject
      AggregateVerb: AggregateVerbObject
      ObjectConnection: ObjectConnectionObject
      ObjectEdge: ObjectEdgeObject
      AggregateObject: AggregateObjectObject
      ResultConnection: ResultConnectionObject
      ResultEdge: ResultEdgeObject
      AggregateResult: AggregateResultObject
      ResultScoreConnection: ResultScoreConnectionObject
      ResultScoreEdge: ResultScoreEdgeObject
      AggregateResultScore: AggregateResultScoreObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      StatementSubscriptionPayload: StatementSubscriptionPayloadObject
      StatementPreviousValues: StatementPreviousValuesObject
      ActorSubscriptionPayload: ActorSubscriptionPayloadObject
      ActorPreviousValues: ActorPreviousValuesObject
      VerbSubscriptionPayload: VerbSubscriptionPayloadObject
      VerbPreviousValues: VerbPreviousValuesObject
      ObjectSubscriptionPayload: ObjectSubscriptionPayloadObject
      ObjectPreviousValues: ObjectPreviousValuesObject
      ResultSubscriptionPayload: ResultSubscriptionPayloadObject
      ResultPreviousValues: ResultPreviousValuesObject
      ResultScoreSubscriptionPayload: ResultScoreSubscriptionPayloadObject
      ResultScorePreviousValues: ResultScorePreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Statement: StatementFieldDetails
      Actor: ActorFieldDetails
      Verb: VerbFieldDetails
      Object: ObjectFieldDetails
      Result: ResultFieldDetails
      ResultScore: ResultScoreFieldDetails
      StatementConnection: StatementConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      StatementEdge: StatementEdgeFieldDetails
      AggregateStatement: AggregateStatementFieldDetails
      ActorConnection: ActorConnectionFieldDetails
      ActorEdge: ActorEdgeFieldDetails
      AggregateActor: AggregateActorFieldDetails
      VerbConnection: VerbConnectionFieldDetails
      VerbEdge: VerbEdgeFieldDetails
      AggregateVerb: AggregateVerbFieldDetails
      ObjectConnection: ObjectConnectionFieldDetails
      ObjectEdge: ObjectEdgeFieldDetails
      AggregateObject: AggregateObjectFieldDetails
      ResultConnection: ResultConnectionFieldDetails
      ResultEdge: ResultEdgeFieldDetails
      AggregateResult: AggregateResultFieldDetails
      ResultScoreConnection: ResultScoreConnectionFieldDetails
      ResultScoreEdge: ResultScoreEdgeFieldDetails
      AggregateResultScore: AggregateResultScoreFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      StatementSubscriptionPayload: StatementSubscriptionPayloadFieldDetails
      StatementPreviousValues: StatementPreviousValuesFieldDetails
      ActorSubscriptionPayload: ActorSubscriptionPayloadFieldDetails
      ActorPreviousValues: ActorPreviousValuesFieldDetails
      VerbSubscriptionPayload: VerbSubscriptionPayloadFieldDetails
      VerbPreviousValues: VerbPreviousValuesFieldDetails
      ObjectSubscriptionPayload: ObjectSubscriptionPayloadFieldDetails
      ObjectPreviousValues: ObjectPreviousValuesFieldDetails
      ResultSubscriptionPayload: ResultSubscriptionPayloadFieldDetails
      ResultPreviousValues: ResultPreviousValuesFieldDetails
      ResultScoreSubscriptionPayload: ResultScoreSubscriptionPayloadFieldDetails
      ResultScorePreviousValues: ResultScorePreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      StatementWhereUniqueInput: StatementWhereUniqueInputInputObject
      StatementWhereInput: StatementWhereInputInputObject
      ActorWhereInput: ActorWhereInputInputObject
      VerbWhereInput: VerbWhereInputInputObject
      ObjectWhereInput: ObjectWhereInputInputObject
      ResultWhereInput: ResultWhereInputInputObject
      ResultScoreWhereInput: ResultScoreWhereInputInputObject
      ActorWhereUniqueInput: ActorWhereUniqueInputInputObject
      VerbWhereUniqueInput: VerbWhereUniqueInputInputObject
      ObjectWhereUniqueInput: ObjectWhereUniqueInputInputObject
      StatementCreateInput: StatementCreateInputInputObject
      ActorCreateOneInput: ActorCreateOneInputInputObject
      ActorCreateInput: ActorCreateInputInputObject
      VerbCreateOneInput: VerbCreateOneInputInputObject
      VerbCreateInput: VerbCreateInputInputObject
      ObjectCreateOneInput: ObjectCreateOneInputInputObject
      ObjectCreateInput: ObjectCreateInputInputObject
      ResultCreateOneInput: ResultCreateOneInputInputObject
      ResultCreateInput: ResultCreateInputInputObject
      ResultScoreCreateOneInput: ResultScoreCreateOneInputInputObject
      ResultScoreCreateInput: ResultScoreCreateInputInputObject
      StatementUpdateInput: StatementUpdateInputInputObject
      ActorUpdateOneInput: ActorUpdateOneInputInputObject
      ActorUpdateDataInput: ActorUpdateDataInputInputObject
      ActorUpsertNestedInput: ActorUpsertNestedInputInputObject
      VerbUpdateOneInput: VerbUpdateOneInputInputObject
      VerbUpdateDataInput: VerbUpdateDataInputInputObject
      VerbUpsertNestedInput: VerbUpsertNestedInputInputObject
      ObjectUpdateOneInput: ObjectUpdateOneInputInputObject
      ObjectUpdateDataInput: ObjectUpdateDataInputInputObject
      ObjectUpsertNestedInput: ObjectUpsertNestedInputInputObject
      ResultUpdateOneInput: ResultUpdateOneInputInputObject
      ResultUpdateDataInput: ResultUpdateDataInputInputObject
      ResultScoreUpdateOneInput: ResultScoreUpdateOneInputInputObject
      ResultScoreUpdateDataInput: ResultScoreUpdateDataInputInputObject
      ResultScoreUpsertNestedInput: ResultScoreUpsertNestedInputInputObject
      ResultUpsertNestedInput: ResultUpsertNestedInputInputObject
      StatementUpdateManyMutationInput: StatementUpdateManyMutationInputInputObject
      ActorUpdateInput: ActorUpdateInputInputObject
      ActorUpdateManyMutationInput: ActorUpdateManyMutationInputInputObject
      VerbUpdateInput: VerbUpdateInputInputObject
      VerbUpdateManyMutationInput: VerbUpdateManyMutationInputInputObject
      ObjectUpdateInput: ObjectUpdateInputInputObject
      ObjectUpdateManyMutationInput: ObjectUpdateManyMutationInputInputObject
      ResultUpdateManyMutationInput: ResultUpdateManyMutationInputInputObject
      ResultScoreUpdateManyMutationInput: ResultScoreUpdateManyMutationInputInputObject
      StatementSubscriptionWhereInput: StatementSubscriptionWhereInputInputObject
      ActorSubscriptionWhereInput: ActorSubscriptionWhereInputInputObject
      VerbSubscriptionWhereInput: VerbSubscriptionWhereInputInputObject
      ObjectSubscriptionWhereInput: ObjectSubscriptionWhereInputInputObject
      ResultSubscriptionWhereInput: ResultSubscriptionWhereInputInputObject
      ResultScoreSubscriptionWhereInput: ResultScoreSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    StatementOrderByInput: StatementOrderByInputValues,
    ActorOrderByInput: ActorOrderByInputValues,
    VerbOrderByInput: VerbOrderByInputValues,
    ObjectOrderByInput: ObjectOrderByInputValues,
    ResultOrderByInput: ResultOrderByInputValues,
    ResultScoreOrderByInput: ResultScoreOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'statement', args?: QueryStatementArgs[] | false, alias?: string  } 
  | { name: 'statements', args?: QueryStatementsArgs[] | false, alias?: string  } 
  | { name: 'statementsConnection', args?: QueryStatementsConnectionArgs[] | false, alias?: string  } 
  | { name: 'actor', args?: QueryActorArgs[] | false, alias?: string  } 
  | { name: 'actors', args?: QueryActorsArgs[] | false, alias?: string  } 
  | { name: 'actorsConnection', args?: QueryActorsConnectionArgs[] | false, alias?: string  } 
  | { name: 'verb', args?: QueryVerbArgs[] | false, alias?: string  } 
  | { name: 'verbs', args?: QueryVerbsArgs[] | false, alias?: string  } 
  | { name: 'verbsConnection', args?: QueryVerbsConnectionArgs[] | false, alias?: string  } 
  | { name: 'object', args?: QueryObjectArgs[] | false, alias?: string  } 
  | { name: 'objects', args?: QueryObjectsArgs[] | false, alias?: string  } 
  | { name: 'objectsConnection', args?: QueryObjectsConnectionArgs[] | false, alias?: string  } 
  | { name: 'results', args?: QueryResultsArgs[] | false, alias?: string  } 
  | { name: 'resultsConnection', args?: QueryResultsConnectionArgs[] | false, alias?: string  } 
  | { name: 'resultScores', args?: QueryResultScoresArgs[] | false, alias?: string  } 
  | { name: 'resultScoresConnection', args?: QueryResultScoresConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'statement'
  | 'statements'
  | 'statementsConnection'
  | 'actor'
  | 'actors'
  | 'actorsConnection'
  | 'verb'
  | 'verbs'
  | 'verbsConnection'
  | 'object'
  | 'objects'
  | 'objectsConnection'
  | 'results'
  | 'resultsConnection'
  | 'resultScores'
  | 'resultScoresConnection'


type QueryStatementArgs =
  | 'where'
type QueryStatementsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryStatementsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryActorArgs =
  | 'where'
type QueryActorsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryActorsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryVerbArgs =
  | 'where'
type QueryVerbsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryVerbsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryObjectArgs =
  | 'where'
type QueryObjectsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryObjectsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryResultsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryResultsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryResultScoresArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryResultScoresConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  statement: {
    type: 'Statement'
    args: Record<QueryStatementArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: StatementWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Statement | null> | prisma.Statement | null
  }
  statements: {
    type: 'Statement'
    args: Record<QueryStatementsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: StatementWhereInput | null, orderBy?: prisma.StatementOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Statement[]> | prisma.Statement[]
  }
  statementsConnection: {
    type: 'StatementConnection'
    args: Record<QueryStatementsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: StatementWhereInput | null, orderBy?: prisma.StatementOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StatementConnection> | prisma.StatementConnection
  }
  actor: {
    type: 'Actor'
    args: Record<QueryActorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ActorWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Actor | null> | prisma.Actor | null
  }
  actors: {
    type: 'Actor'
    args: Record<QueryActorsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ActorWhereInput | null, orderBy?: prisma.ActorOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Actor[]> | prisma.Actor[]
  }
  actorsConnection: {
    type: 'ActorConnection'
    args: Record<QueryActorsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ActorWhereInput | null, orderBy?: prisma.ActorOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActorConnection> | prisma.ActorConnection
  }
  verb: {
    type: 'Verb'
    args: Record<QueryVerbArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: VerbWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Verb | null> | prisma.Verb | null
  }
  verbs: {
    type: 'Verb'
    args: Record<QueryVerbsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: VerbWhereInput | null, orderBy?: prisma.VerbOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Verb[]> | prisma.Verb[]
  }
  verbsConnection: {
    type: 'VerbConnection'
    args: Record<QueryVerbsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: VerbWhereInput | null, orderBy?: prisma.VerbOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VerbConnection> | prisma.VerbConnection
  }
  object: {
    type: 'Object'
    args: Record<QueryObjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ObjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Object | null> | prisma.Object | null
  }
  objects: {
    type: 'Object'
    args: Record<QueryObjectsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ObjectWhereInput | null, orderBy?: prisma.ObjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Object[]> | prisma.Object[]
  }
  objectsConnection: {
    type: 'ObjectConnection'
    args: Record<QueryObjectsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ObjectWhereInput | null, orderBy?: prisma.ObjectOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ObjectConnection> | prisma.ObjectConnection
  }
  results: {
    type: 'Result'
    args: Record<QueryResultsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ResultWhereInput | null, orderBy?: prisma.ResultOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Result[]> | prisma.Result[]
  }
  resultsConnection: {
    type: 'ResultConnection'
    args: Record<QueryResultsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ResultWhereInput | null, orderBy?: prisma.ResultOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResultConnection> | prisma.ResultConnection
  }
  resultScores: {
    type: 'ResultScore'
    args: Record<QueryResultScoresArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ResultScoreWhereInput | null, orderBy?: prisma.ResultScoreOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResultScore[]> | prisma.ResultScore[]
  }
  resultScoresConnection: {
    type: 'ResultScoreConnection'
    args: Record<QueryResultScoresConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ResultScoreWhereInput | null, orderBy?: prisma.ResultScoreOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResultScoreConnection> | prisma.ResultScoreConnection
  }
}
  

// Types for Statement

type StatementObject =
  | StatementFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'actor', args?: [] | false, alias?: string  } 
  | { name: 'verb', args?: [] | false, alias?: string  } 
  | { name: 'object', args?: [] | false, alias?: string  } 
  | { name: 'result', args?: [] | false, alias?: string  } 
  | { name: 'extensions', args?: [] | false, alias?: string  } 

type StatementFields =
  | 'id'
  | 'actor'
  | 'verb'
  | 'object'
  | 'result'
  | 'extensions'



  

export interface StatementFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  actor: {
    type: 'Actor'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Statement">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Actor | null> | prisma.Actor | null
  }
  verb: {
    type: 'Verb'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Statement">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Verb | null> | prisma.Verb | null
  }
  object: {
    type: 'Object'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Statement">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Object | null> | prisma.Object | null
  }
  result: {
    type: 'Result'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Statement">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Result | null> | prisma.Result | null
  }
  extensions: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Actor

type ActorObject =
  | ActorFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'mbox', args?: [] | false, alias?: string  } 

type ActorFields =
  | 'id'
  | 'name'
  | 'mbox'



  

export interface ActorFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  mbox: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Verb

type VerbObject =
  | VerbFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: 'display', args?: [] | false, alias?: string  } 

type VerbFields =
  | 'id'
  | '_id'
  | 'display'



  

export interface VerbFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _id: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  display: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Object

type ObjectObject =
  | ObjectFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: 'definition', args?: [] | false, alias?: string  } 

type ObjectFields =
  | 'id'
  | '_id'
  | 'definition'



  

export interface ObjectFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _id: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  definition: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Result

type ResultObject =
  | ResultFields
  | { name: 'completion', args?: [] | false, alias?: string  } 
  | { name: 'success', args?: [] | false, alias?: string  } 
  | { name: 'score', args?: [] | false, alias?: string  } 

type ResultFields =
  | 'completion'
  | 'success'
  | 'score'



  

export interface ResultFieldDetails {
  completion: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  success: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  score: {
    type: 'ResultScore'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Result">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResultScore | null> | prisma.ResultScore | null
  }
}
  

// Types for ResultScore

type ResultScoreObject =
  | ResultScoreFields
  | { name: 'scaled', args?: [] | false, alias?: string  } 

type ResultScoreFields =
  | 'scaled'



  

export interface ResultScoreFieldDetails {
  scaled: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for StatementConnection

type StatementConnectionObject =
  | StatementConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type StatementConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface StatementConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StatementConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'StatementEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"StatementConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StatementEdge[]> | prisma.StatementEdge[]
  }
  aggregate: {
    type: 'AggregateStatement'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StatementConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateStatement> | prisma.AggregateStatement
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for StatementEdge

type StatementEdgeObject =
  | StatementEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type StatementEdgeFields =
  | 'node'
  | 'cursor'



  

export interface StatementEdgeFieldDetails {
  node: {
    type: 'Statement'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StatementEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Statement> | prisma.Statement
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateStatement

type AggregateStatementObject =
  | AggregateStatementFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateStatementFields =
  | 'count'



  

export interface AggregateStatementFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ActorConnection

type ActorConnectionObject =
  | ActorConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ActorConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ActorConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActorConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ActorEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ActorConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActorEdge[]> | prisma.ActorEdge[]
  }
  aggregate: {
    type: 'AggregateActor'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActorConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateActor> | prisma.AggregateActor
  }
}
  

// Types for ActorEdge

type ActorEdgeObject =
  | ActorEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ActorEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ActorEdgeFieldDetails {
  node: {
    type: 'Actor'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActorEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Actor> | prisma.Actor
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateActor

type AggregateActorObject =
  | AggregateActorFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateActorFields =
  | 'count'



  

export interface AggregateActorFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for VerbConnection

type VerbConnectionObject =
  | VerbConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type VerbConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface VerbConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VerbConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'VerbEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"VerbConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VerbEdge[]> | prisma.VerbEdge[]
  }
  aggregate: {
    type: 'AggregateVerb'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VerbConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateVerb> | prisma.AggregateVerb
  }
}
  

// Types for VerbEdge

type VerbEdgeObject =
  | VerbEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type VerbEdgeFields =
  | 'node'
  | 'cursor'



  

export interface VerbEdgeFieldDetails {
  node: {
    type: 'Verb'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VerbEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Verb> | prisma.Verb
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateVerb

type AggregateVerbObject =
  | AggregateVerbFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateVerbFields =
  | 'count'



  

export interface AggregateVerbFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ObjectConnection

type ObjectConnectionObject =
  | ObjectConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ObjectConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ObjectConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ObjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ObjectEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ObjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ObjectEdge[]> | prisma.ObjectEdge[]
  }
  aggregate: {
    type: 'AggregateObject'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ObjectConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateObject> | prisma.AggregateObject
  }
}
  

// Types for ObjectEdge

type ObjectEdgeObject =
  | ObjectEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ObjectEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ObjectEdgeFieldDetails {
  node: {
    type: 'Object'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ObjectEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Object> | prisma.Object
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateObject

type AggregateObjectObject =
  | AggregateObjectFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateObjectFields =
  | 'count'



  

export interface AggregateObjectFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ResultConnection

type ResultConnectionObject =
  | ResultConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ResultConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ResultConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ResultConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ResultEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ResultConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResultEdge[]> | prisma.ResultEdge[]
  }
  aggregate: {
    type: 'AggregateResult'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ResultConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateResult> | prisma.AggregateResult
  }
}
  

// Types for ResultEdge

type ResultEdgeObject =
  | ResultEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ResultEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ResultEdgeFieldDetails {
  node: {
    type: 'Result'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ResultEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Result> | prisma.Result
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateResult

type AggregateResultObject =
  | AggregateResultFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateResultFields =
  | 'count'



  

export interface AggregateResultFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ResultScoreConnection

type ResultScoreConnectionObject =
  | ResultScoreConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ResultScoreConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ResultScoreConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ResultScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ResultScoreEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ResultScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResultScoreEdge[]> | prisma.ResultScoreEdge[]
  }
  aggregate: {
    type: 'AggregateResultScore'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ResultScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateResultScore> | prisma.AggregateResultScore
  }
}
  

// Types for ResultScoreEdge

type ResultScoreEdgeObject =
  | ResultScoreEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ResultScoreEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ResultScoreEdgeFieldDetails {
  node: {
    type: 'ResultScore'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ResultScoreEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResultScore> | prisma.ResultScore
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateResultScore

type AggregateResultScoreObject =
  | AggregateResultScoreFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateResultScoreFields =
  | 'count'



  

export interface AggregateResultScoreFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createStatement', args?: MutationCreateStatementArgs[] | false, alias?: string  } 
  | { name: 'updateStatement', args?: MutationUpdateStatementArgs[] | false, alias?: string  } 
  | { name: 'updateManyStatements', args?: MutationUpdateManyStatementsArgs[] | false, alias?: string  } 
  | { name: 'upsertStatement', args?: MutationUpsertStatementArgs[] | false, alias?: string  } 
  | { name: 'deleteStatement', args?: MutationDeleteStatementArgs[] | false, alias?: string  } 
  | { name: 'deleteManyStatements', args?: MutationDeleteManyStatementsArgs[] | false, alias?: string  } 
  | { name: 'createActor', args?: MutationCreateActorArgs[] | false, alias?: string  } 
  | { name: 'updateActor', args?: MutationUpdateActorArgs[] | false, alias?: string  } 
  | { name: 'updateManyActors', args?: MutationUpdateManyActorsArgs[] | false, alias?: string  } 
  | { name: 'upsertActor', args?: MutationUpsertActorArgs[] | false, alias?: string  } 
  | { name: 'deleteActor', args?: MutationDeleteActorArgs[] | false, alias?: string  } 
  | { name: 'deleteManyActors', args?: MutationDeleteManyActorsArgs[] | false, alias?: string  } 
  | { name: 'createVerb', args?: MutationCreateVerbArgs[] | false, alias?: string  } 
  | { name: 'updateVerb', args?: MutationUpdateVerbArgs[] | false, alias?: string  } 
  | { name: 'updateManyVerbs', args?: MutationUpdateManyVerbsArgs[] | false, alias?: string  } 
  | { name: 'upsertVerb', args?: MutationUpsertVerbArgs[] | false, alias?: string  } 
  | { name: 'deleteVerb', args?: MutationDeleteVerbArgs[] | false, alias?: string  } 
  | { name: 'deleteManyVerbs', args?: MutationDeleteManyVerbsArgs[] | false, alias?: string  } 
  | { name: 'createObject', args?: MutationCreateObjectArgs[] | false, alias?: string  } 
  | { name: 'updateObject', args?: MutationUpdateObjectArgs[] | false, alias?: string  } 
  | { name: 'updateManyObjects', args?: MutationUpdateManyObjectsArgs[] | false, alias?: string  } 
  | { name: 'upsertObject', args?: MutationUpsertObjectArgs[] | false, alias?: string  } 
  | { name: 'deleteObject', args?: MutationDeleteObjectArgs[] | false, alias?: string  } 
  | { name: 'deleteManyObjects', args?: MutationDeleteManyObjectsArgs[] | false, alias?: string  } 
  | { name: 'createResult', args?: MutationCreateResultArgs[] | false, alias?: string  } 
  | { name: 'updateManyResults', args?: MutationUpdateManyResultsArgs[] | false, alias?: string  } 
  | { name: 'deleteManyResults', args?: MutationDeleteManyResultsArgs[] | false, alias?: string  } 
  | { name: 'createResultScore', args?: MutationCreateResultScoreArgs[] | false, alias?: string  } 
  | { name: 'updateManyResultScores', args?: MutationUpdateManyResultScoresArgs[] | false, alias?: string  } 
  | { name: 'deleteManyResultScores', args?: MutationDeleteManyResultScoresArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createStatement'
  | 'updateStatement'
  | 'updateManyStatements'
  | 'upsertStatement'
  | 'deleteStatement'
  | 'deleteManyStatements'
  | 'createActor'
  | 'updateActor'
  | 'updateManyActors'
  | 'upsertActor'
  | 'deleteActor'
  | 'deleteManyActors'
  | 'createVerb'
  | 'updateVerb'
  | 'updateManyVerbs'
  | 'upsertVerb'
  | 'deleteVerb'
  | 'deleteManyVerbs'
  | 'createObject'
  | 'updateObject'
  | 'updateManyObjects'
  | 'upsertObject'
  | 'deleteObject'
  | 'deleteManyObjects'
  | 'createResult'
  | 'updateManyResults'
  | 'deleteManyResults'
  | 'createResultScore'
  | 'updateManyResultScores'
  | 'deleteManyResultScores'


type MutationCreateStatementArgs =
  | 'data'
type MutationUpdateStatementArgs =
  | 'data'
  | 'where'
type MutationUpdateManyStatementsArgs =
  | 'data'
  | 'where'
type MutationUpsertStatementArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteStatementArgs =
  | 'where'
type MutationDeleteManyStatementsArgs =
  | 'where'
type MutationCreateActorArgs =
  | 'data'
type MutationUpdateActorArgs =
  | 'data'
  | 'where'
type MutationUpdateManyActorsArgs =
  | 'data'
  | 'where'
type MutationUpsertActorArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteActorArgs =
  | 'where'
type MutationDeleteManyActorsArgs =
  | 'where'
type MutationCreateVerbArgs =
  | 'data'
type MutationUpdateVerbArgs =
  | 'data'
  | 'where'
type MutationUpdateManyVerbsArgs =
  | 'data'
  | 'where'
type MutationUpsertVerbArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteVerbArgs =
  | 'where'
type MutationDeleteManyVerbsArgs =
  | 'where'
type MutationCreateObjectArgs =
  | 'data'
type MutationUpdateObjectArgs =
  | 'data'
  | 'where'
type MutationUpdateManyObjectsArgs =
  | 'data'
  | 'where'
type MutationUpsertObjectArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteObjectArgs =
  | 'where'
type MutationDeleteManyObjectsArgs =
  | 'where'
type MutationCreateResultArgs =
  | 'data'
type MutationUpdateManyResultsArgs =
  | 'data'
  | 'where'
type MutationDeleteManyResultsArgs =
  | 'where'
type MutationCreateResultScoreArgs =
  | 'data'
type MutationUpdateManyResultScoresArgs =
  | 'data'
  | 'where'
type MutationDeleteManyResultScoresArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createStatement: {
    type: 'Statement'
    args: Record<MutationCreateStatementArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: StatementCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Statement> | prisma.Statement
  }
  updateStatement: {
    type: 'Statement'
    args: Record<MutationUpdateStatementArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: StatementUpdateInput, where: StatementWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Statement | null> | prisma.Statement | null
  }
  updateManyStatements: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyStatementsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: StatementUpdateManyMutationInput, where?: StatementWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertStatement: {
    type: 'Statement'
    args: Record<MutationUpsertStatementArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: StatementWhereUniqueInput, create: StatementCreateInput, update: StatementUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Statement> | prisma.Statement
  }
  deleteStatement: {
    type: 'Statement'
    args: Record<MutationDeleteStatementArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: StatementWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Statement | null> | prisma.Statement | null
  }
  deleteManyStatements: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyStatementsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: StatementWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createActor: {
    type: 'Actor'
    args: Record<MutationCreateActorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ActorCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Actor> | prisma.Actor
  }
  updateActor: {
    type: 'Actor'
    args: Record<MutationUpdateActorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ActorUpdateInput, where: ActorWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Actor | null> | prisma.Actor | null
  }
  updateManyActors: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyActorsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ActorUpdateManyMutationInput, where?: ActorWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertActor: {
    type: 'Actor'
    args: Record<MutationUpsertActorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ActorWhereUniqueInput, create: ActorCreateInput, update: ActorUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Actor> | prisma.Actor
  }
  deleteActor: {
    type: 'Actor'
    args: Record<MutationDeleteActorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ActorWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Actor | null> | prisma.Actor | null
  }
  deleteManyActors: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyActorsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ActorWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createVerb: {
    type: 'Verb'
    args: Record<MutationCreateVerbArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VerbCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Verb> | prisma.Verb
  }
  updateVerb: {
    type: 'Verb'
    args: Record<MutationUpdateVerbArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VerbUpdateInput, where: VerbWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Verb | null> | prisma.Verb | null
  }
  updateManyVerbs: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyVerbsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: VerbUpdateManyMutationInput, where?: VerbWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertVerb: {
    type: 'Verb'
    args: Record<MutationUpsertVerbArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: VerbWhereUniqueInput, create: VerbCreateInput, update: VerbUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Verb> | prisma.Verb
  }
  deleteVerb: {
    type: 'Verb'
    args: Record<MutationDeleteVerbArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: VerbWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Verb | null> | prisma.Verb | null
  }
  deleteManyVerbs: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyVerbsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: VerbWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createObject: {
    type: 'Object'
    args: Record<MutationCreateObjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ObjectCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Object> | prisma.Object
  }
  updateObject: {
    type: 'Object'
    args: Record<MutationUpdateObjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ObjectUpdateInput, where: ObjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Object | null> | prisma.Object | null
  }
  updateManyObjects: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyObjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ObjectUpdateManyMutationInput, where?: ObjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertObject: {
    type: 'Object'
    args: Record<MutationUpsertObjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ObjectWhereUniqueInput, create: ObjectCreateInput, update: ObjectUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Object> | prisma.Object
  }
  deleteObject: {
    type: 'Object'
    args: Record<MutationDeleteObjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ObjectWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Object | null> | prisma.Object | null
  }
  deleteManyObjects: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyObjectsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ObjectWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createResult: {
    type: 'Result'
    args: Record<MutationCreateResultArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ResultCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Result> | prisma.Result
  }
  updateManyResults: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyResultsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ResultUpdateManyMutationInput, where?: ResultWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  deleteManyResults: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyResultsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ResultWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createResultScore: {
    type: 'ResultScore'
    args: Record<MutationCreateResultScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ResultScoreCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResultScore> | prisma.ResultScore
  }
  updateManyResultScores: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyResultScoresArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ResultScoreUpdateManyMutationInput, where?: ResultScoreWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  deleteManyResultScores: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyResultScoresArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ResultScoreWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'statement', args?: SubscriptionStatementArgs[] | false, alias?: string  } 
  | { name: 'actor', args?: SubscriptionActorArgs[] | false, alias?: string  } 
  | { name: 'verb', args?: SubscriptionVerbArgs[] | false, alias?: string  } 
  | { name: 'object', args?: SubscriptionObjectArgs[] | false, alias?: string  } 
  | { name: 'result', args?: SubscriptionResultArgs[] | false, alias?: string  } 
  | { name: 'resultScore', args?: SubscriptionResultScoreArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'statement'
  | 'actor'
  | 'verb'
  | 'object'
  | 'result'
  | 'resultScore'


type SubscriptionStatementArgs =
  | 'where'
type SubscriptionActorArgs =
  | 'where'
type SubscriptionVerbArgs =
  | 'where'
type SubscriptionObjectArgs =
  | 'where'
type SubscriptionResultArgs =
  | 'where'
type SubscriptionResultScoreArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  statement: {
    type: 'StatementSubscriptionPayload'
    args: Record<SubscriptionStatementArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: StatementSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StatementSubscriptionPayload | null> | prisma.StatementSubscriptionPayload | null
  }
  actor: {
    type: 'ActorSubscriptionPayload'
    args: Record<SubscriptionActorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ActorSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActorSubscriptionPayload | null> | prisma.ActorSubscriptionPayload | null
  }
  verb: {
    type: 'VerbSubscriptionPayload'
    args: Record<SubscriptionVerbArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: VerbSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VerbSubscriptionPayload | null> | prisma.VerbSubscriptionPayload | null
  }
  object: {
    type: 'ObjectSubscriptionPayload'
    args: Record<SubscriptionObjectArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ObjectSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ObjectSubscriptionPayload | null> | prisma.ObjectSubscriptionPayload | null
  }
  result: {
    type: 'ResultSubscriptionPayload'
    args: Record<SubscriptionResultArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ResultSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResultSubscriptionPayload | null> | prisma.ResultSubscriptionPayload | null
  }
  resultScore: {
    type: 'ResultScoreSubscriptionPayload'
    args: Record<SubscriptionResultScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ResultScoreSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResultScoreSubscriptionPayload | null> | prisma.ResultScoreSubscriptionPayload | null
  }
}
  

// Types for StatementSubscriptionPayload

type StatementSubscriptionPayloadObject =
  | StatementSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type StatementSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface StatementSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StatementSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Statement'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"StatementSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Statement | null> | prisma.Statement | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'StatementPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"StatementSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StatementPreviousValues | null> | prisma.StatementPreviousValues | null
  }
}
  

// Types for StatementPreviousValues

type StatementPreviousValuesObject =
  | StatementPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'extensions', args?: [] | false, alias?: string  } 

type StatementPreviousValuesFields =
  | 'id'
  | 'extensions'



  

export interface StatementPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  extensions: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ActorSubscriptionPayload

type ActorSubscriptionPayloadObject =
  | ActorSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ActorSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ActorSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActorSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Actor'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ActorSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Actor | null> | prisma.Actor | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ActorPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ActorSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActorPreviousValues | null> | prisma.ActorPreviousValues | null
  }
}
  

// Types for ActorPreviousValues

type ActorPreviousValuesObject =
  | ActorPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'mbox', args?: [] | false, alias?: string  } 

type ActorPreviousValuesFields =
  | 'id'
  | 'name'
  | 'mbox'



  

export interface ActorPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  mbox: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for VerbSubscriptionPayload

type VerbSubscriptionPayloadObject =
  | VerbSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type VerbSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface VerbSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"VerbSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Verb'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"VerbSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Verb | null> | prisma.Verb | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'VerbPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"VerbSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.VerbPreviousValues | null> | prisma.VerbPreviousValues | null
  }
}
  

// Types for VerbPreviousValues

type VerbPreviousValuesObject =
  | VerbPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: 'display', args?: [] | false, alias?: string  } 

type VerbPreviousValuesFields =
  | 'id'
  | '_id'
  | 'display'



  

export interface VerbPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _id: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  display: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ObjectSubscriptionPayload

type ObjectSubscriptionPayloadObject =
  | ObjectSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ObjectSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ObjectSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ObjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Object'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ObjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Object | null> | prisma.Object | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ObjectPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ObjectSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ObjectPreviousValues | null> | prisma.ObjectPreviousValues | null
  }
}
  

// Types for ObjectPreviousValues

type ObjectPreviousValuesObject =
  | ObjectPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: 'definition', args?: [] | false, alias?: string  } 

type ObjectPreviousValuesFields =
  | 'id'
  | '_id'
  | 'definition'



  

export interface ObjectPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  _id: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  definition: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ResultSubscriptionPayload

type ResultSubscriptionPayloadObject =
  | ResultSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ResultSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ResultSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ResultSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Result'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ResultSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Result | null> | prisma.Result | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ResultPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ResultSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResultPreviousValues | null> | prisma.ResultPreviousValues | null
  }
}
  

// Types for ResultPreviousValues

type ResultPreviousValuesObject =
  | ResultPreviousValuesFields
  | { name: 'completion', args?: [] | false, alias?: string  } 
  | { name: 'success', args?: [] | false, alias?: string  } 

type ResultPreviousValuesFields =
  | 'completion'
  | 'success'



  

export interface ResultPreviousValuesFieldDetails {
  completion: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  success: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ResultScoreSubscriptionPayload

type ResultScoreSubscriptionPayloadObject =
  | ResultScoreSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ResultScoreSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ResultScoreSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ResultScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ResultScore'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ResultScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResultScore | null> | prisma.ResultScore | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ResultScorePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ResultScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ResultScorePreviousValues | null> | prisma.ResultScorePreviousValues | null
  }
}
  

// Types for ResultScorePreviousValues

type ResultScorePreviousValuesObject =
  | ResultScorePreviousValuesFields
  | { name: 'scaled', args?: [] | false, alias?: string  } 

type ResultScorePreviousValuesFields =
  | 'scaled'



  

export interface ResultScorePreviousValuesFieldDetails {
  scaled: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface StatementWhereUniqueInput {
  id?: string | null
}
export type StatementWhereUniqueInputInputObject =
  | Extract<keyof StatementWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface StatementWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  actor?: ActorWhereInput | null
  verb?: VerbWhereInput | null
  object?: ObjectWhereInput | null
  result?: ResultWhereInput | null
  AND?: StatementWhereInput[]
  OR?: StatementWhereInput[]
  NOT?: StatementWhereInput[]
}
export type StatementWhereInputInputObject =
  | Extract<keyof StatementWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'actor', alias?: string  } 
  | { name: 'verb', alias?: string  } 
  | { name: 'object', alias?: string  } 
  | { name: 'result', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ActorWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  mbox?: string | null
  mbox_not?: string | null
  mbox_in?: string[]
  mbox_not_in?: string[]
  mbox_lt?: string | null
  mbox_lte?: string | null
  mbox_gt?: string | null
  mbox_gte?: string | null
  mbox_contains?: string | null
  mbox_not_contains?: string | null
  mbox_starts_with?: string | null
  mbox_not_starts_with?: string | null
  mbox_ends_with?: string | null
  mbox_not_ends_with?: string | null
  AND?: ActorWhereInput[]
  OR?: ActorWhereInput[]
  NOT?: ActorWhereInput[]
}
export type ActorWhereInputInputObject =
  | Extract<keyof ActorWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'mbox', alias?: string  } 
  | { name: 'mbox_not', alias?: string  } 
  | { name: 'mbox_in', alias?: string  } 
  | { name: 'mbox_not_in', alias?: string  } 
  | { name: 'mbox_lt', alias?: string  } 
  | { name: 'mbox_lte', alias?: string  } 
  | { name: 'mbox_gt', alias?: string  } 
  | { name: 'mbox_gte', alias?: string  } 
  | { name: 'mbox_contains', alias?: string  } 
  | { name: 'mbox_not_contains', alias?: string  } 
  | { name: 'mbox_starts_with', alias?: string  } 
  | { name: 'mbox_not_starts_with', alias?: string  } 
  | { name: 'mbox_ends_with', alias?: string  } 
  | { name: 'mbox_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface VerbWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  _id?: string | null
  _id_not?: string | null
  _id_in?: string[]
  _id_not_in?: string[]
  _id_lt?: string | null
  _id_lte?: string | null
  _id_gt?: string | null
  _id_gte?: string | null
  _id_contains?: string | null
  _id_not_contains?: string | null
  _id_starts_with?: string | null
  _id_not_starts_with?: string | null
  _id_ends_with?: string | null
  _id_not_ends_with?: string | null
  AND?: VerbWhereInput[]
  OR?: VerbWhereInput[]
  NOT?: VerbWhereInput[]
}
export type VerbWhereInputInputObject =
  | Extract<keyof VerbWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: '_id', alias?: string  } 
  | { name: '_id_not', alias?: string  } 
  | { name: '_id_in', alias?: string  } 
  | { name: '_id_not_in', alias?: string  } 
  | { name: '_id_lt', alias?: string  } 
  | { name: '_id_lte', alias?: string  } 
  | { name: '_id_gt', alias?: string  } 
  | { name: '_id_gte', alias?: string  } 
  | { name: '_id_contains', alias?: string  } 
  | { name: '_id_not_contains', alias?: string  } 
  | { name: '_id_starts_with', alias?: string  } 
  | { name: '_id_not_starts_with', alias?: string  } 
  | { name: '_id_ends_with', alias?: string  } 
  | { name: '_id_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ObjectWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  _id?: string | null
  _id_not?: string | null
  _id_in?: string[]
  _id_not_in?: string[]
  _id_lt?: string | null
  _id_lte?: string | null
  _id_gt?: string | null
  _id_gte?: string | null
  _id_contains?: string | null
  _id_not_contains?: string | null
  _id_starts_with?: string | null
  _id_not_starts_with?: string | null
  _id_ends_with?: string | null
  _id_not_ends_with?: string | null
  AND?: ObjectWhereInput[]
  OR?: ObjectWhereInput[]
  NOT?: ObjectWhereInput[]
}
export type ObjectWhereInputInputObject =
  | Extract<keyof ObjectWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: '_id', alias?: string  } 
  | { name: '_id_not', alias?: string  } 
  | { name: '_id_in', alias?: string  } 
  | { name: '_id_not_in', alias?: string  } 
  | { name: '_id_lt', alias?: string  } 
  | { name: '_id_lte', alias?: string  } 
  | { name: '_id_gt', alias?: string  } 
  | { name: '_id_gte', alias?: string  } 
  | { name: '_id_contains', alias?: string  } 
  | { name: '_id_not_contains', alias?: string  } 
  | { name: '_id_starts_with', alias?: string  } 
  | { name: '_id_not_starts_with', alias?: string  } 
  | { name: '_id_ends_with', alias?: string  } 
  | { name: '_id_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ResultWhereInput {
  completion?: boolean | null
  completion_not?: boolean | null
  success?: boolean | null
  success_not?: boolean | null
  score?: ResultScoreWhereInput | null
  AND?: ResultWhereInput[]
  OR?: ResultWhereInput[]
  NOT?: ResultWhereInput[]
}
export type ResultWhereInputInputObject =
  | Extract<keyof ResultWhereInput, string>
  | { name: 'completion', alias?: string  } 
  | { name: 'completion_not', alias?: string  } 
  | { name: 'success', alias?: string  } 
  | { name: 'success_not', alias?: string  } 
  | { name: 'score', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ResultScoreWhereInput {
  scaled?: number | null
  scaled_not?: number | null
  scaled_in?: number[]
  scaled_not_in?: number[]
  scaled_lt?: number | null
  scaled_lte?: number | null
  scaled_gt?: number | null
  scaled_gte?: number | null
  AND?: ResultScoreWhereInput[]
  OR?: ResultScoreWhereInput[]
  NOT?: ResultScoreWhereInput[]
}
export type ResultScoreWhereInputInputObject =
  | Extract<keyof ResultScoreWhereInput, string>
  | { name: 'scaled', alias?: string  } 
  | { name: 'scaled_not', alias?: string  } 
  | { name: 'scaled_in', alias?: string  } 
  | { name: 'scaled_not_in', alias?: string  } 
  | { name: 'scaled_lt', alias?: string  } 
  | { name: 'scaled_lte', alias?: string  } 
  | { name: 'scaled_gt', alias?: string  } 
  | { name: 'scaled_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ActorWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type ActorWhereUniqueInputInputObject =
  | Extract<keyof ActorWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface VerbWhereUniqueInput {
  id?: string | null
  _id?: string | null
}
export type VerbWhereUniqueInputInputObject =
  | Extract<keyof VerbWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: '_id', alias?: string  } 
  
export interface ObjectWhereUniqueInput {
  id?: string | null
  _id?: string | null
}
export type ObjectWhereUniqueInputInputObject =
  | Extract<keyof ObjectWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: '_id', alias?: string  } 
  
export interface StatementCreateInput {
  actor?: ActorCreateOneInput | null
  verb?: VerbCreateOneInput | null
  object?: ObjectCreateOneInput | null
  result?: ResultCreateOneInput | null
  extensions?: undefined | null
}
export type StatementCreateInputInputObject =
  | Extract<keyof StatementCreateInput, string>
  | { name: 'actor', alias?: string  } 
  | { name: 'verb', alias?: string  } 
  | { name: 'object', alias?: string  } 
  | { name: 'result', alias?: string  } 
  | { name: 'extensions', alias?: string  } 
  
export interface ActorCreateOneInput {
  create?: ActorCreateInput | null
  connect?: ActorWhereUniqueInput | null
}
export type ActorCreateOneInputInputObject =
  | Extract<keyof ActorCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ActorCreateInput {
  name?: string | null
  mbox?: string | null
}
export type ActorCreateInputInputObject =
  | Extract<keyof ActorCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'mbox', alias?: string  } 
  
export interface VerbCreateOneInput {
  create?: VerbCreateInput | null
  connect?: VerbWhereUniqueInput | null
}
export type VerbCreateOneInputInputObject =
  | Extract<keyof VerbCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface VerbCreateInput {
  _id?: string | null
  display?: undefined | null
}
export type VerbCreateInputInputObject =
  | Extract<keyof VerbCreateInput, string>
  | { name: '_id', alias?: string  } 
  | { name: 'display', alias?: string  } 
  
export interface ObjectCreateOneInput {
  create?: ObjectCreateInput | null
  connect?: ObjectWhereUniqueInput | null
}
export type ObjectCreateOneInputInputObject =
  | Extract<keyof ObjectCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ObjectCreateInput {
  _id?: string | null
  definition?: undefined | null
}
export type ObjectCreateInputInputObject =
  | Extract<keyof ObjectCreateInput, string>
  | { name: '_id', alias?: string  } 
  | { name: 'definition', alias?: string  } 
  
export interface ResultCreateOneInput {
  create?: ResultCreateInput | null
}
export type ResultCreateOneInputInputObject =
  | Extract<keyof ResultCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface ResultCreateInput {
  completion?: boolean | null
  success?: boolean | null
  score?: ResultScoreCreateOneInput | null
}
export type ResultCreateInputInputObject =
  | Extract<keyof ResultCreateInput, string>
  | { name: 'completion', alias?: string  } 
  | { name: 'success', alias?: string  } 
  | { name: 'score', alias?: string  } 
  
export interface ResultScoreCreateOneInput {
  create?: ResultScoreCreateInput | null
}
export type ResultScoreCreateOneInputInputObject =
  | Extract<keyof ResultScoreCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  
export interface ResultScoreCreateInput {
  scaled?: number | null
}
export type ResultScoreCreateInputInputObject =
  | Extract<keyof ResultScoreCreateInput, string>
  | { name: 'scaled', alias?: string  } 
  
export interface StatementUpdateInput {
  actor?: ActorUpdateOneInput | null
  verb?: VerbUpdateOneInput | null
  object?: ObjectUpdateOneInput | null
  result?: ResultUpdateOneInput | null
  extensions?: undefined | null
}
export type StatementUpdateInputInputObject =
  | Extract<keyof StatementUpdateInput, string>
  | { name: 'actor', alias?: string  } 
  | { name: 'verb', alias?: string  } 
  | { name: 'object', alias?: string  } 
  | { name: 'result', alias?: string  } 
  | { name: 'extensions', alias?: string  } 
  
export interface ActorUpdateOneInput {
  create?: ActorCreateInput | null
  update?: ActorUpdateDataInput | null
  upsert?: ActorUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ActorWhereUniqueInput | null
}
export type ActorUpdateOneInputInputObject =
  | Extract<keyof ActorUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ActorUpdateDataInput {
  name?: string | null
  mbox?: string | null
}
export type ActorUpdateDataInputInputObject =
  | Extract<keyof ActorUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'mbox', alias?: string  } 
  
export interface ActorUpsertNestedInput {
  update?: ActorUpdateDataInput
  create?: ActorCreateInput
}
export type ActorUpsertNestedInputInputObject =
  | Extract<keyof ActorUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface VerbUpdateOneInput {
  create?: VerbCreateInput | null
  update?: VerbUpdateDataInput | null
  upsert?: VerbUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: VerbWhereUniqueInput | null
}
export type VerbUpdateOneInputInputObject =
  | Extract<keyof VerbUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface VerbUpdateDataInput {
  _id?: string | null
  display?: undefined | null
}
export type VerbUpdateDataInputInputObject =
  | Extract<keyof VerbUpdateDataInput, string>
  | { name: '_id', alias?: string  } 
  | { name: 'display', alias?: string  } 
  
export interface VerbUpsertNestedInput {
  update?: VerbUpdateDataInput
  create?: VerbCreateInput
}
export type VerbUpsertNestedInputInputObject =
  | Extract<keyof VerbUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ObjectUpdateOneInput {
  create?: ObjectCreateInput | null
  update?: ObjectUpdateDataInput | null
  upsert?: ObjectUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: ObjectWhereUniqueInput | null
}
export type ObjectUpdateOneInputInputObject =
  | Extract<keyof ObjectUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ObjectUpdateDataInput {
  _id?: string | null
  definition?: undefined | null
}
export type ObjectUpdateDataInputInputObject =
  | Extract<keyof ObjectUpdateDataInput, string>
  | { name: '_id', alias?: string  } 
  | { name: 'definition', alias?: string  } 
  
export interface ObjectUpsertNestedInput {
  update?: ObjectUpdateDataInput
  create?: ObjectCreateInput
}
export type ObjectUpsertNestedInputInputObject =
  | Extract<keyof ObjectUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ResultUpdateOneInput {
  create?: ResultCreateInput | null
  update?: ResultUpdateDataInput | null
  upsert?: ResultUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
}
export type ResultUpdateOneInputInputObject =
  | Extract<keyof ResultUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  
export interface ResultUpdateDataInput {
  completion?: boolean | null
  success?: boolean | null
  score?: ResultScoreUpdateOneInput | null
}
export type ResultUpdateDataInputInputObject =
  | Extract<keyof ResultUpdateDataInput, string>
  | { name: 'completion', alias?: string  } 
  | { name: 'success', alias?: string  } 
  | { name: 'score', alias?: string  } 
  
export interface ResultScoreUpdateOneInput {
  create?: ResultScoreCreateInput | null
  update?: ResultScoreUpdateDataInput | null
  upsert?: ResultScoreUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
}
export type ResultScoreUpdateOneInputInputObject =
  | Extract<keyof ResultScoreUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  
export interface ResultScoreUpdateDataInput {
  scaled?: number | null
}
export type ResultScoreUpdateDataInputInputObject =
  | Extract<keyof ResultScoreUpdateDataInput, string>
  | { name: 'scaled', alias?: string  } 
  
export interface ResultScoreUpsertNestedInput {
  update?: ResultScoreUpdateDataInput
  create?: ResultScoreCreateInput
}
export type ResultScoreUpsertNestedInputInputObject =
  | Extract<keyof ResultScoreUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ResultUpsertNestedInput {
  update?: ResultUpdateDataInput
  create?: ResultCreateInput
}
export type ResultUpsertNestedInputInputObject =
  | Extract<keyof ResultUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface StatementUpdateManyMutationInput {
  extensions?: undefined | null
}
export type StatementUpdateManyMutationInputInputObject =
  | Extract<keyof StatementUpdateManyMutationInput, string>
  | { name: 'extensions', alias?: string  } 
  
export interface ActorUpdateInput {
  name?: string | null
  mbox?: string | null
}
export type ActorUpdateInputInputObject =
  | Extract<keyof ActorUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'mbox', alias?: string  } 
  
export interface ActorUpdateManyMutationInput {
  name?: string | null
  mbox?: string | null
}
export type ActorUpdateManyMutationInputInputObject =
  | Extract<keyof ActorUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'mbox', alias?: string  } 
  
export interface VerbUpdateInput {
  _id?: string | null
  display?: undefined | null
}
export type VerbUpdateInputInputObject =
  | Extract<keyof VerbUpdateInput, string>
  | { name: '_id', alias?: string  } 
  | { name: 'display', alias?: string  } 
  
export interface VerbUpdateManyMutationInput {
  _id?: string | null
  display?: undefined | null
}
export type VerbUpdateManyMutationInputInputObject =
  | Extract<keyof VerbUpdateManyMutationInput, string>
  | { name: '_id', alias?: string  } 
  | { name: 'display', alias?: string  } 
  
export interface ObjectUpdateInput {
  _id?: string | null
  definition?: undefined | null
}
export type ObjectUpdateInputInputObject =
  | Extract<keyof ObjectUpdateInput, string>
  | { name: '_id', alias?: string  } 
  | { name: 'definition', alias?: string  } 
  
export interface ObjectUpdateManyMutationInput {
  _id?: string | null
  definition?: undefined | null
}
export type ObjectUpdateManyMutationInputInputObject =
  | Extract<keyof ObjectUpdateManyMutationInput, string>
  | { name: '_id', alias?: string  } 
  | { name: 'definition', alias?: string  } 
  
export interface ResultUpdateManyMutationInput {
  completion?: boolean | null
  success?: boolean | null
}
export type ResultUpdateManyMutationInputInputObject =
  | Extract<keyof ResultUpdateManyMutationInput, string>
  | { name: 'completion', alias?: string  } 
  | { name: 'success', alias?: string  } 
  
export interface ResultScoreUpdateManyMutationInput {
  scaled?: number | null
}
export type ResultScoreUpdateManyMutationInputInputObject =
  | Extract<keyof ResultScoreUpdateManyMutationInput, string>
  | { name: 'scaled', alias?: string  } 
  
export interface StatementSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: StatementWhereInput | null
  AND?: StatementSubscriptionWhereInput[]
  OR?: StatementSubscriptionWhereInput[]
  NOT?: StatementSubscriptionWhereInput[]
}
export type StatementSubscriptionWhereInputInputObject =
  | Extract<keyof StatementSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ActorSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ActorWhereInput | null
  AND?: ActorSubscriptionWhereInput[]
  OR?: ActorSubscriptionWhereInput[]
  NOT?: ActorSubscriptionWhereInput[]
}
export type ActorSubscriptionWhereInputInputObject =
  | Extract<keyof ActorSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface VerbSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: VerbWhereInput | null
  AND?: VerbSubscriptionWhereInput[]
  OR?: VerbSubscriptionWhereInput[]
  NOT?: VerbSubscriptionWhereInput[]
}
export type VerbSubscriptionWhereInputInputObject =
  | Extract<keyof VerbSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ObjectSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ObjectWhereInput | null
  AND?: ObjectSubscriptionWhereInput[]
  OR?: ObjectSubscriptionWhereInput[]
  NOT?: ObjectSubscriptionWhereInput[]
}
export type ObjectSubscriptionWhereInputInputObject =
  | Extract<keyof ObjectSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ResultSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ResultWhereInput | null
  AND?: ResultSubscriptionWhereInput[]
  OR?: ResultSubscriptionWhereInput[]
  NOT?: ResultSubscriptionWhereInput[]
}
export type ResultSubscriptionWhereInputInputObject =
  | Extract<keyof ResultSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ResultScoreSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ResultScoreWhereInput | null
  AND?: ResultScoreSubscriptionWhereInput[]
  OR?: ResultScoreSubscriptionWhereInput[]
  NOT?: ResultScoreSubscriptionWhereInput[]
}
export type ResultScoreSubscriptionWhereInputInputObject =
  | Extract<keyof ResultScoreSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type StatementOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'extensions_ASC'
  | 'extensions_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ActorOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'mbox_ASC'
  | 'mbox_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type VerbOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | '_id_ASC'
  | '_id_DESC'
  | 'display_ASC'
  | 'display_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ObjectOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | '_id_ASC'
  | '_id_DESC'
  | 'definition_ASC'
  | 'definition_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ResultOrderByInputValues =
  | 'completion_ASC'
  | 'completion_DESC'
  | 'success_ASC'
  | 'success_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ResultScoreOrderByInputValues =
  | 'scaled_ASC'
  | 'scaled_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  