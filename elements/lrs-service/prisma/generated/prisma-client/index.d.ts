// Code generated by Prisma (prisma@1.29.0-beta.7). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  actor: (where?: ActorWhereInput) => Promise<boolean>;
  object: (where?: ObjectWhereInput) => Promise<boolean>;
  result: (where?: ResultWhereInput) => Promise<boolean>;
  resultScore: (where?: ResultScoreWhereInput) => Promise<boolean>;
  statement: (where?: StatementWhereInput) => Promise<boolean>;
  verb: (where?: VerbWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  actor: (where: ActorWhereUniqueInput) => ActorPromise;
  actors: (
    args?: {
      where?: ActorWhereInput;
      orderBy?: ActorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Actor>;
  actorsConnection: (
    args?: {
      where?: ActorWhereInput;
      orderBy?: ActorOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ActorConnectionPromise;
  object: (where: ObjectWhereUniqueInput) => ObjectPromise;
  objects: (
    args?: {
      where?: ObjectWhereInput;
      orderBy?: ObjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Object>;
  objectsConnection: (
    args?: {
      where?: ObjectWhereInput;
      orderBy?: ObjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ObjectConnectionPromise;
  results: (
    args?: {
      where?: ResultWhereInput;
      orderBy?: ResultOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Result>;
  resultsConnection: (
    args?: {
      where?: ResultWhereInput;
      orderBy?: ResultOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ResultConnectionPromise;
  resultScores: (
    args?: {
      where?: ResultScoreWhereInput;
      orderBy?: ResultScoreOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ResultScore>;
  resultScoresConnection: (
    args?: {
      where?: ResultScoreWhereInput;
      orderBy?: ResultScoreOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ResultScoreConnectionPromise;
  statement: (where: StatementWhereUniqueInput) => StatementPromise;
  statements: (
    args?: {
      where?: StatementWhereInput;
      orderBy?: StatementOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Statement>;
  statementsConnection: (
    args?: {
      where?: StatementWhereInput;
      orderBy?: StatementOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StatementConnectionPromise;
  verb: (where: VerbWhereUniqueInput) => VerbPromise;
  verbs: (
    args?: {
      where?: VerbWhereInput;
      orderBy?: VerbOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Verb>;
  verbsConnection: (
    args?: {
      where?: VerbWhereInput;
      orderBy?: VerbOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => VerbConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createActor: (data: ActorCreateInput) => ActorPromise;
  updateActor: (
    args: { data: ActorUpdateInput; where: ActorWhereUniqueInput }
  ) => ActorPromise;
  updateManyActors: (
    args: { data: ActorUpdateManyMutationInput; where?: ActorWhereInput }
  ) => BatchPayloadPromise;
  upsertActor: (
    args: {
      where: ActorWhereUniqueInput;
      create: ActorCreateInput;
      update: ActorUpdateInput;
    }
  ) => ActorPromise;
  deleteActor: (where: ActorWhereUniqueInput) => ActorPromise;
  deleteManyActors: (where?: ActorWhereInput) => BatchPayloadPromise;
  createObject: (data: ObjectCreateInput) => ObjectPromise;
  updateObject: (
    args: { data: ObjectUpdateInput; where: ObjectWhereUniqueInput }
  ) => ObjectPromise;
  updateManyObjects: (
    args: { data: ObjectUpdateManyMutationInput; where?: ObjectWhereInput }
  ) => BatchPayloadPromise;
  upsertObject: (
    args: {
      where: ObjectWhereUniqueInput;
      create: ObjectCreateInput;
      update: ObjectUpdateInput;
    }
  ) => ObjectPromise;
  deleteObject: (where: ObjectWhereUniqueInput) => ObjectPromise;
  deleteManyObjects: (where?: ObjectWhereInput) => BatchPayloadPromise;
  createResult: (data: ResultCreateInput) => ResultPromise;
  updateManyResults: (
    args: { data: ResultUpdateManyMutationInput; where?: ResultWhereInput }
  ) => BatchPayloadPromise;
  deleteManyResults: (where?: ResultWhereInput) => BatchPayloadPromise;
  createResultScore: (data: ResultScoreCreateInput) => ResultScorePromise;
  updateManyResultScores: (
    args: {
      data: ResultScoreUpdateManyMutationInput;
      where?: ResultScoreWhereInput;
    }
  ) => BatchPayloadPromise;
  deleteManyResultScores: (
    where?: ResultScoreWhereInput
  ) => BatchPayloadPromise;
  createStatement: (data: StatementCreateInput) => StatementPromise;
  updateStatement: (
    args: { data: StatementUpdateInput; where: StatementWhereUniqueInput }
  ) => StatementPromise;
  updateManyStatements: (
    args: {
      data: StatementUpdateManyMutationInput;
      where?: StatementWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertStatement: (
    args: {
      where: StatementWhereUniqueInput;
      create: StatementCreateInput;
      update: StatementUpdateInput;
    }
  ) => StatementPromise;
  deleteStatement: (where: StatementWhereUniqueInput) => StatementPromise;
  deleteManyStatements: (where?: StatementWhereInput) => BatchPayloadPromise;
  createVerb: (data: VerbCreateInput) => VerbPromise;
  updateVerb: (
    args: { data: VerbUpdateInput; where: VerbWhereUniqueInput }
  ) => VerbPromise;
  updateManyVerbs: (
    args: { data: VerbUpdateManyMutationInput; where?: VerbWhereInput }
  ) => BatchPayloadPromise;
  upsertVerb: (
    args: {
      where: VerbWhereUniqueInput;
      create: VerbCreateInput;
      update: VerbUpdateInput;
    }
  ) => VerbPromise;
  deleteVerb: (where: VerbWhereUniqueInput) => VerbPromise;
  deleteManyVerbs: (where?: VerbWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  actor: (
    where?: ActorSubscriptionWhereInput
  ) => ActorSubscriptionPayloadSubscription;
  object: (
    where?: ObjectSubscriptionWhereInput
  ) => ObjectSubscriptionPayloadSubscription;
  result: (
    where?: ResultSubscriptionWhereInput
  ) => ResultSubscriptionPayloadSubscription;
  resultScore: (
    where?: ResultScoreSubscriptionWhereInput
  ) => ResultScoreSubscriptionPayloadSubscription;
  statement: (
    where?: StatementSubscriptionWhereInput
  ) => StatementSubscriptionPayloadSubscription;
  verb: (
    where?: VerbSubscriptionWhereInput
  ) => VerbSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ObjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "_id_ASC"
  | "_id_DESC"
  | "definition_ASC"
  | "definition_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ResultOrderByInput =
  | "completion_ASC"
  | "completion_DESC"
  | "success_ASC"
  | "success_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ResultScoreOrderByInput =
  | "scaled_ASC"
  | "scaled_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ActorOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "mbox_ASC"
  | "mbox_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StatementOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "extensions_ASC"
  | "extensions_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VerbOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "_id_ASC"
  | "_id_DESC"
  | "display_ASC"
  | "display_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ObjectCreateInput {
  _id?: String;
  definition?: Json;
}

export type ActorWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface StatementWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  actor?: ActorWhereInput;
  verb?: VerbWhereInput;
  object?: ObjectWhereInput;
  result?: ResultWhereInput;
  AND?: StatementWhereInput[] | StatementWhereInput;
  OR?: StatementWhereInput[] | StatementWhereInput;
  NOT?: StatementWhereInput[] | StatementWhereInput;
}

export interface StatementCreateInput {
  actor?: ActorCreateOneInput;
  verb?: VerbCreateOneInput;
  object?: ObjectCreateOneInput;
  result?: ResultCreateOneInput;
  extensions?: Json;
}

export interface VerbWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  _id?: String;
  _id_not?: String;
  _id_in?: String[] | String;
  _id_not_in?: String[] | String;
  _id_lt?: String;
  _id_lte?: String;
  _id_gt?: String;
  _id_gte?: String;
  _id_contains?: String;
  _id_not_contains?: String;
  _id_starts_with?: String;
  _id_not_starts_with?: String;
  _id_ends_with?: String;
  _id_not_ends_with?: String;
  AND?: VerbWhereInput[] | VerbWhereInput;
  OR?: VerbWhereInput[] | VerbWhereInput;
  NOT?: VerbWhereInput[] | VerbWhereInput;
}

export interface ResultScoreCreateOneInput {
  create?: ResultScoreCreateInput;
}

export interface ActorWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  mbox?: String;
  mbox_not?: String;
  mbox_in?: String[] | String;
  mbox_not_in?: String[] | String;
  mbox_lt?: String;
  mbox_lte?: String;
  mbox_gt?: String;
  mbox_gte?: String;
  mbox_contains?: String;
  mbox_not_contains?: String;
  mbox_starts_with?: String;
  mbox_not_starts_with?: String;
  mbox_ends_with?: String;
  mbox_not_ends_with?: String;
  AND?: ActorWhereInput[] | ActorWhereInput;
  OR?: ActorWhereInput[] | ActorWhereInput;
  NOT?: ActorWhereInput[] | ActorWhereInput;
}

export type ObjectWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  _id?: String;
}>;

export interface VerbUpdateDataInput {
  _id?: String;
  display?: Json;
}

export interface ResultScoreSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ResultScoreWhereInput;
  AND?: ResultScoreSubscriptionWhereInput[] | ResultScoreSubscriptionWhereInput;
  OR?: ResultScoreSubscriptionWhereInput[] | ResultScoreSubscriptionWhereInput;
  NOT?: ResultScoreSubscriptionWhereInput[] | ResultScoreSubscriptionWhereInput;
}

export interface VerbUpdateOneInput {
  create?: VerbCreateInput;
  update?: VerbUpdateDataInput;
  upsert?: VerbUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: VerbWhereUniqueInput;
}

export interface ResultSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ResultWhereInput;
  AND?: ResultSubscriptionWhereInput[] | ResultSubscriptionWhereInput;
  OR?: ResultSubscriptionWhereInput[] | ResultSubscriptionWhereInput;
  NOT?: ResultSubscriptionWhereInput[] | ResultSubscriptionWhereInput;
}

export interface ActorUpsertNestedInput {
  update: ActorUpdateDataInput;
  create: ActorCreateInput;
}

export interface ActorSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ActorWhereInput;
  AND?: ActorSubscriptionWhereInput[] | ActorSubscriptionWhereInput;
  OR?: ActorSubscriptionWhereInput[] | ActorSubscriptionWhereInput;
  NOT?: ActorSubscriptionWhereInput[] | ActorSubscriptionWhereInput;
}

export type VerbWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  _id?: String;
}>;

export interface ResultWhereInput {
  completion?: Boolean;
  completion_not?: Boolean;
  success?: Boolean;
  success_not?: Boolean;
  score?: ResultScoreWhereInput;
  AND?: ResultWhereInput[] | ResultWhereInput;
  OR?: ResultWhereInput[] | ResultWhereInput;
  NOT?: ResultWhereInput[] | ResultWhereInput;
}

export interface ActorUpdateDataInput {
  name?: String;
  mbox?: String;
}

export interface VerbUpdateInput {
  _id?: String;
  display?: Json;
}

export interface ActorUpdateOneInput {
  create?: ActorCreateInput;
  update?: ActorUpdateDataInput;
  upsert?: ActorUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ActorWhereUniqueInput;
}

export interface ResultUpsertNestedInput {
  update: ResultUpdateDataInput;
  create: ResultCreateInput;
}

export interface StatementUpdateInput {
  actor?: ActorUpdateOneInput;
  verb?: VerbUpdateOneInput;
  object?: ObjectUpdateOneInput;
  result?: ResultUpdateOneInput;
  extensions?: Json;
}

export interface ResultScoreUpdateDataInput {
  scaled?: Int;
}

export interface ResultCreateOneInput {
  create?: ResultCreateInput;
}

export interface ResultUpdateDataInput {
  completion?: Boolean;
  success?: Boolean;
  score?: ResultScoreUpdateOneInput;
}

export interface ObjectUpsertNestedInput {
  update: ObjectUpdateDataInput;
  create: ObjectCreateInput;
}

export type StatementWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ActorCreateInput {
  name?: String;
  mbox?: String;
}

export interface VerbUpsertNestedInput {
  update: VerbUpdateDataInput;
  create: VerbCreateInput;
}

export interface ActorUpdateInput {
  name?: String;
  mbox?: String;
}

export interface StatementSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StatementWhereInput;
  AND?: StatementSubscriptionWhereInput[] | StatementSubscriptionWhereInput;
  OR?: StatementSubscriptionWhereInput[] | StatementSubscriptionWhereInput;
  NOT?: StatementSubscriptionWhereInput[] | StatementSubscriptionWhereInput;
}

export interface ActorUpdateManyMutationInput {
  name?: String;
  mbox?: String;
}

export interface ObjectSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ObjectWhereInput;
  AND?: ObjectSubscriptionWhereInput[] | ObjectSubscriptionWhereInput;
  OR?: ObjectSubscriptionWhereInput[] | ObjectSubscriptionWhereInput;
  NOT?: ObjectSubscriptionWhereInput[] | ObjectSubscriptionWhereInput;
}

export interface ObjectCreateOneInput {
  create?: ObjectCreateInput;
  connect?: ObjectWhereUniqueInput;
}

export interface ResultScoreWhereInput {
  scaled?: Int;
  scaled_not?: Int;
  scaled_in?: Int[] | Int;
  scaled_not_in?: Int[] | Int;
  scaled_lt?: Int;
  scaled_lte?: Int;
  scaled_gt?: Int;
  scaled_gte?: Int;
  AND?: ResultScoreWhereInput[] | ResultScoreWhereInput;
  OR?: ResultScoreWhereInput[] | ResultScoreWhereInput;
  NOT?: ResultScoreWhereInput[] | ResultScoreWhereInput;
}

export interface VerbCreateInput {
  _id?: String;
  display?: Json;
}

export interface ResultScoreUpsertNestedInput {
  update: ResultScoreUpdateDataInput;
  create: ResultScoreCreateInput;
}

export interface VerbCreateOneInput {
  create?: VerbCreateInput;
  connect?: VerbWhereUniqueInput;
}

export interface ResultUpdateOneInput {
  create?: ResultCreateInput;
  update?: ResultUpdateDataInput;
  upsert?: ResultUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
}

export interface ObjectUpdateInput {
  _id?: String;
  definition?: Json;
}

export interface ObjectUpdateOneInput {
  create?: ObjectCreateInput;
  update?: ObjectUpdateDataInput;
  upsert?: ObjectUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ObjectWhereUniqueInput;
}

export interface ObjectUpdateManyMutationInput {
  _id?: String;
  definition?: Json;
}

export interface ObjectWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  _id?: String;
  _id_not?: String;
  _id_in?: String[] | String;
  _id_not_in?: String[] | String;
  _id_lt?: String;
  _id_lte?: String;
  _id_gt?: String;
  _id_gte?: String;
  _id_contains?: String;
  _id_not_contains?: String;
  _id_starts_with?: String;
  _id_not_starts_with?: String;
  _id_ends_with?: String;
  _id_not_ends_with?: String;
  AND?: ObjectWhereInput[] | ObjectWhereInput;
  OR?: ObjectWhereInput[] | ObjectWhereInput;
  NOT?: ObjectWhereInput[] | ObjectWhereInput;
}

export interface ResultCreateInput {
  completion?: Boolean;
  success?: Boolean;
  score?: ResultScoreCreateOneInput;
}

export interface StatementUpdateManyMutationInput {
  extensions?: Json;
}

export interface ResultScoreUpdateManyMutationInput {
  scaled?: Int;
}

export interface ResultUpdateManyMutationInput {
  completion?: Boolean;
  success?: Boolean;
}

export interface ResultScoreCreateInput {
  scaled?: Int;
}

export interface ActorCreateOneInput {
  create?: ActorCreateInput;
  connect?: ActorWhereUniqueInput;
}

export interface ResultScoreUpdateOneInput {
  create?: ResultScoreCreateInput;
  update?: ResultScoreUpdateDataInput;
  upsert?: ResultScoreUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
}

export interface VerbUpdateManyMutationInput {
  _id?: String;
  display?: Json;
}

export interface VerbSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VerbWhereInput;
  AND?: VerbSubscriptionWhereInput[] | VerbSubscriptionWhereInput;
  OR?: VerbSubscriptionWhereInput[] | VerbSubscriptionWhereInput;
  NOT?: VerbSubscriptionWhereInput[] | VerbSubscriptionWhereInput;
}

export interface ObjectUpdateDataInput {
  _id?: String;
  definition?: Json;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VerbPreviousValues {
  id: ID_Output;
  _id?: String;
  display?: Json;
}

export interface VerbPreviousValuesPromise
  extends Promise<VerbPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  _id: () => Promise<String>;
  display: () => Promise<Json>;
}

export interface VerbPreviousValuesSubscription
  extends Promise<AsyncIterator<VerbPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  _id: () => Promise<AsyncIterator<String>>;
  display: () => Promise<AsyncIterator<Json>>;
}

export interface Result {
  completion?: Boolean;
  success?: Boolean;
}

export interface ResultPromise extends Promise<Result>, Fragmentable {
  completion: () => Promise<Boolean>;
  success: () => Promise<Boolean>;
  score: <T = ResultScorePromise>() => T;
}

export interface ResultSubscription
  extends Promise<AsyncIterator<Result>>,
    Fragmentable {
  completion: () => Promise<AsyncIterator<Boolean>>;
  success: () => Promise<AsyncIterator<Boolean>>;
  score: <T = ResultScoreSubscription>() => T;
}

export interface ActorEdge {
  node: Actor;
  cursor: String;
}

export interface ActorEdgePromise extends Promise<ActorEdge>, Fragmentable {
  node: <T = ActorPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActorEdgeSubscription
  extends Promise<AsyncIterator<ActorEdge>>,
    Fragmentable {
  node: <T = ActorSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ResultScore {
  scaled?: Int;
}

export interface ResultScorePromise extends Promise<ResultScore>, Fragmentable {
  scaled: () => Promise<Int>;
}

export interface ResultScoreSubscription
  extends Promise<AsyncIterator<ResultScore>>,
    Fragmentable {
  scaled: () => Promise<AsyncIterator<Int>>;
}

export interface Object {
  id: ID_Output;
  _id?: String;
  definition?: Json;
}

export interface ObjectPromise extends Promise<Object>, Fragmentable {
  id: () => Promise<ID_Output>;
  _id: () => Promise<String>;
  definition: () => Promise<Json>;
}

export interface ObjectSubscription
  extends Promise<AsyncIterator<Object>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  _id: () => Promise<AsyncIterator<String>>;
  definition: () => Promise<AsyncIterator<Json>>;
}

export interface AggregateActor {
  count: Int;
}

export interface AggregateActorPromise
  extends Promise<AggregateActor>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActorSubscription
  extends Promise<AsyncIterator<AggregateActor>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ActorConnection {
  pageInfo: PageInfo;
  edges: ActorEdge[];
}

export interface ActorConnectionPromise
  extends Promise<ActorConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActorEdge>>() => T;
  aggregate: <T = AggregateActorPromise>() => T;
}

export interface ActorConnectionSubscription
  extends Promise<AsyncIterator<ActorConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActorEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActorSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface VerbEdge {
  node: Verb;
  cursor: String;
}

export interface VerbEdgePromise extends Promise<VerbEdge>, Fragmentable {
  node: <T = VerbPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VerbEdgeSubscription
  extends Promise<AsyncIterator<VerbEdge>>,
    Fragmentable {
  node: <T = VerbSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateObject {
  count: Int;
}

export interface AggregateObjectPromise
  extends Promise<AggregateObject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateObjectSubscription
  extends Promise<AsyncIterator<AggregateObject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Actor {
  id: ID_Output;
  name?: String;
  mbox?: String;
}

export interface ActorPromise extends Promise<Actor>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  mbox: () => Promise<String>;
}

export interface ActorSubscription
  extends Promise<AsyncIterator<Actor>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  mbox: () => Promise<AsyncIterator<String>>;
}

export interface ObjectEdge {
  node: Object;
  cursor: String;
}

export interface ObjectEdgePromise extends Promise<ObjectEdge>, Fragmentable {
  node: <T = ObjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ObjectEdgeSubscription
  extends Promise<AsyncIterator<ObjectEdge>>,
    Fragmentable {
  node: <T = ObjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface StatementEdge {
  node: Statement;
  cursor: String;
}

export interface StatementEdgePromise
  extends Promise<StatementEdge>,
    Fragmentable {
  node: <T = StatementPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StatementEdgeSubscription
  extends Promise<AsyncIterator<StatementEdge>>,
    Fragmentable {
  node: <T = StatementSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface StatementPreviousValues {
  id: ID_Output;
  extensions?: Json;
}

export interface StatementPreviousValuesPromise
  extends Promise<StatementPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  extensions: () => Promise<Json>;
}

export interface StatementPreviousValuesSubscription
  extends Promise<AsyncIterator<StatementPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  extensions: () => Promise<AsyncIterator<Json>>;
}

export interface Verb {
  id: ID_Output;
  _id?: String;
  display?: Json;
}

export interface VerbPromise extends Promise<Verb>, Fragmentable {
  id: () => Promise<ID_Output>;
  _id: () => Promise<String>;
  display: () => Promise<Json>;
}

export interface VerbSubscription
  extends Promise<AsyncIterator<Verb>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  _id: () => Promise<AsyncIterator<String>>;
  display: () => Promise<AsyncIterator<Json>>;
}

export interface ActorSubscriptionPayload {
  mutation: MutationType;
  node: Actor;
  updatedFields: String[];
  previousValues: ActorPreviousValues;
}

export interface ActorSubscriptionPayloadPromise
  extends Promise<ActorSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActorPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActorPreviousValuesPromise>() => T;
}

export interface ActorSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActorSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActorSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActorPreviousValuesSubscription>() => T;
}

export interface AggregateResultScore {
  count: Int;
}

export interface AggregateResultScorePromise
  extends Promise<AggregateResultScore>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateResultScoreSubscription
  extends Promise<AsyncIterator<AggregateResultScore>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ActorPreviousValues {
  id: ID_Output;
  name?: String;
  mbox?: String;
}

export interface ActorPreviousValuesPromise
  extends Promise<ActorPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  mbox: () => Promise<String>;
}

export interface ActorPreviousValuesSubscription
  extends Promise<AsyncIterator<ActorPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  mbox: () => Promise<AsyncIterator<String>>;
}

export interface ResultScoreConnection {
  pageInfo: PageInfo;
  edges: ResultScoreEdge[];
}

export interface ResultScoreConnectionPromise
  extends Promise<ResultScoreConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ResultScoreEdge>>() => T;
  aggregate: <T = AggregateResultScorePromise>() => T;
}

export interface ResultScoreConnectionSubscription
  extends Promise<AsyncIterator<ResultScoreConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ResultScoreEdgeSubscription>>>() => T;
  aggregate: <T = AggregateResultScoreSubscription>() => T;
}

export interface ObjectConnection {
  pageInfo: PageInfo;
  edges: ObjectEdge[];
}

export interface ObjectConnectionPromise
  extends Promise<ObjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ObjectEdge>>() => T;
  aggregate: <T = AggregateObjectPromise>() => T;
}

export interface ObjectConnectionSubscription
  extends Promise<AsyncIterator<ObjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ObjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateObjectSubscription>() => T;
}

export interface AggregateResult {
  count: Int;
}

export interface AggregateResultPromise
  extends Promise<AggregateResult>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateResultSubscription
  extends Promise<AsyncIterator<AggregateResult>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ObjectSubscriptionPayload {
  mutation: MutationType;
  node: Object;
  updatedFields: String[];
  previousValues: ObjectPreviousValues;
}

export interface ObjectSubscriptionPayloadPromise
  extends Promise<ObjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ObjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ObjectPreviousValuesPromise>() => T;
}

export interface ObjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ObjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ObjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ObjectPreviousValuesSubscription>() => T;
}

export interface ResultConnection {
  pageInfo: PageInfo;
  edges: ResultEdge[];
}

export interface ResultConnectionPromise
  extends Promise<ResultConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ResultEdge>>() => T;
  aggregate: <T = AggregateResultPromise>() => T;
}

export interface ResultConnectionSubscription
  extends Promise<AsyncIterator<ResultConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ResultEdgeSubscription>>>() => T;
  aggregate: <T = AggregateResultSubscription>() => T;
}

export interface ObjectPreviousValues {
  id: ID_Output;
  _id?: String;
  definition?: Json;
}

export interface ObjectPreviousValuesPromise
  extends Promise<ObjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  _id: () => Promise<String>;
  definition: () => Promise<Json>;
}

export interface ObjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ObjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  _id: () => Promise<AsyncIterator<String>>;
  definition: () => Promise<AsyncIterator<Json>>;
}

export interface VerbConnection {
  pageInfo: PageInfo;
  edges: VerbEdge[];
}

export interface VerbConnectionPromise
  extends Promise<VerbConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VerbEdge>>() => T;
  aggregate: <T = AggregateVerbPromise>() => T;
}

export interface VerbConnectionSubscription
  extends Promise<AsyncIterator<VerbConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VerbEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVerbSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface StatementConnection {
  pageInfo: PageInfo;
  edges: StatementEdge[];
}

export interface StatementConnectionPromise
  extends Promise<StatementConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StatementEdge>>() => T;
  aggregate: <T = AggregateStatementPromise>() => T;
}

export interface StatementConnectionSubscription
  extends Promise<AsyncIterator<StatementConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StatementEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStatementSubscription>() => T;
}

export interface ResultSubscriptionPayload {
  mutation: MutationType;
  node: Result;
  updatedFields: String[];
  previousValues: ResultPreviousValues;
}

export interface ResultSubscriptionPayloadPromise
  extends Promise<ResultSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ResultPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ResultPreviousValuesPromise>() => T;
}

export interface ResultSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ResultSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ResultSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ResultPreviousValuesSubscription>() => T;
}

export interface ResultScoreEdge {
  node: ResultScore;
  cursor: String;
}

export interface ResultScoreEdgePromise
  extends Promise<ResultScoreEdge>,
    Fragmentable {
  node: <T = ResultScorePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ResultScoreEdgeSubscription
  extends Promise<AsyncIterator<ResultScoreEdge>>,
    Fragmentable {
  node: <T = ResultScoreSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ResultEdge {
  node: Result;
  cursor: String;
}

export interface ResultEdgePromise extends Promise<ResultEdge>, Fragmentable {
  node: <T = ResultPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ResultEdgeSubscription
  extends Promise<AsyncIterator<ResultEdge>>,
    Fragmentable {
  node: <T = ResultSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ResultScorePreviousValues {
  scaled?: Int;
}

export interface ResultScorePreviousValuesPromise
  extends Promise<ResultScorePreviousValues>,
    Fragmentable {
  scaled: () => Promise<Int>;
}

export interface ResultScorePreviousValuesSubscription
  extends Promise<AsyncIterator<ResultScorePreviousValues>>,
    Fragmentable {
  scaled: () => Promise<AsyncIterator<Int>>;
}

export interface ResultScoreSubscriptionPayload {
  mutation: MutationType;
  node: ResultScore;
  updatedFields: String[];
  previousValues: ResultScorePreviousValues;
}

export interface ResultScoreSubscriptionPayloadPromise
  extends Promise<ResultScoreSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ResultScorePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ResultScorePreviousValuesPromise>() => T;
}

export interface ResultScoreSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ResultScoreSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ResultScoreSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ResultScorePreviousValuesSubscription>() => T;
}

export interface StatementSubscriptionPayload {
  mutation: MutationType;
  node: Statement;
  updatedFields: String[];
  previousValues: StatementPreviousValues;
}

export interface StatementSubscriptionPayloadPromise
  extends Promise<StatementSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StatementPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StatementPreviousValuesPromise>() => T;
}

export interface StatementSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StatementSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StatementSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StatementPreviousValuesSubscription>() => T;
}

export interface ResultPreviousValues {
  completion?: Boolean;
  success?: Boolean;
}

export interface ResultPreviousValuesPromise
  extends Promise<ResultPreviousValues>,
    Fragmentable {
  completion: () => Promise<Boolean>;
  success: () => Promise<Boolean>;
}

export interface ResultPreviousValuesSubscription
  extends Promise<AsyncIterator<ResultPreviousValues>>,
    Fragmentable {
  completion: () => Promise<AsyncIterator<Boolean>>;
  success: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateVerb {
  count: Int;
}

export interface AggregateVerbPromise
  extends Promise<AggregateVerb>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVerbSubscription
  extends Promise<AsyncIterator<AggregateVerb>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VerbSubscriptionPayload {
  mutation: MutationType;
  node: Verb;
  updatedFields: String[];
  previousValues: VerbPreviousValues;
}

export interface VerbSubscriptionPayloadPromise
  extends Promise<VerbSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VerbPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VerbPreviousValuesPromise>() => T;
}

export interface VerbSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VerbSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VerbSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VerbPreviousValuesSubscription>() => T;
}

export interface Statement {
  id: ID_Output;
  extensions?: Json;
}

export interface StatementPromise extends Promise<Statement>, Fragmentable {
  id: () => Promise<ID_Output>;
  actor: <T = ActorPromise>() => T;
  verb: <T = VerbPromise>() => T;
  object: <T = ObjectPromise>() => T;
  result: <T = ResultPromise>() => T;
  extensions: () => Promise<Json>;
}

export interface StatementSubscription
  extends Promise<AsyncIterator<Statement>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  actor: <T = ActorSubscription>() => T;
  verb: <T = VerbSubscription>() => T;
  object: <T = ObjectSubscription>() => T;
  result: <T = ResultSubscription>() => T;
  extensions: () => Promise<AsyncIterator<Json>>;
}

export interface AggregateStatement {
  count: Int;
}

export interface AggregateStatementPromise
  extends Promise<AggregateStatement>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStatementSubscription
  extends Promise<AsyncIterator<AggregateStatement>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Json = any;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Statement",
    embedded: false
  },
  {
    name: "Actor",
    embedded: false
  },
  {
    name: "Verb",
    embedded: false
  },
  {
    name: "Object",
    embedded: false
  },
  {
    name: "Result",
    embedded: false
  },
  {
    name: "ResultScore",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
