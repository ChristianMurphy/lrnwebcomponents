{"version":3,"file":"circle-progress.umd.js","sources":["circle-progress.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport \"@polymer/paper-styles/paper-styles.js\";\nimport \"@polymer/iron-flex-layout/iron-flex-layout.js\";\nimport { IronResizableBehavior } from \"@polymer/iron-resizable-behavior/iron-resizable-behavior.js\";\n\n/**\n * `circle-progress`\n * `Polymer-based web component displaying a circular progress bar.`\n *\n * @demo demo/index.html\n */\nlet CircleProgress = Polymer({\n  _template: html`\n    <custom-style>\n      <style is=\"custom-style\" include=\"paper-material-styles\">\n        :host {\n          @apply --layout-vertical;\n          @apply --layout-center-center;\n          position: relative;\n          width: var(--circle-progress-width, 64px);\n          height: var(--circle-progress-height, 64px);\n          margin: 24px;\n          border-radius: 50%;\n        }\n        svg {\n          position: absolute;\n          top: 0;\n          left: 0;\n          display: none;\n        }\n        .circle-background {\n          stroke: var(--circle-progress-bg-stroke-color, --paper-grey-100);\n        }\n        .circle-foreground {\n          transition: stroke-dashoffset var(--circle-progress-transition, 150ms);\n          stroke: var(--circle-progress-stroke-color, blue);\n          stroke-linecap: var(--circle-progress-stroke-linecap, round);\n        }\n      </style>\n    </custom-style>\n    <svg id=\"circle\" width=\"100%\" height=\"100%\">\n      <circle\n        class=\"circle-background\"\n        r\\$=\"[[_radius]]\"\n        cx\\$=\"[[_cx]]\"\n        cy\\$=\"[[_cy]]\"\n        fill=\"transparent\"\n        stroke-width\\$=\"[[strokeWidth]]\"\n      ></circle>\n      <circle\n        class=\"circle-foreground\"\n        r\\$=\"[[_radius]]\"\n        cx\\$=\"[[_cx]]\"\n        cy\\$=\"[[_cy]]\"\n        fill=\"transparent\"\n        stroke-width\\$=\"[[strokeWidth]]\"\n        stroke-dasharray\\$=\"[[_dasharray]]\"\n        stroke-dashoffset\\$=\"[[_dashoffset]]\"\n        transform\\$=\"[[_transform]]\"\n      ></circle>\n    </svg>\n    <slot></slot>\n  `,\n\n  is: \"circle-progress\",\n  behaviors: [IronResizableBehavior],\n\n  properties: {\n    /**\n     * Value of circular progress bar.\n     */\n    value: {\n      name: \"value\",\n      type: \"Number\",\n      value: 0\n    },\n\n    /**\n     * Maximum of value.\n     */\n    max: {\n      name: \"max\",\n      type: \"Number\",\n      value: 100\n    },\n\n    /**\n     * Stroke width of circle.\n     */\n    strokeWidth: {\n      name: \"strokeWidth\",\n      type: \"Number\",\n      value: 4\n    },\n\n    /**\n     * Starting angle of the progress.\n     */\n    angle: {\n      name: \"angle\",\n      type: \"Number\",\n      value: -90\n    },\n\n    _cx: {\n      name: \"_cx\",\n      type: \"Number\",\n      value: null\n    },\n\n    _cy: {\n      name: \"_cy\",\n      type: \"Number\",\n      value: null\n    },\n\n    _radius: {\n      name: \"_radius\",\n      type: \"Number\",\n      computed: \"_computeRadius(_cx, _cy, strokeWidth)\"\n    },\n\n    _transform: {\n      name: \"_transform\",\n      type: \"String\",\n      computed: \"_computeTransform(angle, _cx, _cy)\"\n    },\n\n    _dasharray: {\n      name: \"_dasharray\",\n      type: \"Number\",\n      computed: \"_computeDashArray(_radius)\"\n    },\n\n    _dashoffset: {\n      name: \"_dashoffset\",\n      type: \"Number\",\n      computed: \"_computeDashOffset(value, max, _dasharray)\"\n    }\n  },\n\n  listeners: {\n    \"iron-resize\": \"_onIronResize\"\n  },\n\n  _computeDashArray: function(radius) {\n    return 2 * Math.PI * radius;\n  },\n\n  _computeDashOffset: function(value, max, dasharray) {\n    return (1 - value / max) * dasharray;\n  },\n\n  _computeRadius: function(cx, cy, strokeWidth) {\n    return cx && cy ? Math.max(0, Math.min(cx, cy) - strokeWidth / 2) : 0;\n  },\n\n  _computeTransform: function(angle, cx, cy) {\n    return cx && cy ? \"rotate(\" + angle + \", \" + cx + \", \" + cy + \")\" : \"\";\n  },\n\n  _onIronResize: function() {\n    if (this.offsetWidth && this.offsetHeight) {\n      this._cx = this.offsetWidth / 2;\n      this._cy = this.offsetHeight / 2;\n      this.$.circle.style.display = \"block\";\n    }\n  }\n});\nexport { CircleProgress };\n"],"names":["CircleProgress","Polymer","_template","html","is","behaviors","IronResizableBehavior","properties","value","name","type","max","strokeWidth","angle","_cx","_cy","_radius","computed","_transform","_dasharray","_dashoffset","listeners","_computeDashArray","radius","Math","PI","_computeDashOffset","dasharray","_computeRadius","cx","cy","min","_computeTransform","_onIronResize","this","offsetWidth","offsetHeight","$","circle","style","display"],"mappings":"u4HAeIA,EAAiBC,UAAQ,CAC3BC,UAAWC,YAoDXC,GAAI,kBACJC,UAAW,CAACC,yBAEZC,WAAY,CAIVC,MAAO,CACLC,KAAM,QACNC,KAAM,SACNF,MAAO,GAMTG,IAAK,CACHF,KAAM,MACNC,KAAM,SACNF,MAAO,KAMTI,YAAa,CACXH,KAAM,cACNC,KAAM,SACNF,MAAO,GAMTK,MAAO,CACLJ,KAAM,QACNC,KAAM,SACNF,OAAQ,IAGVM,IAAK,CACHL,KAAM,MACNC,KAAM,SACNF,MAAO,MAGTO,IAAK,CACHN,KAAM,MACNC,KAAM,SACNF,MAAO,MAGTQ,QAAS,CACPP,KAAM,UACNC,KAAM,SACNO,SAAU,yCAGZC,WAAY,CACVT,KAAM,aACNC,KAAM,SACNO,SAAU,sCAGZE,WAAY,CACVV,KAAM,aACNC,KAAM,SACNO,SAAU,8BAGZG,YAAa,CACXX,KAAM,cACNC,KAAM,SACNO,SAAU,+CAIdI,UAAW,eACM,iBAGjBC,kBAAmB,SAASC,UACnB,EAAIC,KAAKC,GAAKF,GAGvBG,mBAAoB,SAASlB,EAAOG,EAAKgB,UAC/B,EAAInB,EAAQG,GAAOgB,GAG7BC,eAAgB,SAASC,EAAIC,EAAIlB,UACxBiB,GAAMC,EAAKN,KAAKb,IAAI,EAAGa,KAAKO,IAAIF,EAAIC,GAAMlB,EAAc,GAAK,GAGtEoB,kBAAmB,SAASnB,EAAOgB,EAAIC,UAC9BD,GAAMC,EAAK,UAAYjB,EAAQ,KAAOgB,EAAK,KAAOC,EAAK,IAAM,IAGtEG,cAAe,WACTC,KAAKC,aAAeD,KAAKE,oBACtBtB,IAAMoB,KAAKC,YAAc,OACzBpB,IAAMmB,KAAKE,aAAe,OAC1BC,EAAEC,OAAOC,MAAMC,QAAU"}