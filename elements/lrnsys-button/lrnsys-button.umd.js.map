{"version":3,"file":"lrnsys-button.umd.js","sources":["lrnsys-button.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { SimpleColors } from \"@lrnwebcomponents/simple-colors/simple-colors.js\";\n/**\n * `lrnsys-button`\n * `A simple button for use in system`\n * @demo demo/index.html\n */\nclass LrnsysButton extends PolymerElement {\n  constructor() {\n    super();\n    import(\"@polymer/paper-button/paper-button.js\");\n    import(\"@polymer/iron-icons/iron-icons.js\");\n    import(\"@polymer/paper-tooltip/paper-tooltip.js\");\n  }\n  static get template() {\n    return html`\n    <style>\n      :host {\n        display: block;\n        @apply --paper-font-common-base;\n        @apply --paper-button;\n        --lrnsys-button-height: 48px;\n      }\n      a {\n        text-decoration: none;\n        display: block;\n        color: #000000;\n        display: flex;\n      }\n      paper-button {\n        padding: 0;\n        margin: 0;\n        min-width: 0.16px;\n        height: inherit;\n        -webkit-justify-content: flex-start;\n        justify-content: flex-start;\n        align-items: center;\n        width: 100%;\n        text-transform: unset;\n        border-radius: unset;\n        display: flex;\n      }\n      paper-button iron-icon {\n        height: var(--lrnsys-button-height);\n        margin: 0 4px;\n      }\n      paper-button iron-icon:first-child {\n        margin: 0 4px 0 0;\n      }\n      paper-button iron-icon:last-child {\n        margin: 0 0 0 4px;\n      }\n      paper-button div.inner {\n        height: var(--lrnsys-button-height);\n        line-height: var(--lrnsys-button-height);\n        display: flex;\n        padding: 0 16px;\n      }\n      paper-button span.label {\n        height: var(--lrnsys-button-height);\n        line-height: var(--lrnsys-button-height);\n      }\n      .no-margin {\n        margin: 0 !important;\n      }\n      .no-right-padding {\n        padding-right: 0 !important;\n      }\n      .no-left-padding {\n        padding-left: 0 !important;\n      }\n    </style>  \n    <a\n      tabindex=\"-1\"\n      id=\"lrnsys-button-link\"\n      href\\$=\"[[showHref]]\"\n      data-prefetch-hover\\$=\"[[prefetch]]\"\n      target\\$=\"[[target]]\"\n    >\n      <paper-button\n        id=\"button\"\n        title=\"[[alt]]\"\n        raised=\"[[raised]]\"\n        style$=\"background-color:[[hexColor]];color:[[textHexColor]];\"\n        class\\$=\"[[buttonClass]]\"\n        disabled\\$=\"[[disabled]]\"\n      >\n        <div class\\$=\"inner [[innerClass]]\">\n          <iron-icon\n            icon=\"[[icon]]\"\n            id=\"icon\"\n            class\\$=\"[[iconClass]]\"\n            hidden\\$=\"[[!icon]]\"\n          ></iron-icon>\n          <span class=\"label\" hidden\\$=\"[[!label]]\"> [[label]] </span>\n          <slot></slot>\n        </div>\n      </paper-button>\n    </a>\n    <paper-tooltip\n      for=\"lrnsys-button-link\"\n      animation-delay=\"0\"\n      hidden\\$=\"[[!alt]]\"\n      >[[alt]]</paper-tooltip\n    >`;\n  }\n\n  static get tag() {\n    return \"lrnsys-button\";\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Standard href pass down\n       */\n      href: {\n        type: String,\n        value: \"#\",\n        reflectToAttribute: true\n      },\n      showHref: {\n        type: String,\n        value: false,\n        reflectToAttribute: true,\n        computed: \"_getShowHref(href,disabled)\"\n      },\n      /**\n       * If the button should be visually lifted off the UI.\n       */\n      raised: {\n        type: Boolean,\n        reflectToAttribute: true\n      },\n      /**\n       * Label to place in the text area\n       */\n      label: {\n        type: String,\n        value: \"\"\n      },\n      /**\n       * Support for target to open in new windows.\n       */\n      target: {\n        type: String,\n        value: \"\"\n      },\n      /**\n       * iron-icon to use (with iconset if needed)\n       */\n      icon: {\n        type: String,\n        value: false\n      },\n      /**\n       * Classes to add / subtract based on the item being hovered.\n       */\n      hoverClass: {\n        type: String\n      },\n      /**\n       * Button class.\n       */\n      buttonClass: {\n        type: String\n      },\n      /**\n       * Icon class in the event you want it to look different from the text.\n       */\n      iconClass: {\n        type: String\n      },\n      /**\n       * Inner container classes.\n       */\n      innerClass: {\n        type: String\n      },\n      /**\n       * Class for the color\n       */\n      hexColor: {\n        type: String,\n        computed: \"_getHexColor(color)\"\n      },\n      /**\n       * Color class work to apply\n       */\n      color: {\n        type: String,\n        value: \"blue\",\n        reflectToAttribute: true\n      },\n      /**\n       * Class for the color\n       */\n      textHexColor: {\n        type: String,\n        computed: \"_getHexColor(textColor)\"\n      },\n      /**\n       * materializeCSS color class for text\n       */\n      textColor: {\n        type: String\n      },\n      /**\n       * Allow for prefetch data on hover\n       */\n      prefetch: {\n        type: String\n      },\n      /**\n       * Alt via tooltip.\n       */\n      alt: {\n        type: String\n      },\n      /**\n       * Disabled state.\n       */\n      disabled: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Tracks if focus state is applied\n       */\n      focusState: {\n        type: Boolean,\n        value: false\n      }\n    };\n  }\n  _getHexColor(color) {\n    let name = color.replace(\"-text\", \"\");\n    let tmp = new SimpleColors();\n    if (tmp.colors[name]) {\n      return tmp.colors[name][6];\n    }\n    return \"#000000\";\n  }\n  /**\n   * attached life cycle\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.addEventListener(\"mousedown\", this.tapEventOn.bind(this));\n    this.addEventListener(\"mouseover\", this.tapEventOn.bind(this));\n    this.addEventListener(\"mouseout\", this.tapEventOff.bind(this));\n    this.shadowRoot.querySelector(\"#button\").addEventListener(\n      \"focused-changed\",\n      this.focusToggle.bind(this)\n    );\n  }\n  /**\n   * detached event listener\n   */\n  disconnectedCallback() {\n    this.removeEventListener(\"mousedown\", this.tapEventOn.bind(this));\n    this.removeEventListener(\"mouseover\", this.tapEventOn.bind(this));\n    this.removeEventListener(\"mouseout\", this.tapEventOff.bind(this));\n    this.shadowRoot.querySelector(\"#button\").removeEventListener(\n      \"focused-changed\",\n      this.focusToggle.bind(this)\n    );\n    super.disconnectedCallback();\n  }\n\n  /**\n   * Generate the pass down href if it exists. This helps\n   * ensure that if a button is disabled it won't do anything\n   * even if it has a resource reference.\n   */\n  _getShowHref(href, disabled) {\n    if (href && !disabled) {\n      return href;\n    }\n  }\n\n  /**\n   * Class processing on un-tap / hover\n   */\n  tapEventOn(e) {\n    let root = this;\n    if (typeof root.hoverClass !== typeof undefined && !root.disabled) {\n      // break class into array\n      var classes = root.hoverClass.split(\" \");\n      // run through each and add or remove classes\n      classes.forEach(function(item, index) {\n        if (item != \"\") {\n          root.shadowRoot.querySelector(\"#button\").classList.add(item);\n          if (item.indexOf(\"-\") != -1) {\n            root.shadowRoot.querySelector(\"#icon\").classList.add(item);\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Undo class processing on un-tap / hover\n   */\n  tapEventOff(e) {\n    let root = this;\n    if (typeof root.hoverClass !== typeof undefined && !root.disabled) {\n      // break class into array\n      var classes = root.hoverClass.split(\" \");\n      // run through each and add or remove classes\n      classes.forEach(function(item, index) {\n        if (item != \"\") {\n          root.shadowRoot.querySelector(\"#button\").classList.remove(item);\n          if (item.indexOf(\"-\") != -1) {\n            root.shadowRoot.querySelector(\"#icon\").classList.remove(item);\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Handle toggle for mouse class and manage classList array for paper-button.\n   */\n  focusToggle(e) {\n    // weird but reality... focus event is the button inside of here\n    if (typeof this.hoverClass !== typeof undefined && !this.disabled) {\n      // break class into array\n      var classes = this.hoverClass.split(\" \");\n      // run through each and add or remove classes\n      classes.forEach((item, index) => {\n        if (item != \"\") {\n          if (!this.focusState) {\n            this.shadowRoot.querySelector(\"#button\").classList.add(item);\n            if (item.indexOf(\"-\") != -1) {\n              this.shadowRoot.querySelector(\"#icon\").classList.add(item);\n            }\n          } else {\n            this.shadowRoot.querySelector(\"#button\").classList.remove(item);\n            if (item.indexOf(\"-\") != -1) {\n              this.shadowRoot.querySelector(\"#icon\").classList.remove(item);\n            }\n          }\n        }\n      });\n    }\n    this.focusState = !this.focusState;\n  }\n}\nwindow.customElements.define(LrnsysButton.tag, LrnsysButton);\nexport { LrnsysButton };"],"names":["LrnsysButton","PolymerElement","html","href","type","String","value","reflectToAttribute","showHref","computed","raised","Boolean","label","target","icon","hoverClass","buttonClass","iconClass","innerClass","hexColor","color","textHexColor","textColor","prefetch","alt","disabled","focusState","name","replace","tmp","SimpleColors","colors","addEventListener","this","tapEventOn","bind","tapEventOff","shadowRoot","querySelector","focusToggle","removeEventListener","e","root","_typeof","split","forEach","item","index","classList","add","indexOf","remove","_this2","window","customElements","define","tag"],"mappings":"g2MAWMA,8KAGK,gDACA,4CACA,mSALgBC,+DAQhBC,8CA6FA,yDAIA,CAILC,KAAM,CACJC,KAAMC,OACNC,MAAO,IACPC,oBAAoB,GAEtBC,SAAU,CACRJ,KAAMC,OACNC,OAAO,EACPC,oBAAoB,EACpBE,SAAU,+BAKZC,OAAQ,CACNN,KAAMO,QACNJ,oBAAoB,GAKtBK,MAAO,CACLR,KAAMC,OACNC,MAAO,IAKTO,OAAQ,CACNT,KAAMC,OACNC,MAAO,IAKTQ,KAAM,CACJV,KAAMC,OACNC,OAAO,GAKTS,WAAY,CACVX,KAAMC,QAKRW,YAAa,CACXZ,KAAMC,QAKRY,UAAW,CACTb,KAAMC,QAKRa,WAAY,CACVd,KAAMC,QAKRc,SAAU,CACRf,KAAMC,OACNI,SAAU,uBAKZW,MAAO,CACLhB,KAAMC,OACNC,MAAO,OACPC,oBAAoB,GAKtBc,aAAc,CACZjB,KAAMC,OACNI,SAAU,2BAKZa,UAAW,CACTlB,KAAMC,QAKRkB,SAAU,CACRnB,KAAMC,QAKRmB,IAAK,CACHpB,KAAMC,QAKRoB,SAAU,CACRrB,KAAMO,QACNL,OAAO,GAKToB,WAAY,CACVtB,KAAMO,QACNL,OAAO,8CAIAc,OACPO,EAAOP,EAAMQ,QAAQ,QAAS,IAC9BC,EAAM,IAAIC,sBACVD,EAAIE,OAAOJ,GACNE,EAAIE,OAAOJ,GAAM,GAEnB,iHAOFK,iBAAiB,YAAaC,KAAKC,WAAWC,KAAKF,YACnDD,iBAAiB,YAAaC,KAAKC,WAAWC,KAAKF,YACnDD,iBAAiB,WAAYC,KAAKG,YAAYD,KAAKF,YACnDI,WAAWC,cAAc,WAAWN,iBACvC,kBACAC,KAAKM,YAAYJ,KAAKF,2DAOnBO,oBAAoB,YAAaP,KAAKC,WAAWC,KAAKF,YACtDO,oBAAoB,YAAaP,KAAKC,WAAWC,KAAKF,YACtDO,oBAAoB,WAAYP,KAAKG,YAAYD,KAAKF,YACtDI,WAAWC,cAAc,WAAWE,oBACvC,kBACAP,KAAKM,YAAYJ,KAAKF,qGAUb9B,EAAMsB,MACbtB,IAASsB,SACJtB,qCAOAsC,OACLC,EAAOT,mBACPU,EAAOD,EAAK3B,aAAoC2B,EAAKjB,UAEzCiB,EAAK3B,WAAW6B,MAAM,KAE5BC,QAAQ,SAASC,EAAMC,GACjB,IAARD,IACFJ,EAAKL,WAAWC,cAAc,WAAWU,UAAUC,IAAIH,IAC7B,GAAtBA,EAAKI,QAAQ,MACfR,EAAKL,WAAWC,cAAc,SAASU,UAAUC,IAAIH,0CAUnDL,OACNC,EAAOT,mBACPU,EAAOD,EAAK3B,aAAoC2B,EAAKjB,UAEzCiB,EAAK3B,WAAW6B,MAAM,KAE5BC,QAAQ,SAASC,EAAMC,GACjB,IAARD,IACFJ,EAAKL,WAAWC,cAAc,WAAWU,UAAUG,OAAOL,IAChC,GAAtBA,EAAKI,QAAQ,MACfR,EAAKL,WAAWC,cAAc,SAASU,UAAUG,OAAOL,0CAStDL,4BAENE,EAAOV,KAAKlB,aAAoCkB,KAAKR,UAEzCQ,KAAKlB,WAAW6B,MAAM,KAE5BC,QAAQ,SAACC,EAAMC,GACT,IAARD,IACGM,EAAK1B,YAMR0B,EAAKf,WAAWC,cAAc,WAAWU,UAAUG,OAAOL,IAChC,GAAtBA,EAAKI,QAAQ,MACfE,EAAKf,WAAWC,cAAc,SAASU,UAAUG,OAAOL,KAP1DM,EAAKf,WAAWC,cAAc,WAAWU,UAAUC,IAAIH,IAC7B,GAAtBA,EAAKI,QAAQ,MACfE,EAAKf,WAAWC,cAAc,SAASU,UAAUC,IAAIH,YAW1DpB,YAAcO,KAAKP,gDAG5B2B,OAAOC,eAAeC,OAAOvD,EAAawD,IAAKxD"}