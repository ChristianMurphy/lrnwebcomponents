{"version":3,"file":"extensible-toolbar.umd.js","sources":["lib/extensible-toolbar-styles.js","lib/extensible-toolbar-button-styles.js","lib/extensible-toolbar-group.js","lib/extensible-toolbar-button.js","lib/extensible-toolbar-more-button.js","extensible-toolbar.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n *\n * `extensible-toolbar-styles`\n * `a shared set of styles for extensible-toolbar`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @pseudoElement\n * @polymer\n * @demo demo/index.html\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nconst styleElement = document.createElement(\"dom-module\");\n\nconst css = html`\n  <style>\n    :host {\n      --extensible-toolbar-bg: #fafafa;\n      --extensible-toolbar-button-color: #444;\n      --extensible-toolbar-border-color: #ddd;\n      --extensible-toolbar-border: 1px solid\n        var(--extensible-toolbar-border-color, #ddd);\n      --extensible-toolbar-button-border: transparent;\n      --extensible-toolbar-button-disabled-color: #666;\n      --extensible-toolbar-button-disabled-bg: transparent;\n      --extensible-toolbar-button-toggled-color: #222;\n      --extensible-toolbar-button-toggled-bg: #ddd;\n      --extensible-toolbar-button-hover-color: #000;\n      --extensible-toolbar-button-hover-bg: #f0f0f0;\n      --extensible-toolbar-picker-border: #fafafa;\n      --extensible-toolbar-selection-bg: #b3d9ff;\n    }\n  </style>\n`;\nstyleElement.appendChild(css);\n\nstyleElement.register(\"extensible-toolbar-styles\");\n\nwindow.ExtensibleToolbarStyleManager = {};\nwindow.ExtensibleToolbarStyleManager.instance = null;\n/**\n * Checks to see if there is an instance available, and if not appends one\n */\nwindow.ExtensibleToolbarStyleManager.requestAvailability = function() {\n  if (window.ExtensibleToolbarStyleManager.instance == null) {\n    window.ExtensibleToolbarStyleManager.instance = document.createElement(\n      \"style\"\n    );\n    window.ExtensibleToolbarStyleManager.instance.setAttribute(\n      \"is\",\n      \"custom-style\"\n    );\n    window.ExtensibleToolbarStyleManager.instance.setAttribute(\n      \"include\",\n      \"extensible-toolbar-styles\"\n    );\n    document.head.append(window.ExtensibleToolbarStyleManager.instance);\n  }\n  return window.ExtensibleToolbarStyleManager.instance;\n};\n","/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n *\n * `extensible-toolbar-button-styles`\n * `a shared set of styles for extensible-toolbar toolbar items`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @pseudoElement\n * @polymer\n * @demo demo/index.html\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nconst styleElement = document.createElement(\"dom-module\");\n\nconst css = html`\n  <style>\n    :host {\n      --extensible-toolbar-button-min-width: 24px;\n      --extensible-toolbar-button-height: 24px;\n      --extensible-toolbar-button-margin: 3px;\n      --extensible-toolbar-button-padding: 0;\n      --simple-picker-option-size: 18px;\n      --simple-picker-color: var(--extensible-toolbar-button-color);\n      --simple-picker-background-color: var(--extensible-toolbar-bg);\n      --simple-picker-sample-border-color: var(--extensible-toolbar-bg);\n      --simple-picker-border-color: var(--extensible-toolbar-border-color);\n      --simple-picker-icon-transform: rotate(0deg);\n      --simple-picker-expanded-icon-transform: rotate(0deg);\n    }\n    :host([hidden]) {\n      display: none;\n    }\n    :host .offscreen {\n      position: absolute;\n      left: -999999px;\n      top: 0;\n      height: 0;\n      width: 0;\n      overflow: hidden;\n    }\n    :host paper-tooltip {\n      z-index: 2;\n    }\n    :host .toolbar-button {\n      text-transform: unset;\n      transition: all 0.5s;\n      color: var(--extensible-toolbar-button-color);\n      border-color: var(--extensible-toolbar-border-color);\n      @apply --extensible-toolbar-button;\n    }\n    :host([disabled]) .toolbar-button {\n      cursor: not-allowed;\n      color: var(--extensible-toolbar-button-disabled-color);\n      background-color: var(--extensible-toolbar-button-disabled-bg);\n      @apply --extensible-toolbar-button-disabled;\n    }\n    :host .toolbar-button[toggled] {\n      color: var(--extensible-toolbar-button-toggled-color);\n      background-color: var(--extensible-toolbar-button-toggled-bg);\n      @apply --extensible-toolbar-button-toggled;\n    }\n    :host .toolbar-button:focus,\n    :host .toolbar-button:hover {\n      color: var(--extensible-toolbar-button-hover-color);\n      background-color: var(--extensible-toolbar-button-hover-bg);\n    }\n    :host .toolbar-button #icon:not([icon]) {\n      display: none;\n    }\n    :host .group-label {\n      margin: auto 5px auto 0;\n    }\n  </style>\n`;\nstyleElement.appendChild(css);\n\nstyleElement.register(\"extensible-toolbar-button-styles\");\n","/**\n * Copyright 2019 Penn State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"./extensible-toolbar-button-styles.js\";\n/**\n * `extensible-toolbar-group`\n * ` a button group for extensible-toolbar (custom buttons can extend this)`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n */\nclass ExtensibleToolbarGroup extends PolymerElement {\n  // render function\n  static get template() {\n    return html`\n      <style include=\"extensible-toolbar-button-styles\"></style>\n      <div class=\"group-label\" hidden$=\"[[!label]]\">[[label]]</div>\n      <slot></slot>\n    `;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * The minimum breakpoint where the group appears, expressed as `xs`, `sm`, `md`, `lg`, or `xl`\n       */\n      collapsedUntil: {\n        name: \"collapsedUntil\",\n        type: String,\n        value: \"xs\",\n        reflectToAttribute: true\n      },\n      /**\n       * Label for the group.\n       */\n      label: {\n        name: \"label\",\n        type: String,\n        value: null\n      }\n    };\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"extensible-toolbar-group\";\n  }\n}\nwindow.customElements.define(\n  ExtensibleToolbarGroup.tag,\n  ExtensibleToolbarGroup\n);\nexport { ExtensibleToolbarGroup };\n","/**\n * Copyright 2019 Penn State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"@polymer/paper-button/paper-button.js\";\nimport \"@polymer/paper-tooltip/paper-tooltip.js\";\nimport \"@polymer/iron-a11y-keys/iron-a11y-keys.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"./extensible-toolbar-button-styles.js\";\n/**\n * `extensible-toolbar-button`\n * `a button for rich text editor (custom buttons can extend this)`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n */\nclass ExtensibleToolbarButton extends PolymerElement {\n  // render function\n  static get template() {\n    return html`\n      <style include=\"extensible-toolbar-button-styles\">\n        :host .toolbar-button {\n          min-width: var(--extensible-toolbar-button-min-width);\n          height: var(--extensible-toolbar-button-height);\n          margin: var(--extensible-toolbar-button-margin);\n          padding: var(--extensible-toolbar-button-padding);\n        }\n      </style>\n      <iron-a11y-keys\n        id=\"a11y\"\n        target=\"[[__a11y]]\"\n        keys=\"enter\"\n        on-keys-pressed=\"_handleButton\"\n      >\n      </iron-a11y-keys>\n      <paper-button\n        id=\"button\"\n        class=\"toolbar-button\"\n        disabled$=\"[[disabled]]\"\n        controls$=\"[[controls]]\"\n        on-click=\"_handleButton\"\n        tabindex=\"0\"\n        toggled$=\"[[toggled]]\"\n      >\n        <iron-icon id=\"icon\" aria-hidden icon$=\"[[__icon]]\"></iron-icon>\n        <span id=\"label\" class$=\"[[labelStyle]]\">[[__label]]</span>\n      </paper-button>\n      <paper-tooltip id=\"tooltip\" aria-hidden for=\"button\"\n        >[[__label]]</paper-tooltip\n      >\n    `;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * The minimum breakpoint where the button appears, expressed as `xs`, `sm`, `md`, `lg`, or `xl`\n       */\n      collapsedUntil: {\n        name: \"collapsedUntil\",\n        type: String,\n        value: \"xs\",\n        reflectToAttribute: true\n      },\n      /**\n       * The `id` of the element that the toolbar controls.\n       */\n      controls: {\n        name: \"controls\",\n        type: String\n      },\n\n      /**\n       * Is the button disabled? Default is false.\n       */\n      disabled: {\n        name: \"disabled\",\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * Optional iron icon name for the button.\n       */\n      icon: {\n        name: \"icon\",\n        type: String,\n        value: null\n      },\n\n      /**\n       * Label for the icon.\n       */\n      label: {\n        name: \"label\",\n        type: String,\n        value: null\n      },\n\n      /**\n       * Hide the label offscreen?\n       */\n      labelStyle: {\n        name: \"labelStyle\",\n        type: String,\n        computed: \"_labelStyle(icon,showTextLabel)\",\n        readOnly: true\n      },\n\n      /**\n       * Optional space-sperated list of keyboard shortcuts for the editor\n       * to fire this button, see iron-a11y-keys for more info.\n       */\n      shortcutKeys: {\n        name: \"shortcutKeys\",\n        type: String,\n        value: null\n      },\n\n      /**\n       * Show text label even if an icon is named?\n       */\n      showTextLabel: {\n        name: \"showTextLabel\",\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * Is this button toggled?\n       */\n      toggled: {\n        name: \"toggled\",\n        type: Boolean,\n        value: false,\n        notify: true\n      },\n\n      /**\n       * Optional iron icon name for the button if it is toggled.\n       */\n      toggledIcon: {\n        name: \"toggledIcon\",\n        type: String,\n        value: null\n      },\n\n      /**\n       * Label for the icon, if button is toggled.\n       */\n      toggledLabel: {\n        name: \"toggledLabel\",\n        type: String,\n        value: null\n      },\n\n      /**\n       * The label for the button based on its toggled state\n       */\n      __label: {\n        name: \"__label\",\n        type: String,\n        computed: \"_getLabel(toggled,label,toggledLabel)\",\n        notify: true\n      },\n\n      /**\n       * The label for the button based on its toggled state\n       */\n      __icon: {\n        name: \"__icon\",\n        type: String,\n        computed: \"_getIcon(toggled,icon,toggledIcon)\",\n        notify: true\n      }\n    };\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"extensible-toolbar-button\";\n  }\n\n  /**\n   * life cycle, element is ready\n   */\n  ready() {\n    super.ready();\n    let root = this;\n    root.addEventListener(\"keypress\", function(e) {\n      e.preventDefault();\n    });\n  }\n\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.__a11y = this.$.button;\n  }\n\n  /**\n   * life cycle, element is detatched\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n  }\n\n  /**\n   * excutes the button's command\n   */\n  buttonAction() {\n    this.dispatchEvent(\n      new CustomEvent(\"button-action\", {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        detail: this\n      })\n    );\n  }\n\n  /**\n   * Handles button tap\n   */\n  _handleButton(e) {\n    e.preventDefault();\n    console.log(\"_handleButton\", e);\n    this.buttonAction();\n  }\n\n  /**\n   * gets the label based on whether the button is toggled\n   *\n   * @param {boolean} toggled if the button is toggled\n   * @param {string} label the default label\n   * @param {string} toggledLabel the label when toggled\n   * @returns {string} the label based on whether or not the button is toggled\n   *\n   */\n  _getLabel(toggled, label, toggledLabel) {\n    return toggled && toggledLabel !== null ? toggledLabel : label;\n  }\n\n  /**\n   * gets the icon based on whether the button is toggled\n   *\n   * @param {boolean} toggled if the button is toggled\n   * @param {string} icon the default icon\n   * @param {string} toggledIcon the label when toggled\n   * @returns {string} the icon based on whether or not the button is toggled\n   *\n   */\n  _getIcon(toggled, icon, toggledIcon) {\n    return toggled && toggledIcon !== null ? toggledIcon : icon;\n  }\n\n  /**\n   * Handles keys the same way a button is handled\n   * @param {event} e the  event\n   */\n  _keysPressed(e) {\n    e.preventDefault();\n    this._handleButton(e);\n  }\n\n  /**\n   * Determines if an iron icon has been named for the button.\n   *\n   * @param {string} the name of the icon\n   * @returns {boolean} if an icon is named\n   */\n  _labelStyle(icon, showTextLabel) {\n    return icon !== undefined &&\n      icon !== null &&\n      icon !== \"\" &&\n      showTextLabel === false\n      ? \"offscreen\"\n      : null;\n  }\n}\nwindow.customElements.define(\n  ExtensibleToolbarButton.tag,\n  ExtensibleToolbarButton\n);\nexport { ExtensibleToolbarButton };\n","/**\n * Copyright 2019 Penn State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { ExtensibleToolbarButton } from \"./extensible-toolbar-button.js\";\n/**\n * `extensible-toolbar-more-button`\n * `a more button to toggle collapsed buttons in the rich text editor`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n */\nclass ExtensibleToolbarMoreButton extends ExtensibleToolbarButton {\n  constructor() {\n    super();\n    this.label = \"More buttons\";\n    this.labelToggled = \"Fewer buttons\";\n  }\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * Can this button toggle?\n       */\n      toggled: {\n        name: \"toggled\",\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * The maximum size where all of the buttons display\n       */\n      collapseMax: {\n        name: \"collapseMax\",\n        type: String,\n        value: \"xs\",\n        reflectToAttribute: true\n      }\n    };\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"extensible-toolbar-more-button\";\n  }\n\n  /**\n   * Fires a button tap event\n   */\n  _handleButton(e) {\n    this.toggled = !this.toggled;\n  }\n}\nwindow.customElements.define(\n  ExtensibleToolbarMoreButton.tag,\n  ExtensibleToolbarMoreButton\n);\nexport { ExtensibleToolbarMoreButton };\n","/**\n * Copyright 2019 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { AbsolutePositionBehavior } from \"@lrnwebcomponents/absolute-position-behavior/absolute-position-behavior.js\";\nimport \"@lrnwebcomponents/responsive-utility/responsive-utility.js\";\nimport \"./lib/extensible-toolbar-styles.js\";\nimport \"./lib/extensible-toolbar-group.js\";\nimport \"./lib/extensible-toolbar-button.js\";\nimport \"./lib/extensible-toolbar-more-button.js\";\nimport \"./lib/extensible-toolbar-button-styles.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"@polymer/iron-icons/editor-icons.js\";\nimport \"@polymer/iron-icons/image-icons.js\";\nimport \"@lrnwebcomponents/md-extra-icons/md-extra-icons.js\";\n\n/**\n * `extensible-toolbar`\n * `a toolbar UI that can be customized and extended`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass ExtensibleToolbar extends AbsolutePositionBehavior {\n  \n  // render function\n  static get template() {\n    return html`\n<style>:host {\n  display: block;\n}\n:host([hidden]) {\n  display: none;\n}\n:host #toolbar {\n  width: 100%;\n  display: flex;\n  opacity: 1;\n  z-index: 1;\n  margin: 0;\n  align-items: stretch;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  background-color: var(--extensible-toolbar-bg);\n  border: var(--extensible-toolbar-border);\n  font-size: 12px;\n  transition: all 0.5s;\n  @apply --extensible-toolbar;\n}\n:host #toolbar[aria-hidden] {\n  visibility: hidden;\n  opacity: 0;\n  height: 0;\n}\n:host #toolbar .toolbar-group {\n  display: flex;\n  flex: 1 1 auto;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: stretch;\n  padding: 0 3px;\n  @apply --extensible-toolbar-group;\n}\n:host #toolbar .toolbar-group:not(:last-of-type) {\n  margin-right: 3px;\n  border-right: var(--extensible-toolbar-border);\n  @apply --extensible-toolbar-divider;\n}\n:host #toolbar .button {\n  display: flex;\n  flex: 0 0 auto;\n  align-items: stretch;\n}\n:host #toolbar #morebutton {\n  flex: 1 0 auto;\n  justify-content: flex-end;\n}\n\n:host([responsive-size=\"xs\"]) #morebutton[collapse-max=\"xs\"],\n:host([responsive-size=\"sm\"]) #morebutton[collapse-max*=\"s\"],\n:host([responsive-size=\"md\"]) #morebutton:not([collapse-max*=\"l\"]),\n:host([responsive-size=\"lg\"]) #morebutton:not([collapse-max=\"xl\"]),\n:host([responsive-size=\"xl\"]) #morebutton,\n\n:host([responsive-size=\"xs\"]) #toolbar:not([aria-expanded]) *[collapsed-until*=\"m\"],\n:host([responsive-size=\"xs\"]) #toolbar:not([aria-expanded]) *[collapsed-until*=\"l\"],\n:host([responsive-size=\"sm\"]) #toolbar:not([aria-expanded]) *[collapsed-until=\"md\"],\n:host([responsive-size=\"sm\"]) #toolbar:not([aria-expanded]) *[collapsed-until*=\"l\"],\n:host([responsive-size=\"md\"]) #toolbar:not([aria-expanded]) *[collapsed-until*=\"l\"],\n:host([responsive-size=\"lg\"]) #toolbar:not([aria-expanded]) *[collapsed-until=\"xl\"] {\n  display: none;\n}</style>\n<style include=\"extensible-toolbar-styles extensible-toolbar-button-styles\"></style>\n<div id=\"toolbar\"\n  aria-live=\"polite\"\n  aria-hidden$=\"[[!controls]]\"\n  aria-expanded$=\"[[!collapsed]]\">\n    <extensible-toolbar-more-button\n      id=\"morebutton\"\n      auto$=\"[[floating]]\"\n      class=\"button\"\n      collapse-max=\"[[__collapseMax]]\"\n      controls=\"toolbar\"\n      fit-to-visible-bounds\n      for$=\"[[controls]]\"\n      icon$=\"[[moreIcon]]\"\n      label$=\"[[moreLabel]]\"\n      show-text-label$=\"[[moreShowTextLabel]]\"\n      label-toggled$=\"[[moreLabelToggled]]\"\n      position=\"[[_getPosition(positionBelow)]]\"\n      toggled$=\"[[!collapsed]]\"\n      on-click=\"_toggleMore\">\n    </extensible-toolbar-more-button>\n</div>`;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n  /**\n   * The editor buttons, as determined by `config`.\n   */\n  \"buttons\": {\n    \"name\": \"buttons\",\n    \"type\": \"Array\",\n    \"computed\": \"_getButtons(config)\"\n  },\n  /**\n   * Is the toolbar collapsed?\n   */\n  \"collapsed\": {\n    \"name\": \"collapsed\",\n    \"type\": \"Boolean\",\n    \"value\": true\n  },\n\n  /**\n   * Custom configuration of toolbar groups and buttons.\n   * (See default value for example using default configuration.)\n   */\n  \"config\": {\n    \"name\": \"config\",\n    \"type\": \"Object\",\n    \"value\": []\n  },\n\n  /**\n   * The `id` of the object the extensible toolbar controls.\n   */\n  \"controls\": {\n    \"name\": \"controls\",\n    \"type\": \"String\",\n    \"value\": null\n  },\n\n  /**\n   * The `extensible-toolbar` element that uis currently in `contenteditable` mode\n   */\n  \"editor\": {\n    \"name\": \"editor\",\n    \"type\": \"Object\",\n    \"value\": null\n  },\n  /**\n   * float the toolbar above the object it controls?\n   */\n  \"floating\": {\n    \"name\": \"floating\",\n    \"type\": \"Boolean\",\n    \"value\": false,\n    \"reflectToAttribute\": true\n  },\n  /**\n   * whether or not the toolbar is hidden\n   */\n  \"hidden\": {\n    \"name\": \"hidden\",\n    \"type\": \"Boolean\",\n    \"value\": false,\n    \"reflectToAttribute\": true\n  },\n  /**\n   * The icon for the more button.\n   */\n  \"moreIcon\": {\n    \"name\": \"moreIcon\",\n    \"type\": \"String\",\n    \"value\": \"more-vert\"\n  },\n  /**\n   * The label for the more button.\n   */\n  \"moreLabel\": {\n    \"name\": \"moreLabel\",\n    \"type\": \"String\",\n    \"value\": \"More Buttons\"\n  },\n  /**\n   * The label for the more button when toggled.\n   */\n  \"moreLabelToggled\": {\n    \"name\": \"moreLabelToggled\",\n    \"type\": \"String\",\n    \"value\": \"Fewer Buttons\"\n  },\n  /**\n   * The show text label for more button.\n   */\n  \"moreShowTextLabel\": {\n    \"name\": \"moreShowTextLabel\",\n    \"type\": \"Boolean\",\n    \"value\": false\n  },\n  /**\n   * position the toolbar below the object it contrls\n   */\n  \"positionBelow\": {\n    \"name\": \"positionBelow\",\n    \"type\": \"Boolean\",\n    \"value\": false,\n    \"reflectToAttribute\": true\n  },\n  /**\n   * The the size of the toolbar.\n   */\n  \"responsiveSize\": {\n    \"name\": \"responsiveSize\",\n    \"type\": \"String\",\n    \"value\": \"xs\",\n    \"reflectToAttribute\": true\n  },\n  /**\n   * Should the toolbar stick to the top so that it is always visible?\n   */\n  \"sticky\": {\n    \"name\": \"sticky\",\n    \"type\": \"Boolean\",\n    \"value\": false,\n    \"reflectToAttribute\": true\n  },\n  /**\n   * The maximum size where all of the buttons display\n   */\n  \"__collapseMax\": {\n    \"name\": \"__collapseMax\",\n    \"type\": \"String\",\n    \"value\": \"xs\"\n  },\n\n  /**\n   * Optional space-sperated list of keyboard shortcuts for the editor\n   * to fire this button, see iron-a11y-keys for more info.\n   */\n  \"__shortcutKeys\": {\n    \"name\": \"__shortcutKeys\",\n    \"type\": \"Array\",\n    \"value\": []\n  }\n}\n;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"extensible-toolbar\";\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    /** turn on responsive options */\n    let root = this;\n    window.ResponsiveUtility.requestAvailability();\n    this.addEventListener(\"button-action\", e => {\n      this.dispatchEvent(\n        new CustomEvent(\"toolbar-action\", {\n          detail: {\n            toolbar: this,\n            button: e.detail\n          }\n        })\n      );\n    });\n    window.dispatchEvent(\n      new CustomEvent(\"responsive-element\", {\n        detail: {\n          element: root,\n          attribute: \"responsive-size\",\n          relativeToParent: true\n        }\n      })\n    );\n  }\n\n  /**\n   * Adds a button to the toolbar\n   *\n   * @param {object} child the child object in the config object\n   * @param {object} parent the parent object in the config object\n   * @returns {object} the button\n   */\n  _addButton(child, parent) {\n    console.log(\"_addButton\", child, parent);\n    let button = document.createElement(child.type),\n      keys = button.shortcutKeys;\n\n    this.set(`__shortcutKeys.${keys}`, button);\n\n    for (var key in child) {\n      button[key] = child[key];\n    }\n    button.setAttribute(\"class\", \"button\");\n    parent.appendChild(button);\n    return button;\n  }\n  /**\n   * Adds a button to the toolbar\n   *\n   * @param {object} child the child object in the config object\n   * @param {object} parent the parent object in the config object\n   * @returns {object} the button\n   */\n  _addGroup(child, parent) {\n    console.log(\"_addGroup\", child, parent);\n    let group = document.createElement(child.type);\n    group.setAttribute(\"class\", \"toolbar-group\");\n\n    for (var key in child) {\n      if (key !== \"buttons\") group[key] = child[key];\n    }\n    parent.appendChild(group);\n    return group;\n  }\n\n  /**\n   * Gets the groups array for the dom-repeat.\n   *\n   * @param {object} config the toolbar buttons config object\n   * @returns {array} the buttons array\n   */\n  _getButtons(config) {\n    let root = this,\n      toolbar = this.$.toolbar,\n      max = 0,\n      sizes = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\"],\n      temp = [];\n    toolbar.innerHTML = \"\";\n    this.set(\"__shortcutKeys\", []);\n    config.forEach(item => {\n      if (item.type === \"extensible-toolbar-group\") {\n        let group = this._addGroup(item, toolbar);\n        max = Math.max(max, sizes.indexOf(item.collapsedUntil));\n        item.buttons.forEach(button => {\n          max = Math.max(max, sizes.indexOf(button.collapsedUntil));\n          temp.push(root._addButton(button, group));\n        });\n        toolbar.appendChild(group);\n      } else {\n        max = Math.max(max, sizes.indexOf(item.collapsedUntil));\n        temp.push(root._addButton(item, toolbar));\n      }\n      this.__collapseMax = sizes[max];\n      toolbar.appendChild(this.$.morebutton);\n    });\n    return temp;\n  }\n  /**\n   * gets the absolute positioning\n   */\n  _getPosition(positionBelow) {\n    return positionBelow ? \"bottom\" : \"top\";\n  }\n\n  /**\n   * when a shortcut key is pressed, fire the keypressed event on the button associated with it\n   * @param {event} e the key event\n   */\n\n  _handleShortcutKeys(e) {\n    let key = e.key;\n    if (e.shiftKey) key = \"shift+\" + key;\n    if (e.altKey) key = \"alt+\" + key;\n    if ((window.navigator.platform === \"MacIntel\" && e.metaKey) || e.ctrlKey) {\n      key = \"ctrl+\" + key;\n    }\n    if (this.__shortcutKeys[key]) this.__shortcutKeys[key]._keysPressed(e);\n  }\n\n  /**\n   * handles toggling the more button\n   */\n  _toggleMore() {\n    this.collapsed = !this.collapsed;\n  }\n}\nwindow.customElements.define(ExtensibleToolbar.tag, ExtensibleToolbar);\nexport { ExtensibleToolbar };\n"],"names":["styleElement","document","createElement","css","html","appendChild","register","window","ExtensibleToolbarStyleManager","instance","requestAvailability","setAttribute","head","append","ExtensibleToolbarGroup","PolymerElement","collapsedUntil","name","type","String","value","reflectToAttribute","label","customElements","define","tag","ExtensibleToolbarButton","this","addEventListener","e","preventDefault","__a11y","$","button","dispatchEvent","CustomEvent","bubbles","cancelable","composed","detail","console","log","buttonAction","toggled","toggledLabel","icon","toggledIcon","_handleButton","showTextLabel","controls","disabled","Boolean","labelStyle","computed","readOnly","shortcutKeys","notify","__label","__icon","ExtensibleToolbarMoreButton","labelToggled","collapseMax","ExtensibleToolbar","AbsolutePositionBehavior","ResponsiveUtility","_this","toolbar","element","attribute","relativeToParent","child","parent","keys","key","set","group","config","root","max","sizes","temp","innerHTML","forEach","item","_this2","_addGroup","Math","indexOf","buttons","push","_addButton","__collapseMax","morebutton","positionBelow","shiftKey","altKey","navigator","platform","metaKey","ctrlKey","__shortcutKeys","_keysPressed","collapsed"],"mappings":"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"}