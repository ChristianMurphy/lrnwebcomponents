{"version":3,"file":"rss-items.umd.js","sources":["rss-items.umd.js"],"sourcesContent":["/**\n * Copyright 2019 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n *\n * Based on https://github.com/TherapyChat/rss-items\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { afterNextRender } from \"@polymer/polymer/lib/utils/render-status.js\";\nimport { HAXWiring } from \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nimport { pathFromUrl } from \"@polymer/polymer/lib/utils/resolve-url.js\";\nimport \"@lrnwebcomponents/es-global-bridge/es-global-bridge.js\";\nimport \"@polymer/iron-ajax/iron-ajax.js\";\nimport \"@polymer/polymer/lib/elements/dom-repeat.js\";\n/**\n * `rss-items`\n * `visualize RSS items`\n * \n * Example:\n  ```html\n  <rss-items\n    url=\"https://content.therapychat.com/rss.xml\"\n    max=\"4\"\n    auto\n  ></rss-items>\n  ```\n * It will retrieve the items from the url automatically.\n   ### Styling\n\n    The following custom properties and mixins are available for styling:\n\n    Custom property | Description | Default\n    ----------------|-------------|----------\n    `--rss-items` | Mixin applied to the component | `{}`\n    `--rss-items-article` | Mixin applied to the articles | `{}`\n    `--rss-items-article-mq-m-up` | Mixin applied to the articles on `min-width: 600px` | `{}`\n    `--rss-items-article-mq-l-up` | Mixin applied to the articles on `min-width: 900px` | `{}`\n    `--rss-items-thumbnail` | Mixin applied to the image thumbnails | `{}`\n    `--rss-items-thumbnail-hover` | Mixin applied to the image thumbnails when hover | `{}`\n    `--rss-items-thumbnail-container` | Mixin applied to the image thumbnails container | `{}`\n    `--rss-items-title` | Mixin applied to the title | `{}`\n    `--rss-items-excerpt` | Mixin applied to the excerpt | `{}`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass RssItems extends PolymerElement {\n  \n  // render function\n  static get template() {\n    return html`\n<style>:host([hidden]) {\n  display: none;\n}\n:host {\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  align-items: flex-start;\n  justify-content: space-between;\n  @apply --rss-items;\n}\n\n:host * {\n  box-sizing: border-box;\n}\n\nh3,\np {\n  margin: 0;\n}\n\na {\n  color: var(--primary-color, inherit);\n  text-decoration: none;\n}\n\narticle {\n  margin-bottom: 2em;\n\n  @apply --rss-items-article;\n}\n\n.thumbnail-container {\n  display: block;\n  overflow: hidden;\n  width: 100%;\n  height: 180px;\n\n  @apply --rss-items-thumbnail-container;\n}\n\n.thumbnail {\n  width: 100%;\n  height: 100%;\n  transition: transform .5s ease-out;\n\n  @apply --rss-items-thumbnail;\n}\n\n.thumbnail-container:hover .thumbnail,\n.thumbnail-container:focus .thumbnail {\n  transform: scale3d(1.3, 1.3, 1);\n\n  @apply --rss-items-thumbnail-hover;\n}\n\n.title {\n  min-height: 3em;\n  margin: 1em 0 .5em;\n\n  @apply --rss-items-title;\n}\n\n.excerpt {\n  min-height: 6em;\n  margin: .5em 0 2em;\n\n  @apply --rss-items-excerpt;\n}\n\n@media (max-width: 599px) {\n  .title,\n  .excerpt {\n    min-height: 0;\n  }\n}\n\n@media (min-width: 600px) {\n  article {\n    flex: 1 1 40%;\n    margin-right: 2em;\n\n    @apply --rss-items-article-mq-m-up;\n  }\n\n  article:nth-of-type(2n),\n  article:last-of-type {\n    margin-right: 0;\n  }\n}\n\n@media (min-width: 900px) {\n  article {\n    flex: 1 1 30%;\n\n    @apply --rss-items-article-mq-l-up;\n  }\n\n  article:nth-of-type(2n) {\n    margin-right: 2em;\n  }\n\n  article:nth-of-type(3n) {\n    margin-right: 0;\n  }\n}</style>\n<iron-ajax id=\"rssajax\" url=\"[[url]]\" handle-as=\"xml\" last-response=\"{{xml}}\"></iron-ajax>\n<dom-repeat items=\"[[items]]\">\n  <template>\n  <article>\n    <a class=\"thumbnail-container\" href=\"[[item.link]]\" title=\"[[item.title]]\">\n      <iron-image class=\"thumbnail\" src=\"[[item.imageSrc]]\" alt=\"[[item.title]]\" sizing=\"cover\"></iron-image>\n    </a>\n    <a href=\"[[item.link]]\" title=\"[[item.title]]\">\n      <span class=\"title\">[[_truncateText(item.title, maxTitleLength)]]</span>\n    </a>\n    <div class=\"excerpt\">[[_truncateText(item.excerpt, maxExcerptLength)]]</div>\n    <template is=\"dom-if\" if=\"[[showReadMore]]\">\n      <a tabindex=\"-1\" href=\"[[item.link]]\" class=\"read-more\" title=\"[[item.title]]\">[[readMoreAnchorText]]\n        <paper-icon-button icon=\"icons:arrow-forward\" class=\"read-more-icon\" alt=\"[[readMoreImageAlt]]\"></paper-icon-button>\n      </a>\n    </template>\n  </article>\n  </template>\n</dom-repeat>`;\n  }\n\n  // haxProperty definition\n  static get haxProperties() {\n    return {\n  \"canScale\": true,\n  \"canPosition\": true,\n  \"canEditSource\": false,\n  \"gizmo\": {\n    \"title\": \"Rss feed\",\n    \"description\": \"visualize RSS items\",\n    \"icon\": \"communication:rss-feed\",\n    \"color\": \"orange\",\n    \"groups\": [\"RSS\"],\n    \"handles\": [\n      {\n        \"type\": \"rss\",\n        \"source\": \"source\"\n      }\n    ],\n    \"meta\": {\n      \"author\": \"btopro\",\n      \"owner\": \"The Pennsylvania State University\"\n    }\n  },\n  \"settings\": {\n    \"quick\": [],\n    \"configure\": [\n      {\n        \"property\": \"url\",\n        \"title\": \"Feed URL\",\n        \"description\": \"URL to the XML feed\",\n        \"inputMethod\": \"textfield\"\n      },\n      {\n        \"property\": \"max\",\n        \"title\": \"Max items\",\n        \"description\": \"Max number of feed items to display\",\n        \"inputMethod\": \"number\"\n      }\n    ],\n    \"advanced\": []\n  }\n}\n;\n  }\n  // properties available to the custom element for data binding\n  static get properties() {\n    let props = {\n  /**\n   * If true init rss request.\n   */\n  \"auto\": {\n    \"type\": Boolean,\n    \"value\": false\n  },\n  /**\n   * The retrieved items array.\n   */\n  \"items\": {\n    \"type\": Array,\n    \"notify\": true\n  },\n  /**\n   * Max number of items to show. If it is undefined shows all items.\n   */\n  \"max\": {\n    \"type\": Number,\n    \"value\": 10,\n    \"observer\": \"_maxChanged\"\n  },\n  /**\n   * Max length for item excerpts. If the excerpt exceeds this length it will be trimed and will have an ellipsis appended.\n   */\n  \"maxExcerptLength\": {\n    \"type\": Number,\n    \"value\": 100\n  },\n  /**\n   * Max length for item titles. If the title exceeds this length it will be trimed and will have an ellipsis appended.\n   */\n  \"maxTitleLength\": {\n    \"type\": Number,\n    \"value\": 50\n  },\n  /**\n   * Read more anchor text.\n   */\n  \"readMoreAnchorText\": {\n    \"type\": Boolean,\n    \"value\": \"Read more\"\n  },\n  /**\n   * Read more image alternative text.\n   */\n  \"readMoreImageAlt\": {\n    \"type\": Boolean,\n    \"value\": \"Icono de flecha\"\n  },\n  /**\n   * If true the items elements will display a read more link.\n   */\n  \"showReadMore\": {\n    \"type\": Boolean,\n    \"value\": false\n  },\n  /**\n   * The URL of the RSS.\n   */\n  \"url\": {\n    \"type\": String,\n    \"observer\": \"_urlChanged\"\n  },\n  \"xml\": {\n    \"type\": Object,\n    \"observer\": \"xmlToItems\"\n  }\n}\n;\n    if (super.properties) {\n      props = Object.assign(props, super.properties);\n    }\n    return props;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"rss-items\";\n  }\n  /**\n   * Init ajax request to get rss.\n   */\n  initRequest() {\n    this.shadowRoot.querySelector(\"#rssajax\").generateRequest();\n  }\n  _maxChanged(newValue) {\n    if (newValue && this._x2js && this.__ready) {\n      this.xmlToItems(this.xml);\n    }\n  }\n  /**\n   * Receives a xml and set this.items as json.\n   * @param {Object} xml XML element.\n   */\n  xmlToItems(newValue) {\n    if (newValue && this._x2js && this.__ready) {\n      // parse xml to json and get items\n      var conversor = new X2JS();\n      var json = conversor.xml2json(newValue);\n      var items = json.rss ? json.rss.channel.item : json.channel.item;\n      // truncate with this.max and parse items\n      items = this.max === undefined ? items : items.splice(0, this.max);\n      this.items = this._parseItems(items);\n    }\n  }\n  _urlChanged(newValue) {\n    if (newValue && this._x2js && this.__ready) {\n      this.initRequest();\n    }\n  }\n  /**\n   * Parse items by getting excerpt and image source.\n   * @param {Array} items RSS items.\n   */\n  _parseItems(items) {\n    return items.map(\n      function(item) {\n        item.excerpt = this._getItemExcerpt(item);\n        item.imageSrc = this._getItemImageScr(item);\n        return item;\n      }.bind(this)\n    );\n  }\n  /**\n   * Get excerpt from item description.\n   * @param {Object} item Item where find excerpt.\n   */\n  _getItemExcerpt(item) {\n    var element = document.createElement(\"div\");\n    element.innerHTML = item.description;\n    return element.textContent.trim();\n  }\n  /**\n   * Get image source from item description.\n   * @param {Object} item Item where find image.\n   */\n  _getItemImageScr(item) {\n    if (item.thumbnail && item.thumbnail._url) {\n      return item.thumbnail._url;\n    } else {\n      var element = document.createElement(\"div\");\n      element.innerHTML = item.description;\n      var image = element.querySelector(\"img\") || {};\n      return image.src || \"\";\n    }\n  }\n  /**\n   * Truncate a text and concatenate with ellipsis if needed.\n   * @param {String} text Text to truncate.\n   * @param {Number} maxLength Max length of the text.\n   * @return {String} Truncated text.\n   */\n  _truncateText(text, maxLength) {\n    if (text) {\n      return maxLength && text.length > maxLength\n        ? text.substr(0, maxLength) + \"...\"\n        : text;\n    }\n  }\n  constructor() {\n    super();\n    import(\"@polymer/iron-image/iron-image.js\");\n    import(\"@polymer/paper-icon-button/paper-icon-button.js\");\n    import(\"@polymer/iron-icons/iron-icons.js\");\n    const name = \"x2js\";\n    const basePath = pathFromUrl(decodeURIComponent(import.meta.url));\n    const location = `${basePath}lib/x2js.js`;\n    window.ESGlobalBridge.requestAvailability();\n    window.ESGlobalBridge.instance.load(name, location);\n    window.addEventListener(\n      `es-bridge-${name}-loaded`,\n      this._x2jsLoaded.bind(this)\n    );\n  }\n  _x2jsLoaded(e) {\n    this._x2js = true;\n    if (this.__ready) {\n      if (this.auto) {\n        this.shadowRoot.querySelector(\"#rssajax\").auto = this.auto;\n      } else {\n        this.initRequest();\n      }\n    }\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.__ready = true;\n    afterNextRender(this, function() {\n      this.HAXWiring = new HAXWiring();\n      this.HAXWiring.setup(RssItems.haxProperties, RssItems.tag, this);\n      if (this._x2js) {\n        if (this.auto) {\n          this.shadowRoot.querySelector(\"#rssajax\").auto = this.auto;\n        } else {\n          this.initRequest();\n        }\n      }\n    });\n  }\n  /**\n   * life cycle, element is removed from the DOM\n   */\n  disconnectedCallback() {\n    window.removeEventListener(\n      `es-bridge-${name}-loaded`,\n      this._x2jsLoaded.bind(this)\n    );\n    super.disconnectedCallback();\n  }\n}\nwindow.customElements.define(RssItems.tag, RssItems);\nexport { RssItems };\n"],"names":["RssItems","basePath","pathFromUrl","decodeURIComponent","location","window","ESGlobalBridge","requestAvailability","instance","load","addEventListener","_this","_x2jsLoaded","bind","PolymerElement","shadowRoot","querySelector","generateRequest","newValue","this","_x2js","__ready","xmlToItems","xml","json","X2JS","xml2json","items","rss","channel","item","undefined","max","splice","_parseItems","initRequest","map","excerpt","_getItemExcerpt","imageSrc","_getItemImageScr","element","document","createElement","innerHTML","description","textContent","trim","thumbnail","_url","src","text","maxLength","length","substr","html","props","Boolean","Array","Number","String","Object","assign","e","auto","afterNextRender","HAXWiring","setup","haxProperties","tag","removeEventListener","name","customElements","define"],"mappings":"k7IAiDMA,iOAwVK,4CACA,0DACA,yCAEDC,EAAWC,cAAYC,oMACvBC,YAAcH,wBACpBI,OAAOC,eAAeC,sBACtBF,OAAOC,eAAeE,SAASC,KAJlB,OAI6BL,GAC1CC,OAAOK,qCALM,kBAOXC,EAAKC,YAAYC,0PAlWAC,gEA0QdC,WAAWC,cAAc,YAAYC,sDAEhCC,GACNA,GAAYC,KAAKC,OAASD,KAAKE,cAC5BC,WAAWH,KAAKI,wCAOdL,MACLA,GAAYC,KAAKC,OAASD,KAAKE,QAAS,KAGtCG,GADY,IAAIC,MACCC,SAASR,GAC1BS,EAAQH,EAAKI,IAAMJ,EAAKI,IAAIC,QAAQC,KAAON,EAAKK,QAAQC,KAE5DH,OAAqBI,IAAbZ,KAAKa,IAAoBL,EAAQA,EAAMM,OAAO,EAAGd,KAAKa,UACzDL,MAAQR,KAAKe,YAAYP,wCAGtBT,GACNA,GAAYC,KAAKC,OAASD,KAAKE,cAC5Bc,kDAOGR,UACHA,EAAMS,IACX,SAASN,UACPA,EAAKO,QAAUlB,KAAKmB,gBAAgBR,GACpCA,EAAKS,SAAWpB,KAAKqB,iBAAiBV,GAC/BA,GACPjB,KAAKM,+CAOKW,OACVW,EAAUC,SAASC,cAAc,cACrCF,EAAQG,UAAYd,EAAKe,YAClBJ,EAAQK,YAAYC,gDAMZjB,MACXA,EAAKkB,WAAalB,EAAKkB,UAAUC,YAC5BnB,EAAKkB,UAAUC,SAElBR,EAAUC,SAASC,cAAc,cACrCF,EAAQG,UAAYd,EAAKe,aACbJ,EAAQzB,cAAc,QAAU,IAC/BkC,KAAO,yCASVC,EAAMC,MACdD,SACKC,GAAaD,EAAKE,OAASD,EAC9BD,EAAKG,OAAO,EAAGF,GAAa,MAC5BD,4CA/UCI,wDAkIA,WACG,eACG,iBACE,QACR,OACE,uBACM,2BACP,+BACC,gBACC,CAAC,eACA,CACT,MACU,aACE,gBAGN,QACI,eACD,+CAGD,OACD,aACI,CACX,UACc,YACH,uBACM,kCACA,aAEjB,UACc,YACH,wBACM,kDACA,oBAGP,4CAORC,EAAQ,MAIN,MACEC,eACC,SAKF,MACCC,cACE,OAKL,MACGC,aACC,YACG,gCAKM,MACVA,aACC,oBAKO,MACRA,aACC,uBAKW,MACZF,cACC,8BAKS,MACVA,cACC,gCAKK,MACNA,eACC,OAKJ,MACGG,gBACI,mBAEP,MACGC,gBACI,kDAKVL,EAAQK,OAAOC,OAAON,8BAEjBA,oCAQA,uDAiGGO,QACL3C,OAAQ,EACTD,KAAKE,UACHF,KAAK6C,UACFjD,WAAWC,cAAc,YAAYgD,KAAO7C,KAAK6C,UAEjD7B,sHASJd,SAAU,EACf4C,kBAAgB9C,KAAM,gBACf+C,UAAY,IAAIA,iBAChBA,UAAUC,MAAMnE,EAASoE,cAAepE,EAASqE,IAAKlD,MACvDA,KAAKC,QACHD,KAAK6C,UACFjD,WAAWC,cAAc,YAAYgD,KAAO7C,KAAK6C,UAEjD7B,gEASX9B,OAAOiE,wCACQC,gBACbpD,KAAKP,YAAYC,KAAKM,yEAK5Bd,OAAOmE,eAAeC,OAAOzE,EAASqE,IAAKrE"}