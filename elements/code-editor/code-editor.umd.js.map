{"version":3,"file":"code-editor.umd.js","sources":["lib/monaco-element/monaco-element.js","lib/code-pen-button.js","code-editor.umd.js"],"sourcesContent":["import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\n\n/**\n * `monaco-element`\n * Webcomponent wrapper for the monaco editor.\n *\n * Sets value, language and theme.\n * Offers a value-changed event.\n *\n * Partly influenced by https://github.com/PolymerVis/monaco-editor\n *\n * @customElement\n * @polymer\n *\n * @author Lars Gr√∂ber <larsgroeber7@gmail.com>\n */\nclass MonacoElement extends PolymerElement {\n  constructor() {\n    super();\n    this.iframe = null;\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n        }\n        iframe {\n          border: none;\n          width: 100%;\n          height: 100%;\n          padding: 0;\n          margin: 0;\n        }\n      </style>\n      <iframe id=\"iframe\" frameborder=\"0\"></iframe>\n    `;\n  }\n\n  static get properties() {\n    return {\n      value: {\n        type: String,\n        value: \"\",\n        observer: \"monacoValueChanged\"\n      },\n      fontSize: {\n        type: Number,\n        value: 16\n      },\n      readOnly: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * THIS MAKES MULTIPLES EDITORS WORK BECAUSE OF EVENTS\n       * DO NOT MESS WITH THIS AND IT HAS TO BE SET\n       */\n      uniqueKey: {\n        type: String\n      },\n      eventTypes: {\n        type: Object,\n        value: {\n          ready: \"ready\",\n          valueChanged: \"valueChanged\",\n          languageChanged: \"languageChanged\",\n          themeChanged: \"themeChanged\"\n        }\n      },\n      language: {\n        type: String,\n        value: \"javascript\",\n        observer: \"monacoLanguageChanged\"\n      },\n      theme: {\n        type: String,\n        value: \"vs-dark\",\n        observer: \"monacoThemeChanged\"\n      },\n      libPath: {\n        type: String,\n        value: \"node_modules/monaco-editor/min/vs\"\n      },\n      editorReference: {\n        type: String,\n        reflectToAttribute: true,\n        computed: \"generateUUID()\"\n      }\n    };\n  }\n  /**\n   * Generate a UUID\n   */\n  generateUUID() {\n    return \"ss-s-s-s-sss\".replace(/s/g, this._uuidPart);\n  }\n  _uuidPart() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  get document() {\n    if (this.iframe.contentWindow) {\n      return this.iframe.contentWindow.document;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"message\", message => {\n      this.handleMessage(message);\n    });\n    setTimeout(() => {\n      if (!this.__init) {\n        this.initIFrame();\n      }\n    }, 500);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\"message\", message => {\n      this.handleMessage(message);\n    });\n    this.__init = false;\n  }\n\n  initIFrame() {\n    this.iframe = this.shadowRoot.querySelector(\"#iframe\");\n    if (this.document && !this.__init) {\n      this.__init = true;\n      const div = document.createElement(\"div\");\n      div.id = \"container\";\n      this.document.body.appendChild(div);\n      var iframeScript = `\n  var eventTypes = {\n    ready: 'ready',\n    valueChanged: 'valueChanged',\n    languageChanged: 'languageChanged',\n    themeChanged: 'themeChanged',\n  };\n\n  class MonacoEditor {\n    constructor(editorReference) {\n      this._editorReference_ = editorReference;\n      this.language = 'javascript';\n      this.value = '';\n      this.editor = null;\n      this.setupEventListener('message', this.handleMessage.bind(this));\n      this.setupEditor();\n    }\n\n    setupEditor() {\n      require.config({ paths: { vs: '${this.libPath}' } });\n      require(['vs/editor/editor.main'], () => {\n        this.editor = monaco.editor.create(document.getElementById('container'), {\n          value: this.value,\n          language: '${this.language}',\n          scrollBeyondLastLine: false,\n          automaticLayout: true,\n          fontSize: ${this.fontSize},\n          readOnly: ${this.readOnly},\n          minimap: {\n            enabled: true\n          },\n          autoIndent: true,\n        });\n\n        const model = this.editor.getModel();\n        model.onDidChangeContent(() => {\n          const value = model.getValue();\n          this.onValueChanged(value);\n        });\n\n        this.ready();\n      });\n    }\n\n    ready() {\n      setTimeout(() => {\n        this.postMessage(eventTypes.ready, null);\n        this.setupEventListener(\n          eventTypes.valueChanged,\n          this.onValueChanged.bind(this)\n        );\n      }, 100);\n    }\n\n    _handleMessage(data) {\n      switch (data.event) {\n        case eventTypes.valueChanged:\n          this.onInputValueChanged(data.payload);\n          break;\n        case eventTypes.languageChanged:\n          this.onLanguageChanged(data.payload);\n          break;\n        case eventTypes.themeChanged:\n          this.onThemeChanged(data.payload);\n          break;\n        default:\n          break;\n      }\n    }\n\n    handleMessage(message) {\n      try {\n        const data = JSON.parse(message.data);\n        this._handleMessage(data);\n      } catch (error) {\n        console.warn(error);\n        return;\n      }\n    }\n\n    postMessage(event, payload) {\n      var msg = {\n        event: event,\n        payload: payload,\n        editorReference: this._editorReference_\n      }\n      window.parent.postMessage(msg, window.parent.location.href);\n    }\n\n    setupEventListener(type, callback) {\n      window.addEventListener(type, data => {\n        callback(data);\n      });\n    }\n\n    onInputValueChanged(newValue) {\n      if (newValue !== this.value) {\n        this.value = newValue;\n        this.editor.getModel().setValue(newValue);\n        this.postMessage(eventTypes.valueChanged, newValue);\n      }\n    } \n\n    onValueChanged(newValue) {\n      if (newValue !== this.value) {\n        this.value = newValue;\n        this.postMessage(eventTypes.valueChanged, newValue);\n      }\n    }\n\n    onLanguageChanged(newLang) {\n      monaco.editor.setModelLanguage(this.editor.getModel(), newLang);\n    }\n\n    onThemeChanged(newValue) {\n      monaco.editor.setTheme(newValue);\n    }\n  }\n\n  new MonacoEditor(\"${this.editorReference}\");`;\n      this.insertScriptElement({\n        src: `${this.libPath}/loader.js`,\n        onload: () => {\n          this.insertScriptElement({ text: iframeScript });\n          this.insertStyle();\n        }\n      });\n    }\n  }\n\n  handleMessage(message) {\n    try {\n      let data = message.data;\n      if (typeof message.data === \"string\") {\n        data = JSON.parse(message.data);\n      }\n      this._handleMessage(data);\n    } catch (error) {\n      console.warn(\"[monaco-element] Error while parsing message:\", error);\n      return;\n    }\n  }\n\n  _handleMessage(data) {\n    // bail if we don't have a valid editor reference\n    if (data.editorReference !== this.editorReference) return;\n\n    if (data.event === this.eventTypes.valueChanged) {\n      const evt = new CustomEvent(\"value-changed\", {\n        bubbles: true,\n        cancelable: true,\n        detail: data.payload\n      });\n      this.dispatchEvent(evt);\n    } else if (data.event === this.eventTypes.ready) {\n      this.onIFrameReady();\n    }\n  }\n\n  onIFrameReady() {\n    this.monacoValueChanged(this.value);\n    this.monacoLanguageChanged(this.language);\n    this.monacoThemeChanged(this.theme);\n  }\n\n  monacoValueChanged(value) {\n    this.postMessage(this.eventTypes.valueChanged, value);\n  }\n\n  monacoLanguageChanged(value) {\n    this.postMessage(this.eventTypes.languageChanged, value);\n  }\n\n  monacoThemeChanged(value) {\n    this.postMessage(this.eventTypes.themeChanged, value);\n  }\n\n  postMessage(event, payload) {\n    if (!this.iframe) {\n      return;\n    }\n    if (this.iframe.contentWindow != null) {\n      this.iframe.contentWindow.postMessage(\n        JSON.stringify({ event, payload }),\n        window.location.href\n      );\n    }\n  }\n\n  insertScriptElement({ src, text, onload }) {\n    var ele = this.document.createElement(\"script\");\n    if (src) ele.src = src;\n    if (text) ele.text = text;\n    if (onload) ele.onload = onload;\n    this.document.head.appendChild(ele);\n  }\n\n  insertStyle() {\n    var css = `\n    body {\n      height: 100vh;\n      overflow: hidden;\n      margin: 0;\n    }    \n    #container {\n      width: 100%;\n      height: 100%;\n    }\n    .debug-red {\n      background : red;\n    }\n    .debug-green {\n      background : green;\n    }\n    html,body {\n      margin : 0px;\n    }`;\n    const head = this.document.head;\n    const style = this.document.createElement(\"style\");\n    style.type = \"text/css\";\n    if (style.styleSheet) {\n      style.styleSheet.cssText = css;\n    } else {\n      style.appendChild(this.document.createTextNode(css));\n    }\n    head.appendChild(style);\n  }\n}\n\nwindow.customElements.define(\"monaco-element\", MonacoElement);\nwindow.MonacoData = window.MonacoData || {};\n","import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\n/**\n * `code-pen-button`\n * `Post data to codepen to form a new pen`\n * @demo demo/index.html\n */\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n    </style>\n    <form action=\"[[endPoint]]\" method=\"POST\" target=\"_blank\">\n      <input type=\"hidden\" name=\"data\" value\\$=\"[[dataString]]\" />\n      <input\n        type=\"image\"\n        src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/t-1/cp-arrow-right.svg\"\n        width=\"40\"\n        height=\"40\"\n        value=\"Open code pen in a new window\"\n        class=\"codepen-mover-button\"\n      />\n    </form>\n  `,\n\n  is: \"code-pen-button\",\n  hostAttributes: {\n    title: \"Check it out on codepen\"\n  },\n  properties: {\n    /**\n     * End point for posting should it change in the future.\n     */\n    endPoint: {\n      type: String,\n      value: \"https://codepen.io/pen/define\"\n    },\n    /**\n     * Data object as a JSON string for the POST data in page.\n     */\n    dataString: {\n      type: String,\n      computed: \"_getDataString(data)\"\n    },\n    /**\n     * Data object to post to code pen\n     */\n    data: {\n      type: Object,\n      value: {}\n    }\n  },\n\n  /**\n   * Return string from data object so it can be posted correctly.\n   */\n  _getDataString: function(data) {\n    return JSON.stringify(data)\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&apos;\");\n  }\n});\n","/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { FlattenedNodesObserver } from \"@polymer/polymer/lib/utils/flattened-nodes-observer.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport { afterNextRender } from \"@polymer/polymer/lib/utils/render-status.js\";\nimport * as async from \"@polymer/polymer/lib/utils/async.js\";\nimport \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nimport \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\nimport \"./lib/monaco-element/monaco-element.js\";\nimport \"./lib/code-pen-button.js\";\n/**\n * `code-editor`\n * `Wrapper on top of a code editor`\n *\n * @demo demo/index.html\n * @microcopy - the mental model for this element\n * - monaco is the VS code editor\n */\nlet CodeEditor = Polymer({\n  _template: html`\n    <custom-style>\n      <style>\n        :host {\n          display: block;\n          padding: 16px;\n        }\n        .code-pen-container {\n          width: 100%;\n          display: flex;\n          background-color: var(--code-pen-button-color, #222222);\n          color: white;\n          height: 40px;\n          justify-content: flex-end;\n          align-items: center;\n        }\n        .code-pen-container span {\n          display: inline-flex;\n          line-height: 16px;\n          font-size: 16px;\n          padding: 12px;\n        }\n        [hidden] {\n          display: none !important;\n        }\n        code-pen-button {\n          float: right;\n          height: 40px;\n        }\n        h3 {\n          color: var(--code-pen-title-color, #222222);\n        }\n        #codeeditor {\n          height: 100%;\n          display: flex;\n        }\n      </style>\n    </custom-style>\n    <h3 hidden$=\"[[!title]]\">[[title]]</h3>\n    <monaco-element\n      id=\"codeeditor\"\n      lib-path=\"[[__libPath]]\"\n      value=\"[[editorValue]]\"\n      language=\"[[language]]\"\n      theme=\"[[theme]]\"\n      on-value-changed=\"_editorDataChanged\"\n      font-size$=\"[[fontSize]]\"\n      read-only$=\"[[readOnly]]\"\n    >\n    </monaco-element>\n    <div class=\"code-pen-container\" hidden$=\"[[!showCodePen]]\">\n      <span>Check it out on code pen: </span\n      ><code-pen-button data=\"[[codePenData]]\"></code-pen-button>\n    </div>\n  `,\n\n  is: \"code-editor\",\n\n  behaviors: [HAXBehaviors.PropertiesBehaviors, SchemaBehaviors.Schema],\n\n  properties: {\n    /**\n     * Title\n     */\n    title: {\n      type: String\n    },\n    /**\n     * Show codePen button to fork it to there to run\n     */\n    showCodePen: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Readonly setting for the editor\n     */\n    readOnly: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Code pen data, computed based on the HTML editor\n     */\n    codePenData: {\n      type: Object,\n      computed: \"_computeCodePenData(title, value)\"\n    },\n    /**\n     * contents of the editor\n     */\n    editorValue: {\n      type: String\n    },\n    /**\n     * value of the editor after the fact\n     */\n    value: {\n      type: String,\n      notify: true\n    },\n    /**\n     * Theme for the Ace editor.\n     */\n    theme: {\n      type: String,\n      value: \"vs-dark\"\n    },\n    /**\n     * Mode / language for editor\n     */\n    mode: {\n      type: String,\n      observer: \"_modeChanged\"\n    },\n    /**\n     * Language to present color coding for\n     */\n    language: {\n      type: String,\n      value: \"javascript\"\n    },\n    /**\n     * font size for the editor\n     */\n    fontSize: {\n      type: Number,\n      value: 16\n    }\n  },\n\n  /**\n   * Update the post data whenever the editor has been updated\n   */\n  _computeCodePenData: function(title, editorValue) {\n    return {\n      title: title,\n      html: editorValue\n    };\n  },\n  /**\n   * LEGACY: pass down mode to language if that api is used\n   */\n  _modeChanged: function(newValue) {\n    this.language = this.mode;\n  },\n\n  /**\n   * Notice code editor changes and reflect them into this element\n   */\n  _editorDataChanged: function(e) {\n    // value coming up off of thiss\n    this.value = e.detail;\n  },\n\n  /**\n   * Calculate what's in slot currently and then inject it into the editor.\n   */\n  updateEditorValue: function() {\n    var content = \"\";\n    // 1st look for a template tag\n    var children = this.queryEffectiveChildren(\"template\");\n    if (!children) {\n      console.warn(\n        \"code-editor works best with a template tag provided in light dom\"\n      );\n      children = dom(this).getEffectiveChildNodes();\n      if (children.length > 0) {\n        // loop through everything found in the slotted area and put it back in\n        for (var j = 0, len2 = children.length; j < len2; j++) {\n          if (typeof children[j].tagName !== typeof undefined) {\n            content += children[j].outerHTML;\n          } else {\n            content += children[j].textContent;\n          }\n        }\n      }\n    } else {\n      content = children.innerHTML;\n    }\n    this.$.codeeditor.value = content.trim();\n  },\n  /**\n   * Ensure fields don't pass through to HAX if in that context\n   */\n  preProcessHaxNodeToContent: function(clone) {\n    clone.editorValue = null;\n    clone.codePenData = null;\n    clone.value = null;\n    clone.removeAttribute(\"value\");\n    clone.removeAttribute(\"code-pen-data\");\n    return clone;\n  },\n  /**\n   * created callback\n   */\n  created: function() {\n    // set this ahead of it being painted into the dom\n    this.__libPath =\n      decodeURIComponent(import.meta.url) + \"/../../../monaco-editor/min/vs\";\n  },\n  /**\n   * attached life cycle\n   */\n  attached: function() {\n    afterNextRender(this, function() {\n      // mutation observer that ensures state of hax applied correctly\n      this._observer = new FlattenedNodesObserver(this, info => {\n        // if we've got new nodes, we have to react to that\n        if (info.addedNodes.length > 0) {\n          info.addedNodes.map(node => {\n            this.updateEditorValue();\n          });\n        }\n        // if we dropped nodes via the UI (delete event basically)\n        if (info.removedNodes.length > 0) {\n          // handle removing items... not sure we need to do anything here\n          info.removedNodes.map(node => {\n            this.updateEditorValue();\n          });\n        }\n      });\n    });\n  }\n});\nexport { CodeEditor };\n"],"names":["MonacoElement","iframe","PolymerElement","html","value","type","String","observer","fontSize","Number","readOnly","Boolean","uniqueKey","eventTypes","Object","ready","valueChanged","languageChanged","themeChanged","language","theme","libPath","editorReference","reflectToAttribute","computed","replace","this","_uuidPart","Math","floor","random","toString","substring","window","addEventListener","message","_this2","handleMessage","setTimeout","__init","initIFrame","removeEventListener","_this3","shadowRoot","querySelector","document","div","createElement","id","body","appendChild","iframeScript","insertScriptElement","src","onload","_this4","text","insertStyle","data","JSON","parse","_handleMessage","error","console","warn","event","evt","CustomEvent","bubbles","cancelable","detail","payload","dispatchEvent","onIFrameReady","monacoValueChanged","monacoLanguageChanged","monacoThemeChanged","postMessage","contentWindow","stringify","location","href","ele","head","css","style","styleSheet","cssText","createTextNode","customElements","define","MonacoData","_template","is","hostAttributes","title","properties","endPoint","dataString","_getDataString","CodeEditor","Polymer","behaviors","HAXBehaviors","PropertiesBehaviors","SchemaBehaviors","Schema","showCodePen","codePenData","editorValue","notify","mode","_computeCodePenData","_modeChanged","newValue","_editorDataChanged","e","updateEditorValue","content","children","queryEffectiveChildren","innerHTML","dom","getEffectiveChildNodes","length","j","len2","_typeof","tagName","outerHTML","textContent","$","codeeditor","trim","preProcessHaxNodeToContent","clone","removeAttribute","created","__libPath","decodeURIComponent","attached","afterNextRender","_observer","FlattenedNodesObserver","info","addedNodes","map","node","_this","removedNodes"],"mappings":"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"}