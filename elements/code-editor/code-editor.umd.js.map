{"version":3,"file":"code-editor.umd.js","sources":["lib/monaco-element/monaco-element.js","lib/code-pen-button.js","code-editor.umd.js"],"sourcesContent":["import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\n\n/**\n * `monaco-element`\n * Webcomponent wrapper for the monaco editor.\n *\n * Sets value, language and theme.\n * Offers a value-changed event.\n *\n * Partly influenced by https://github.com/PolymerVis/monaco-editor\n *\n * @customElement\n * @polymer\n *\n * @author Lars Gr√∂ber <larsgroeber7@gmail.com>\n */\nclass MonacoElement extends PolymerElement {\n  constructor() {\n    super();\n    this.iframe = null;\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n        }\n        iframe {\n          border: none;\n          width: 100%;\n          height: 100%;\n          padding: 0;\n        }\n      </style>\n      <iframe id=\"iframe\"></iframe>\n    `;\n  }\n\n  static get properties() {\n    return {\n      value: {\n        type: String,\n        value: \"\",\n        observer: \"monacoValueChanged\"\n      },\n      eventTypes: {\n        type: Object,\n        value: {\n          ready: \"ready\",\n          valueChanged: \"valueChanged\",\n          languageChanged: \"languageChanged\",\n          themeChanged: \"themeChanged\"\n        }\n      },\n      language: {\n        type: String,\n        value: \"javascript\",\n        observer: \"monacoLanguageChanged\"\n      },\n      theme: {\n        type: String,\n        value: \"vs-dark\",\n        observer: \"monacoThemeChanged\"\n      },\n      libPath: {\n        type: String,\n        value: \"node_modules/monaco-editor/min/vs\"\n      }\n    };\n  }\n\n  get document() {\n    if (this.iframe.contentWindow) {\n      return this.iframe.contentWindow.document;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"message\", message => {\n      this.handleMessage(message);\n    });\n    setTimeout(() => {\n      if (!this.__init) {\n        this.initIFrame();\n      }\n    }, 500);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\"message\", message => {\n      this.handleMessage(message);\n    });\n    this.__init = false;\n  }\n\n  initIFrame() {\n    this.iframe = this.shadowRoot.querySelector(\"#iframe\");\n    if (this.document && !this.__init) {\n      this.__init = true;\n      const div = document.createElement(\"div\");\n      div.id = \"container\";\n      this.document.body.appendChild(div);\n      var iframeScript = `\nvar eventTypes = {\n  ready: 'ready',\n  valueChanged: 'valueChanged',\n  languageChanged: 'languageChanged',\n  themeChanged: 'themeChanged',\n};\n\nclass MonacoEditor {\n  constructor() {\n    this.language = 'javascript';\n    this.value = '';\n    this.editor = null;\n    this.setupEventListener('message', this.handleMessage.bind(this));\n    this.setupEditor();\n  }\n\n  setupEditor() {\n    require.config({ paths: { vs: '${this.libPath}' } });\n    require(['vs/editor/editor.main'], () => {\n      this.editor = monaco.editor.create(document.getElementById('container'), {\n        value: this.value,\n        language: this.language,\n        scrollBeyondLastLine: false,\n        minimap: {\n          enabled: false\n        }\n      });\n\n      const model = this.editor.getModel();\n      model.onDidChangeContent(() => {\n        const value = model.getValue();\n        this.onValueChanged(value);\n      });\n\n      this.ready();\n    });\n  }\n\n  ready() {\n    setTimeout(() => {\n      this.postMessage(eventTypes.ready, null);\n      this.setupEventListener(\n        eventTypes.valueChanged,\n        this.onValueChanged.bind(this)\n      );\n    }, 100);\n  }\n\n  _handleMessage(data) {\n    switch (data.event) {\n      case eventTypes.valueChanged:\n        this.onInputValueChanged(data.payload);\n        break;\n      case eventTypes.languageChanged:\n        this.onLanguageChanged(data.payload);\n        break;\n      case eventTypes.themeChanged:\n        this.onThemeChanged(data.payload);\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleMessage(message) {\n    try {\n      const data = JSON.parse(message.data);\n      this._handleMessage(data);\n    } catch (error) {\n      console.warn(error);\n      return;\n    }\n  }\n\n  postMessage(event, payload) {\n    window.parent.postMessage(\n      JSON.stringify({ event, payload }),\n      window.parent.location.href\n    );\n  }\n\n  setupEventListener(type, callback) {\n    window.addEventListener(type, data => {\n      callback(data);\n    });\n  }\n\n  onInputValueChanged(newValue) {\n    if (newValue !== this.value) {\n      this.value = newValue;\n      this.editor.getModel().setValue(newValue);\n      this.postMessage(eventTypes.valueChanged, newValue);\n    }\n  } \n\n  onValueChanged(newValue) {\n    if (newValue !== this.value) {\n      this.value = newValue;\n      this.postMessage(eventTypes.valueChanged, newValue);\n    }\n  }\n\n  onLanguageChanged(newLang) {\n    monaco.editor.setModelLanguage(this.editor.getModel(), newLang);\n  }\n\n  onThemeChanged(newValue) {\n    monaco.editor.setTheme(newValue);\n  }\n}\n\nnew MonacoEditor();\n`;\n      this.insertScriptElement({\n        src: `${this.libPath}/loader.js`,\n        onload: () => {\n          this.insertScriptElement({ text: iframeScript });\n          this.insertStyle();\n        }\n      });\n    }\n  }\n\n  handleMessage(message) {\n    try {\n      let data = message.data;\n      if (typeof message.data === \"string\") {\n        data = JSON.parse(message.data);\n      }\n      this._handleMessage(data);\n    } catch (error) {\n      console.warn(\"[monaco-element] Error while parsing message:\", error);\n      return;\n    }\n  }\n\n  _handleMessage(data) {\n    if (data.event === this.eventTypes.valueChanged) {\n      this.dispatchEvent(\n        new CustomEvent(\"value-changed\", { detail: data.payload })\n      );\n    } else if (data.event === this.eventTypes.ready) {\n      this.onIFrameReady();\n    }\n  }\n\n  onIFrameReady() {\n    this.monacoValueChanged(this.value);\n    this.monacoLanguageChanged(this.language);\n    this.monacoThemeChanged(this.theme);\n  }\n\n  monacoValueChanged(value) {\n    this.postMessage(this.eventTypes.valueChanged, value);\n  }\n\n  monacoLanguageChanged(value) {\n    this.postMessage(this.eventTypes.languageChanged, value);\n  }\n\n  monacoThemeChanged(value) {\n    this.postMessage(this.eventTypes.themeChanged, value);\n  }\n\n  postMessage(event, payload) {\n    if (!this.iframe) {\n      return;\n    }\n    if (this.iframe.contentWindow != null) {\n      this.iframe.contentWindow.postMessage(\n        JSON.stringify({ event, payload }),\n        window.location.href\n      );\n    }\n  }\n\n  insertScriptElement({ src, text, onload }) {\n    var ele = this.document.createElement(\"script\");\n    if (src) ele.src = src;\n    if (text) ele.text = text;\n    if (onload) ele.onload = onload;\n    this.document.head.appendChild(ele);\n  }\n\n  insertStyle() {\n    var css = `\n    body {\n      height: 100vh;\n      overflow: hidden;\n      margin: 0;\n    }    \n    #container {\n      width: 100%;\n      height: 100%;\n    }\n    .debug-red {\n      background : red;\n    }\n    .debug-green {\n      background : green;\n    }\n    html,body {\n      margin : 0px;\n    }`;\n    const head = this.document.head;\n    const style = this.document.createElement(\"style\");\n    style.type = \"text/css\";\n    if (style.styleSheet) {\n      style.styleSheet.cssText = css;\n    } else {\n      style.appendChild(this.document.createTextNode(css));\n    }\n    head.appendChild(style);\n  }\n}\n\nwindow.customElements.define(\"monaco-element\", MonacoElement);\n","import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\n/**\n`code-pen-button`\nA LRN element to do a post of data to codepen\n\n* @demo demo/index.html\n\n@microcopy - the mental model for this element\n -\n -\n\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n    </style>\n    <form action=\"[[endPoint]]\" method=\"POST\" target=\"_blank\">\n      <input type=\"hidden\" name=\"data\" value\\$=\"[[dataString]]\" />\n      <input\n        type=\"image\"\n        src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/t-1/cp-arrow-right.svg\"\n        width=\"40\"\n        height=\"40\"\n        value=\"Create New Pen with Prefilled Data\"\n        class=\"codepen-mover-button\"\n      />\n    </form>\n  `,\n\n  is: \"code-pen-button\",\n\n  properties: {\n    /**\n     * End point for posting should it change in the future.\n     */\n    endPoint: {\n      type: String,\n      value: \"https://codepen.io/pen/define\"\n    },\n    /**\n     * Data object as a JSON string for the POST data in page.\n     */\n    dataString: {\n      type: String,\n      computed: \"_getDataString(data)\"\n    },\n    /**\n     * Data object to post to code pen\n     */\n    data: {\n      type: Object,\n      value: {}\n    }\n  },\n\n  /**\n   * Return string from data object so it can be posted correctly.\n   */\n  _getDataString: function(data) {\n    return JSON.stringify(data)\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&apos;\");\n  }\n});\n","/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { FlattenedNodesObserver } from \"@polymer/polymer/lib/utils/flattened-nodes-observer.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport * as async from \"@polymer/polymer/lib/utils/async.js\";\nimport \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nimport \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\nimport \"./lib/monaco-element/monaco-element.js\";\nimport \"./lib/code-pen-button.js\";\n/**\n * `code-editor`\n * `Wrapper on top of a code editor`\n *\n * @demo demo/index.html\n * @microcopy - the mental model for this element\n * - monaco is the VS code editor\n */\nlet CodeEditor = Polymer({\n  _template: html`\n    <custom-style>\n      <style>\n        :host {\n          display: block;\n          padding: 16px;\n        }\n        .code-pen-container {\n          width: 100%;\n          display: block;\n          background-color: var(--code-pen-button-color, #222222);\n          height: 40px;\n        }\n        [hidden] {\n          display: none !important;\n        }\n        code-pen-button {\n          float: right;\n          height: 40px;\n        }\n        h3 {\n          color: var(--code-pen-title-color, #222222);\n        }\n      </style>\n    </custom-style>\n    <h3 hidden$=\"[[!title]]\">[[title]]</h3>\n    <monaco-element\n      id=\"codeeditor\"\n      lib-path=\"[[__libPath]]\"\n      value=\"[[editorValue]]\"\n      language=\"[[language]]\"\n      theme=\"[[theme]]\"\n      on-value-changed=\"_editorDataChanged\"\n      font-size\\$=\"[[fontSize]]\"\n      readonly\\$=\"[[readOnly]]\"\n    >\n    </monaco-element>\n    <div class=\"code-pen-container\" hidden$=\"[[!showCodePen]]\">\n      <code-pen-button data=\"[[codePenData]]\"></code-pen-button>\n    </div>\n  `,\n\n  is: \"code-editor\",\n\n  behaviors: [HAXBehaviors.PropertiesBehaviors, SchemaBehaviors.Schema],\n\n  properties: {\n    /**\n     * Title\n     */\n    title: {\n      type: String\n    },\n    /**\n     * Show codePen button to fork it to there to run\n     */\n    showCodePen: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Readonly setting for the editor\n     */\n    readOnly: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Code pen data, computed based on the HTML editor\n     */\n    codePenData: {\n      type: Object,\n      computed: \"_computeCodePenData(title, value)\"\n    },\n    /**\n     * contents of the editor\n     */\n    editorValue: {\n      type: String,\n      value: \"\"\n    },\n    /**\n     * value of the editor after the fact\n     */\n    value: {\n      type: String,\n      notify: true\n    },\n    /**\n     * Theme for the Ace editor.\n     */\n    theme: {\n      type: String,\n      value: \"vs-dark\"\n    },\n    /**\n     * Mode / language for editor\n     */\n    mode: {\n      type: String,\n      observer: \"_modeChanged\"\n    },\n    /**\n     * Language to present color coding for\n     */\n    language: {\n      type: String,\n      value: \"javascript\"\n    },\n    /**\n     * font size for the Ace editor.\n     */\n    fontSize: {\n      type: String,\n      value: \"16px\"\n    },\n    /**\n     * Min lines of the editor to show\n     */\n    minLines: {\n      type: Number,\n      value: 10\n    },\n    /**\n     * Max lines of the editor to show\n     */\n    maxLines: {\n      type: Number,\n      value: 25\n    }\n  },\n\n  /**\n   * Update the post data whenever the editor has been updated\n   */\n  _computeCodePenData: function(title, editorValue) {\n    return {\n      title: title,\n      html: editorValue\n    };\n  },\n  /**\n   * pass down mode to language if that api is used for legacy purposes\n   */\n  _modeChanged: function(newValue) {\n    this.language = this.mode;\n  },\n\n  /**\n   * Notice code editor changes and reflect them into this element\n   */\n  _editorDataChanged: function(e) {\n    // value coming up off of thiss\n    this.value = e.detail;\n  },\n\n  /**\n   * Calculate what's in slot currently and then inject it into the editor.\n   */\n  updateEditorValue: function() {\n    var content = \"\";\n    // 1st look for a template tag\n    var children = this.queryEffectiveChildren(\"template\");\n    if (!children) {\n      console.warn(\n        \"code-editor works best with a template tag provided in light dom\"\n      );\n      children = dom(this).getEffectiveChildNodes();\n      if (children.length > 0) {\n        // loop through everything found in the slotted area and put it back in\n        for (var j = 0, len2 = children.length; j < len2; j++) {\n          if (typeof children[j].tagName !== typeof undefined) {\n            content += children[j].outerHTML;\n          } else {\n            content += children[j].textContent;\n          }\n        }\n      }\n    } else {\n      content = children.innerHTML;\n    }\n    this.editorValue = content.trim();\n  },\n  /**\n   * created callback\n   */\n  created: function() {\n    // set this ahead of it being painted into the dom\n    this.__libPath = import.meta.url + \"/../../../monaco-editor/min/vs\";\n  },\n  /**\n   * Ready state to tee everything up.\n   */\n  ready: function() {\n    // mutation observer that ensures state of hax applied correctly\n    this._observer = new FlattenedNodesObserver(this, info => {\n      // if we've got new nodes, we have to react to that\n      if (info.addedNodes.length > 0) {\n        info.addedNodes.map(node => {\n          this.updateEditorValue();\n        });\n      }\n      // if we dropped nodes via the UI (delete event basically)\n      if (info.removedNodes.length > 0) {\n        // handle removing items... not sure we need to do anything here\n        info.removedNodes.map(node => {\n          this.updateEditorValue();\n        });\n      }\n    });\n  },\n\n  /**\n   * Attached to the DOM, now fire.\n   */\n  attached: function() {\n    async.microTask.run(() => {\n      this.$.codeeditor.value = this.editorValue;\n      // delay on initial attachement to ensure that dependencies have loaded\n      setTimeout(() => {\n        this.$.codeeditor.initIFrame();\n      }, 1000);\n    });\n    // Establish hax property binding\n    let props = {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Code editor\",\n        description: \"Edit code in the browser with minor HTML validation\",\n        icon: \"icons:code\",\n        color: \"blue\",\n        groups: [\"Code\", \"Development\"],\n        handles: [\n          {\n            type: \"code\",\n            code: \"editorValue\"\n          }\n        ],\n        meta: {\n          author: \"LRNWebComponents\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"showCodePen\",\n            title: \"Code pen button\",\n            description: \"Play with this on code pen\",\n            inputMethod: \"boolean\",\n            icon: \"icons:code\"\n          }\n        ],\n        configure: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"showCodePen\",\n            title: \"Code pen button\",\n            description: \"Play with this on code pen\",\n            inputMethod: \"boolean\",\n            icon: \"icons:code\"\n          },\n          // this is trippy but actually will work.\n          {\n            property: \"editorValue\",\n            title: \"Code\",\n            description: \"The code to present to the user\",\n            inputMethod: \"code-editor\",\n            icon: \"editor:title\"\n          }\n        ],\n        advanced: []\n      }\n    };\n    this.setHaxProperties(props);\n  }\n});\nexport { CodeEditor };\n"],"names":["MonacoElement","iframe","PolymerElement","html","value","type","String","observer","eventTypes","Object","ready","valueChanged","languageChanged","themeChanged","language","theme","libPath","window","addEventListener","message","_this2","handleMessage","setTimeout","__init","initIFrame","removeEventListener","_this3","this","shadowRoot","querySelector","document","div","createElement","id","body","appendChild","iframeScript","insertScriptElement","src","onload","_this4","text","insertStyle","data","JSON","parse","_handleMessage","error","console","warn","event","dispatchEvent","CustomEvent","detail","payload","onIFrameReady","monacoValueChanged","monacoLanguageChanged","monacoThemeChanged","postMessage","contentWindow","stringify","location","href","ele","head","css","style","styleSheet","cssText","createTextNode","customElements","define","_template","is","properties","endPoint","dataString","computed","_getDataString","replace","CodeEditor","Polymer","behaviors","HAXBehaviors","PropertiesBehaviors","SchemaBehaviors","Schema","title","showCodePen","Boolean","reflectToAttribute","readOnly","codePenData","editorValue","notify","mode","fontSize","minLines","Number","maxLines","_computeCodePenData","_modeChanged","newValue","_editorDataChanged","e","updateEditorValue","content","children","queryEffectiveChildren","innerHTML","dom","getEffectiveChildNodes","length","j","len2","_typeof","tagName","outerHTML","textContent","trim","created","__libPath","_observer","FlattenedNodesObserver","info","addedNodes","map","node","_this","removedNodes","attached","async","run","$","codeeditor","setHaxProperties","canScale","canPosition","canEditSource","gizmo","description","icon","color","groups","handles","code","meta","author","settings","quick","property","inputMethod","configure","advanced"],"mappings":"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"}