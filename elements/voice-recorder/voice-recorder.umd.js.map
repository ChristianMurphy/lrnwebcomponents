{"version":3,"file":"voice-recorder.umd.js","sources":["voice-recorder.umd.js"],"sourcesContent":["/**\n * Copyright 2019 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { LitElement, html, css } from \"lit-element/lit-element.js\";\nimport { record } from \"vmsg/vmsg.js\";\n\n/**\n * `voice-recorder`\n * `LAME bridge`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @demo demo/index.html\n * @customElement voice-recorder\n */\nclass VoiceRecorder extends LitElement {\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: inline-flex;\n        }\n      `\n    ];\n  }\n  render() {\n    return html`\n      <button @click=\"${this.recordState}\">\n        <iron-icon icon=\"${this.iconState}\"></iron-icon>${this.textState}\n      </button>\n    `;\n  }\n  static get properties() {\n    return {\n      iconState: {\n        type: String\n      },\n      textState: {\n        type: String\n      },\n      recording: {\n        type: Boolean\n      }\n    };\n  }\n  /**\n   * Convention we use\n   */\n  static get tag() {\n    return \"voice-recorder\";\n  }\n\n  /**\n   * HTMLElement\n   */\n  constructor() {\n    super();\n    this.recording = false;\n    import(\"@polymer/iron-icon/iron-icon.js\");\n    import(\"@polymer/iron-icons/av-icons.js\");\n  }\n  recordState(e) {\n    this.recording = !this.recording;\n  }\n  /**\n   * LitElement ready\n   */\n  firstUpdated(changedProperties) {}\n  /**\n   * LitElement life cycle - property changed\n   */\n  updated(changedProperties) {\n    changedProperties.forEach((oldValue, propName) => {\n      if (propName == \"recording\") {\n        if (this[propName]) {\n          this.textState = \"stop\";\n          this.iconState = \"av:stop\";\n        } else {\n          this.textState = \"Record\";\n          this.iconState = \"av:play-arrow\";\n        }\n        // observer to act on the recording piece\n        this.toggleRecording(this[propName], oldValue);\n      }\n    });\n  }\n  /**\n   * Toggle the LAME bridge\n   */\n  toggleRecording(newValue, oldValue) {\n    if (newValue) {\n      // need to start...\n      const basePath = this.pathFromUrl(decodeURIComponent(import.meta.url));\n      record({ wasmURL: basePath + \"../../vmsg/vmsg.wasm\" }).then(blob => {\n        console.log(\"Recorded MP3\", blob);\n        this.dispatchEvent(\n          new CustomEvent(\"voice-recorder-recording\", {\n            value: blob\n          })\n        );\n      });\n    }\n    // was on now off\n    if (oldValue && !newValue) {\n      // need to stop\n    }\n  }\n  pathFromUrl(url) {\n    return url.substring(0, url.lastIndexOf(\"/\") + 1);\n  }\n}\ncustomElements.define(VoiceRecorder.tag, VoiceRecorder);\nexport { VoiceRecorder };\n"],"names":["VoiceRecorder","recording","LitElement","html","this","recordState","iconState","textState","css","type","String","Boolean","e","changedProperties","forEach","oldValue","propName","_this2","toggleRecording","newValue","basePath","pathFromUrl","decodeURIComponent","record","wasmURL","then","blob","console","log","_this3","dispatchEvent","CustomEvent","value","url","substring","lastIndexOf","customElements","define","tag"],"mappings":"o2CAiBMA,yKA0CGC,WAAY,SACV,0CACA,iRA5CiBC,yDAWjBC,WACaC,KAAKC,YACFD,KAAKE,UAA0BF,KAAKG,kDAXpD,CACLC,qDAeK,CACLF,UAAW,CACTG,KAAMC,QAERH,UAAW,CACTE,KAAMC,QAERT,UAAW,CACTQ,KAAME,4CAQH,4DAYGC,QACLX,WAAaG,KAAKH,+CAKZY,oCAILA,cACNA,EAAkBC,QAAQ,SAACC,EAAUC,GACnB,aAAZA,IACEC,EAAKD,IACPC,EAAKV,UAAY,OACjBU,EAAKX,UAAY,YAEjBW,EAAKV,UAAY,SACjBU,EAAKX,UAAY,iBAGnBW,EAAKC,gBAAgBD,EAAKD,GAAWD,8CAO3BI,EAAUJ,iBACpBI,EAAU,KAENC,EAAWhB,KAAKiB,YAAYC,oMAClCC,SAAO,CAAEC,QAASJ,EAAW,yBAA0BK,KAAK,SAAAC,GAC1DC,QAAQC,IAAI,eAAgBF,GAC5BG,EAAKC,cACH,IAAIC,YAAY,2BAA4B,CAC1CC,MAAON,4CAULO,UACHA,EAAIC,UAAU,EAAGD,EAAIE,YAAY,KAAO,YAGnDC,eAAeC,OAAOrC,EAAcsC,IAAKtC"}