{"version":3,"file":"rich-text-editor.umd.js","sources":["lib/rich-text-editor-styles.js","lib/rich-text-editor-button.js","lib/rich-text-editor-more-button.js","lib/rich-text-editor-picker.js","lib/rich-text-editor-block-picker.js","rich-text-editor.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n *\n * `rich-text-editor-styles`\n * `a shared set of styles for rich-text-editor`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @pseudoElement\n * @polymer\n * @demo demo/index.html\n * @see lib/rich-text-editor-styles-demo.js\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nconst styleElement = document.createElement(\"dom-module\");\n\nconst css = html`\n  <style>\n    :host([hidden]) {\n      display: none;\n    }\n    :host #button {\n      text-transform: unset;\n      padding: 0;\n      transition: all 0.5s;\n      min-width: 24px;\n      height: 24px;\n      color: var(--rich-text-editor-button-color);\n      border-color: var(--rich-text-editor-button-border);\n      --simple-picker-color: var(--rich-text-editor-button-color);\n      --simple-picker-background-color: var(--rich-text-editor-bg);\n      --simple-picker-border-color: var(\n        --rich-text-editor-button-disabled-color\n      );\n      @apply --rich-text-editor-button;\n    }\n    :host([disabled]) #button {\n      cursor: not-allowed;\n      color: var(--rich-text-editor-button-disabled-color);\n      background-color: var(--rich-text-editor-button-disabled-bg);\n      @apply --rich-text-editor-button-disabled;\n    }\n    :host #button[toggled] {\n      color: var(--rich-text-editor-button-toggled-color);\n      background-color: var(--rich-text-editor-button-toggled-bg);\n      @apply --rich-text-editor-button-toggled;\n    }\n    :host #button:focus,\n    :host #button:hover {\n      color: var(--rich-text-editor-button-hover-color);\n      background-color: var(--rich-text-editor-button-hover-bg);\n    }\n    :host #button #icon:not([icon]) {\n      display: none;\n    }\n    :host .offscreen {\n      position: absolute;\n      left: -999999px;\n      top: 0;\n      height: 0;\n      width: 0;\n      overflow: hidden;\n    }\n  </style>\n`;\nstyleElement.appendChild(css);\n\nstyleElement.register(\"rich-text-editor-styles\");\n","/**\n * Copyright 2019 Penn State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"@polymer/paper-button/paper-button.js\";\nimport \"@polymer/paper-tooltip/paper-tooltip.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"./rich-text-editor-styles.js\";\n/**\n * `rich-text-editor-button`\n * `a button for rich text editor (custom buttons can extend this)`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n */\nclass RichTextEditorButton extends PolymerElement {\n  // render function\n  static get template() {\n    return html`\n      <style include=\"rich-text-editor-styles\"></style>\n      <iron-a11y-keys\n        id=\"a11y\"\n        target=\"[[__a11y]]\"\n        keys=\"enter\"\n        on-keys-pressed=\"_buttonTap\">\n      </iron-a11y-keys>\n      <paper-button id=\"button\"\n        disabled$=\"[[disabled]]\" \n        controls=\"[[controls]]\"\n        on-tap=\"_buttonTap\"\n        tabindex=\"0\"\n        toggled$=\"[[toggled]]\">\n        <iron-icon id=\"icon\" \n          aria-hidden\n          icon$=\"[[_regOrToggled(icon,toggledIcon,toggled)]]\">\n        </iron-icon>\n        <span id=\"label\" class$=\"[[labelStyle]]\"></span>\n      </paper-button>\n      <paper-tooltip id=\"tooltip\" for=\"button\"></paper-button>\n    `;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * The command used for document.execCommand.\n       */\n      command: {\n        name: \"command\",\n        type: \"String\",\n        value: null\n      },\n\n      /**\n       * Optional parameter for the command.\n       */\n      commandVal: {\n        name: \"commandVal\",\n        type: \"Object\",\n        value: null,\n        notify: true\n      },\n\n      /**\n       * Is the button disabled? Default is false.\n       */\n      disabled: {\n        name: \"disabled\",\n        type: \"Boolean\",\n        value: false\n      },\n\n      /**\n       * Optional iron icon name for the button.\n       */\n      icon: {\n        name: \"icon\",\n        type: \"String\",\n        value: null\n      },\n\n      /**\n       * Label for the icon.\n       */\n      label: {\n        name: \"label\",\n        type: \"String\",\n        value: null\n      },\n\n      /**\n       * Hide the label offscreen?\n       */\n      labelStyle: {\n        name: \"labelStyle\",\n        type: \"String\",\n        computed: \"_labelStyle(icon,showTextLabel)\",\n        readOnly: true\n      },\n\n      /**\n       * The active selection, inherited from the toolbar\n       */\n      selection: {\n        name: \"selection\",\n        type: \"Object\",\n        notify: true,\n        value: null\n      },\n\n      /**\n       * Show text label even if an icon is named?\n       */\n      showTextLabel: {\n        name: \"showTextLabel\",\n        type: \"Boolean\",\n        value: false\n      },\n\n      /**\n       * Is this button toggled?\n       */\n      toggled: {\n        name: \"toggled\",\n        type: \"Boolean\",\n        computed: \"_isToggled(selection)\",\n        notify: true\n      },\n\n      /**\n       * The command used for document.execCommand when toggled.\n       */\n      toggledCommand: {\n        name: \"toggledCommand\",\n        type: \"String\",\n        value: null\n      },\n      /**\n       * Optional parameter for the command when toggled.\n       */\n      toggledCommandVal: {\n        name: \"toggledCommandVal\",\n        type: \"Object\",\n        value: null\n      },\n\n      /**\n       * Optional iron icon name for the button if it is toggled.\n       */\n      toggledIcon: {\n        name: \"toggledIcon\",\n        type: \"String\",\n        value: null\n      },\n\n      /**\n       * Label for the icon, if button is toggled.\n       */\n      toggledLabel: {\n        name: \"toggledLabel\",\n        type: \"String\",\n        value: null\n      },\n\n      /**\n       * Can this button toggle?\n       */\n      toggles: {\n        name: \"toggles\",\n        type: \"Boolean\",\n        value: false\n      },\n\n      /**\n       * List of valid commands\n       */\n      validCommands: {\n        name: \"validCommands\",\n        type: \"Array\",\n        value: [\n          \"backColor\",\n          \"bold\",\n          \"createLink\",\n          \"copy\",\n          \"cut\",\n          \"defaultParagraphSeparator\",\n          \"delete\",\n          \"fontName\",\n          \"fontSize\",\n          \"foreColor\",\n          \"formatBlock\",\n          \"forwardDelete\",\n          \"insertHorizontalRule\",\n          \"insertHTML\",\n          \"insertImage\",\n          \"insertLineBreak\",\n          \"insertOrderedList\",\n          \"insertParagraph\",\n          \"insertText\",\n          \"insertUnorderedList\",\n          \"justifyCenter\",\n          \"justifyFull\",\n          \"justifyLeft\",\n          \"justifyRight\",\n          \"outdent\",\n          \"paste\",\n          \"redo\",\n          \"selectAll\",\n          \"strikethrough\",\n          \"styleWithCss\",\n          \"superscript\",\n          \"undo\",\n          \"unlink\",\n          \"useCSS\"\n        ],\n        readOnly: true\n      }\n    };\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"rich-text-editor-button\";\n  }\n\n  /**\n   * life cycle, element is ready\n   */\n  ready() {\n    super.ready();\n    let root = this;\n  }\n\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.__a11y = this.$.button;\n  }\n\n  /**\n   * life cycle, element is detatched\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n  }\n\n  /**\n   * excutes the button's command\n   */\n  doTextOperation() {\n    let root = this,\n      selection = root.selection;\n    if (root.toggled && root.toggledCommand !== null) {\n      document.execCommand(\n        root.toggledCommand,\n        false,\n        root.toggledCommand || \"\"\n      );\n    } else if (root.command !== null) {\n      document.execCommand(root.command, false, root.commandVal || \"\");\n    }\n    root.selection = selection;\n  }\n\n  /**\n   * determine if the button is toggled\n   *\n   * @param {object} the text selection\n   * @returns {boolean} whether the button is toggled\n   *\n   */\n  _isToggled(selection) {\n    let toggled =\n        this.command !== null && this.toggles\n          ? document.queryCommandState(this.command)\n          : false,\n      label = this._regOrToggled(this.label, this.toggledLabel, toggled);\n    this.$.label.innerHTML = label;\n    this.$.tooltip.innerHTML = label;\n    return toggled;\n  }\n  /**\n   * Handles button tap;\n   */\n  _buttonTap(e) {\n    e.preventDefault();\n    this.doTextOperation();\n  }\n  /**\n   * updates a button value based on whether or not button is toggled\n   *\n   * @param {string} the value when toggled off\n   * @param {string} the value when toggled on\n   * @param {boolean} whether the button is toggled\n   * @returns {string} the correct value based on\n   * whether or not the button is toggled\n   */\n  _regOrToggled(toggledOff, toggledOn, toggled) {\n    return toggledOn !== null && toggled ? toggledOn : toggledOff;\n  }\n\n  /**\n   * Determines if an iron icon has been named for the button.\n   *\n   * @param {string} the name of the icon\n   * @returns {boolean} if an icon is named\n   */\n  _labelStyle(icon, showTextLabel) {\n    return icon !== undefined &&\n      icon !== null &&\n      icon !== \"\" &&\n      showTextLabel === false\n      ? \"offscreen\"\n      : null;\n  }\n}\nwindow.customElements.define(RichTextEditorButton.tag, RichTextEditorButton);\nexport { RichTextEditorButton };\n","/**\n * Copyright 2019 Penn State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { RichTextEditorButton } from \"./rich-text-editor-button.js\";\n/**\n * `rich-text-editor-more-button`\n * `a more button to toggle cllapsed buttons in the rich text editor`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n */\nclass RichTextEditorMoreButton extends RichTextEditorButton {\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * Can this button toggle?\n       */\n      toggled: {\n        name: \"toggled\",\n        type: \"Boolean\",\n        value: false,\n        observer: \"_updateLabels\",\n        reflectToAttribute: true\n      },\n      /**\n       * The maximum size where all of the buttons display\n       */\n      collapseMax: {\n        name: \"collapseMax\",\n        type: \"String\",\n        value: \"xs\",\n        reflectToAttribute: true\n      }\n    };\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"rich-text-editor-more-button\";\n  }\n\n  /**\n   * Fires a button tap event\n   */\n  _buttonTap(e) {\n    this.dispatchEvent(\n      new CustomEvent(\"rich-text-more-button-tap\", { detail: this })\n    );\n  }\n\n  /**\n   * updates the selection\n   *\n   * @param {boolean} whether the expand is toggled\n   */\n  _updateLabels(toggled) {\n    let label = this._regOrToggled(this.label, this.toggledLabel, toggled);\n    this.$.label.innerHTML = label;\n    this.$.tooltip.innerHTML = label;\n  }\n}\nwindow.customElements.define(\n  RichTextEditorMoreButton.tag,\n  RichTextEditorMoreButton\n);\nexport { RichTextEditorMoreButton };\n","/**\n * Copyright 2019 Penn State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { RichTextEditorButton } from \"./rich-text-editor-button.js\";\nimport \"@lrnwebcomponents/es-global-bridge/es-global-bridge.js\";\nimport { pathFromUrl } from \"@polymer/polymer/lib/utils/resolve-url.js\";\nimport \"@lrnwebcomponents/simple-picker/simple-picker.js\";\n/**\n * `rich-text-editor-picker`\n * `a button for rich text editor (custom buttons can extend this)`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n */\nclass RichTextEditorPicker extends RichTextEditorButton {\n  // render function\n  static get template() {\n    return html`\n      <style include=\"rich-text-editor-styles\"></style>\n      <simple-picker id=\"button\"\n        disabled$=\"[[disabled]]\" \n        controls=\"[[controls]]\"\n        on-change=\"_pickerChange\"\n        tabindex=\"0\"\n        title-as-html$=\"[[titleAsHtml]]\"\n        options=\"[[options]]\"\n        value=\"[[commandVal]]\">\n        <span id=\"label\" class$=\"[[labelStyle]]\"></span>\n      </paper-button>\n      <paper-tooltip id=\"tooltip\" for=\"button\"></paper-button>\n    `;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * Allow a null option to be selected?\n       */\n      allowNull: {\n        name: \"allowNull\",\n        type: \"Boolean\",\n        value: false\n      },\n      /**\n       * The command used for document.execCommand.\n       */\n      command: {\n        name: \"command\",\n        type: \"String\",\n        value: \"insertHTML\",\n        readOnly: true\n      },\n      /**\n       * The command used for document.execCommand.\n       */\n      options: {\n        name: \"options\",\n        type: \"Array\",\n        value: [],\n        notify: true\n      },\n\n      /**\n       * Renders html as title. (Good for titles with HTML in them.)\n       */\n      titleAsHtml: {\n        name: \"titleAsHtml\",\n        type: \"Boolean\",\n        value: false\n      }\n    };\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"rich-text-editor-picker\";\n  }\n\n  /**\n   * determins if the button is toggled\n   *\n   * @param {object} the text selection\n   * @returns {boolean} whether the button is toggled\n   *\n   */\n  _isToggled(selection) {\n    let wrap = this.wrap,\n      toggled = false;\n    if (selection !== null) {\n      if (this.command === \"formatBlock\") {\n        let ancestor = selection.commonAncestorContainer,\n          parent = ancestor.parentNode,\n          temp = [];\n        this.options.forEach(function(row) {\n          row.forEach(function(option) {\n            temp.push(option.value);\n          });\n        });\n        this.$.button.value =\n          parent.closest(temp.join(\",\")) !== null\n            ? parent.closest(temp.join(\",\")).tagName.toLowerCase()\n            : null;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Handles default options loaded from an external js file\n   */\n  _setOptions() {\n    this.set(\"options\", this._getPickerOptions(data, this.allowNull));\n  }\n  /**\n   * Picker change\n   */\n  _pickerChange(e) {\n    let val = this.$.button.value;\n    e.preventDefault();\n    if (\n      val !== null &&\n      this.selection !== undefined &&\n      this.selection !== null\n    ) {\n      this.commandVal = this.$.button.value;\n      if ((this.command = \"formatBlock\")) {\n        this.doTextOperation();\n      } else if ((this.command = \"insertNode\")) {\n        let node = !this.wrap\n          ? document.createTextNode(val)\n          : document.createElement(val);\n        this.selection.extractContents();\n        this.selection.insertNode(node);\n      }\n      if (!this.wrap)\n        this.dispatchEvent(new CustomEvent(\"deselect\", { detail: this }));\n    }\n  }\n  /**\n   * Converts option data to picker option data;\n   * can be overridden in extended elements\n   *\n   * @param {object} data about the option\n   * @returns {object} picker dato for the option\n   */\n  _getOptionData(option) {\n    return {\n      alt: option.alt,\n      icon: option.icon,\n      style: option.style,\n      value: option.value\n    };\n  }\n\n  /**\n   * gets a list of icons and load them in a format\n   * that the simple-picker can take;\n   * if no icons are provided, loads a list from iron-meta\n   *\n   * @param {array} a list of custom icons for the picker\n   * @param {array} default list of icons for the picker\n   * @param {boolean} allow a null value for the picker\n   */\n  _getPickerOptions(options = [], allowNull = false) {\n    let items = allowNull === false ? [] : [[{ alt: \"null\", value: null }]],\n      h = allowNull === false ? 0 : 1,\n      cols =\n        Math.sqrt(options.length + h) < 16\n          ? Math.ceil(Math.sqrt(options.length + h))\n          : 15;\n    for (let i = 0; i < options.length; i++) {\n      let j = h + i,\n        row = Math.floor(j / cols),\n        col = j - row * cols,\n        data = this._getOptionData(options[i]);\n      if (items[row] === undefined || items[row] === null) items[row] = [];\n      items[row][col] = data;\n    }\n    return items;\n  }\n}\nwindow.customElements.define(RichTextEditorPicker.tag, RichTextEditorPicker);\nexport { RichTextEditorPicker };\n","/**\n * Copyright 2019 Penn State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { RichTextEditorPicker } from \"./rich-text-editor-picker.js\";\nimport \"@polymer/iron-icons/editor-icons.js\";\n/**\n * `rich-text-editor-block-picker`\n * `a button for rich text editor (custom buttons can extend this)`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n */\nclass RichTextEditorHeadingPicker extends RichTextEditorPicker {\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * Allow a null option to be selected?\n       */\n      allowNull: {\n        name: \"allowNull\",\n        type: \"Boolean\",\n        value: false\n      },\n      /**\n       * The command used for document.execCommand.\n       */\n      command: {\n        name: \"command\",\n        type: \"String\",\n        value: \"formatBlock\",\n        readOnly: true\n      },\n      /**\n       * The command used for document.execCommand.\n       */\n      blocks: {\n        name: \"blocks\",\n        type: \"Array\",\n        notify: true,\n        value: [\n          { label: \"Paragraph\", tag: \"p\" },\n          { label: \"Heading 1\", tag: \"h1\" },\n          { label: \"Heading 2\", tag: \"h2\" },\n          { label: \"Heading 3\", tag: \"h3\" },\n          { label: \"Heading 4\", tag: \"h4\" },\n          { label: \"Heading 5\", tag: \"h5\" },\n          { label: \"Heading 6\", tag: \"h6\" },\n          { label: \"Preformatted\", tag: \"pre\" },\n          { label: \"Div\", tag: \"div\" }\n        ]\n      },\n      /**\n       * The command used for document.execCommand.\n       */\n      options: {\n        name: \"options\",\n        type: \"Array\",\n        computed: \"_getBlockOptions(blocks)\",\n        notify: true\n      },\n\n      /**\n       * Renders html as title. (Good for titles with HTML in them.)\n       */\n      titleAsHtml: {\n        name: \"titleAsHtml\",\n        type: \"Boolean\",\n        value: false\n      },\n\n      /**\n       *\n       */\n      block: {\n        name: \"block\",\n        type: \"Boolean\",\n        value: true,\n        readOnly: true\n      }\n    };\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"rich-text-editor-block-picker\";\n  }\n\n  _getBlockOptions(blocks) {\n    let temp = [];\n    blocks.forEach(function(block) {\n      temp.push([\n        {\n          alt: block.label,\n          value: block.tag\n        }\n      ]);\n    });\n    return temp;\n  }\n}\nwindow.customElements.define(\n  RichTextEditorHeadingPicker.tag,\n  RichTextEditorHeadingPicker\n);\nexport { RichTextEditorHeadingPicker };\n","/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { HAXWiring } from \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nimport { ResponsiveUtility } from \"@lrnwebcomponents/responsive-utility/responsive-utility.js\";\nimport \"./lib/rich-text-editor-button.js\";\nimport \"./lib/rich-text-editor-more-button.js\";\nimport \"./lib/rich-text-editor-block-picker.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"@polymer/iron-icons/editor-icons.js\";\nimport \"@polymer/iron-icons/image-icons.js\";\nimport \"@lrnwebcomponents/md-extra-icons/md-extra-icons.js\";\n/**\n * `rich-text-editor`\n * `a standalone rich text editor`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @demo demo/index.html demo\n * @demo demo/content.html easy implementation\n * @demo demo/config.html custom configuration\n */\nclass RichTextEditor extends PolymerElement {\n  \n  // render function\n  static get template() {\n    return html`\n<style>:host {\n  display: block;\n  width: 100%;\n  margin: 0;\n  padding: 0;\n  --rich-text-editor-bg: #fafafa;\n  --rich-text-editor-button-color: #444;\n  --rich-text-editor-border: 1px solid #ddd;\n  --rich-text-editor-button-border: transparent;\n  --rich-text-editor-button-disabled-color: #666;\n  --rich-text-editor-button-disabled-bg: transparent;\n  --rich-text-editor-button-toggled-color: #222;\n  --rich-text-editor-button-toggled-bg: #d8d8d8;\n  --rich-text-editor-button-hover-color: #000;\n  --rich-text-editor-button-hover-bg: #f0f0f0;\n  @apply --rich-text-editor;\n}\n:host([sticky]) {\n  position: sticky;\n  top: 0;\n}\n:host #toolbar {\n  display: flex;\n  opacity: 1;\n  margin: 0;\n  align-items: stretch;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  background-color: var(--rich-text-editor-bg);\n  border: var(--rich-text-editor-border);\n  font-size: 12px;\n  transition: all 0.5s;\n  @apply --rich-text-editor-toolbar;\n} \n:host #toolbar[aria-hidden]{\n  visibility: hidden;\n  opacity: 0;\n  height: 0;\n}\n:host #toolbar .group {\n  display: flex;\n  flex-wrap: nowrap;\n  justify-content: space-evenly;\n  align-items: stretch;\n  padding: 0 3px;\n  @apply --rich-text-editor-toolbar-group;\n}\n:host #toolbar .group:not(:last-of-type) {\n  margin-right: 3px;\n  border-right: var(--rich-text-editor-border);\n  @apply --rich-text-editor-toolbar-divider;\n}\n:host #toolbar .button {\n  display: flex;\n  flex: 0 0 auto;\n  align-items: stretch;\n  margin: 3px;\n}\n:host #toolbar #morebutton {\n  flex: 1 0 auto;\n  justify-content: flex-end;\n}\n\n:host([responsive-size=\"xs\"]) #morebutton[collapse-max=\"xs\"],\n:host([responsive-size=\"sm\"]) #morebutton[collapse-max*=\"s\"],\n:host([responsive-size=\"md\"]) #morebutton:not([collapse-max*=\"l\"]),\n:host([responsive-size=\"lg\"]) #morebutton:not([collapse-max=\"xl\"]),\n:host([responsive-size=\"xl\"]) #morebutton,\n\n:host([responsive-size=\"xs\"]) #toolbar[collapsed] *[collapsed-until*=\"m\"],\n:host([responsive-size=\"xs\"]) #toolbar[collapsed] *[collapsed-until*=\"l\"],\n:host([responsive-size=\"sm\"]) #toolbar[collapsed] *[collapsed-until=\"md\"],\n:host([responsive-size=\"sm\"]) #toolbar[collapsed] *[collapsed-until*=\"l\"],\n:host([responsive-size=\"md\"]) #toolbar[collapsed] *[collapsed-until*=\"l\"],\n:host([responsive-size=\"lg\"]) #toolbar[collapsed] *[collapsed-until=\"xl\"] {\n  display: none;\n}</style>\n<div id=\"toolbar\" aria-hidden$=\"[[!controls]]\" collapsed$=\"[[collapsed]]\">\n  <rich-text-editor-more-button\n    id=\"morebutton\"\n    class=\"button\"\n    controls=\"toolbar\"\n    icon=\"more-vert\"\n    label=\"More buttons\"\n    label-toggled=\"Fewer buttons\"\n    toggled$=\"[[!collapsed]]\"\n    on-tap=\"_toggleMore\">\n  </rich-text-editor-more-button>  \n</div>`;\n  }\n\n  // haxProperty definition\n  static get haxProperties() {\n    return {\n  \"canScale\": true,\n  \"canPosition\": true,\n  \"canEditSource\": false,\n  \"gizmo\": {\n    \"title\": \"Rich text-editor\",\n    \"description\": \"a standalone rich text editor\",\n    \"icon\": \"icons:android\",\n    \"color\": \"green\",\n    \"groups\": [\"Text\"],\n    \"handles\": [\n      {\n        \"type\": \"todo:read-the-docs-for-usage\"\n      }\n    ],\n    \"meta\": {\n      \"author\": \"nikkimk\",\n      \"owner\": \"Penn State University\"\n    }\n  },\n  \"settings\": {\n    \"quick\": [],\n    \"configure\": [\n      {\n        \"property\": \"title\",\n        \"description\": \"\",\n        \"inputMethod\": \"textfield\",\n        \"required\": false,\n        \"icon\": \"icons:android\"\n      }\n    ],\n    \"advanced\": []\n  }\n}\n;\n  }\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n  /**\n   * The editor buttons.\n   */\n  \"buttons\": {\n    \"name\": \"buttons\",\n    \"type\": \"Array\",\n    \"computed\": \"_getButtons(config)\"\n  },\n  /**\n   * The editable content, if edits are canceled.\n   */\n  \"canceled\": {\n    \"name\": \"canceled\",\n    \"type\": \"Object\",\n    \"value\": true\n  },\n  /**\n   * Is the menu collapsed.\n   */\n  \"collapsed\": {\n    \"name\": \"collapsed\",\n    \"type\": \"Boolean\",\n    \"value\": true\n  },\n  /**\n   * The button config on the toolbar.\n   */\n  \"config\": {\n    \"name\": \"config\",\n    \"type\": \"Object\",\n    \"value\": [\n      {\n        \"label\": \"History\",\n        \"type\": \"button-group\",\n        \"buttons\": [\n          {\n            \"command\": \"undo\",\n            \"icon\": \"undo\",\n            \"label\": \"Undo\",\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"command\": \"redo\",\n            \"icon\": \"redo\",\n            \"label\": \"Redo\",\n            \"type\": \"rich-text-editor-button\"\n          }\n        ]\n      },\n      {\n        \"label\": \"Basic Inline Operations\",\n        \"type\": \"button-group\",\n        \"buttons\": [\n          {\n            \"label\": \"Heading\",\n            \"type\": \"rich-text-editor-block-picker\",\n            \"blocks\": [\n              { \"label\": \"<p>\", \"tag\": \"p\" },\n              { \"label\": \"<h1>\", \"tag\": \"h1\" },\n              { \"label\": \"<h2>\", \"tag\": \"h2\" },\n              { \"label\": \"<h3>\", \"tag\": \"h3\" },\n              { \"label\": \"<h4>\", \"tag\": \"h4\" },\n              { \"label\": \"<h5>\", \"tag\": \"h5\" },\n              { \"label\": \"<h6>\", \"tag\": \"h6\" }\n            ]\n          },\n          {\n            \"command\": \"bold\",\n            \"icon\": \"editor:format-bold\",\n            \"label\": \"Bold\",\n            \"toggles\": true,\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"command\": \"italic\",\n            \"icon\": \"editor:format-italic\",\n            \"label\": \"Italics\",\n            \"toggles\": true,\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"command\": \"removeFormat\",\n            \"icon\": \"editor:format-clear\",\n            \"label\": \"Erase Format\",\n            \"type\": \"rich-text-editor-button\"\n          }\n        ]\n      },\n      {\n        \"label\": \"Links\",\n        \"type\": \"button-group\",\n        \"buttons\": [\n          {\n            \"command\": \"link\",\n            \"icon\": \"link\",\n            \"label\": \"Link\",\n            \"toggledCommand\": \"unlink\",\n            \"toggledIcon\": \"mdextra:unlink\",\n            \"toggledLabel\": \"Unink\",\n            \"toggles\": true,\n            \"type\": \"rich-text-editor-button\"\n          }\n        ]\n      },\n      {\n        \"label\": \"Clipboard Operations\",\n        \"type\": \"button-group\",\n        \"buttons\": [\n          {\n            \"command\": \"cut\",\n            \"icon\": \"content-cut\",\n            \"label\": \"Cut\",\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"command\": \"copy\",\n            \"icon\": \"content-copy\",\n            \"label\": \"Copy\",\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"command\": \"paste\",\n            \"icon\": \"content-paste\",\n            \"label\": \"Paste\",\n            \"type\": \"rich-text-editor-button\"\n          }\n        ]\n      },\n      {\n        \"collapsedUntil\": \"md\",\n        \"label\": \"Subscript and Superscript\",\n        \"type\": \"button-group\",\n        \"buttons\": [\n          {\n            \"command\": \"subscript\",\n            \"icon\": \"mdextra:subscript\",\n            \"label\": \"Subscript\",\n            \"toggles\": true,\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"command\": \"superscript\",\n            \"icon\": \"mdextra:superscript\",\n            \"label\": \"Superscript\",\n            \"toggles\": true,\n            \"type\": \"rich-text-editor-button\"\n          }\n        ]\n      },\n      {\n        \"collapsedUntil\": \"sm\",\n        \"label\": \"Lists and Indents\",\n        \"type\": \"button-group\",\n        \"buttons\": [\n          {\n            \"command\": \"insertOrderedList\",\n            \"icon\": \"editor:format-list-numbered\",\n            \"label\": \"Ordered List\",\n            \"toggles\": true,\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"command\": \"insertUnorderedList\",\n            \"icon\": \"editor:format-list-bulleted\",\n            \"label\": \"Unordered List\",\n            \"toggles\": true,\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"collapsedUntil\": \"lg\",\n            \"command\": \"formatBlock\",\n            \"commandVal\": \"blockquote\",\n            \"label\": \"Blockquote\",\n            \"icon\": \"editor:format-quote\",\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"label\": \"Increase Indent\",\n            \"icon\": \"editor:format-indent-increase\",\n            \"event\": \"text-indent\",\n            \"command\": \"indent\",\n            \"type\": \"rich-text-editor-button\"\n          },\n          {\n            \"label\": \"Decrease Indent\",\n            \"icon\": \"editor:format-indent-decrease\",\n            \"event\": \"text-outdent\",\n            \"command\": \"outdent\",\n            \"type\": \"rich-text-editor-button\"\n          }\n        ]\n      }\n    ]\n  },\n  /**\n   * The target element's id attribute.\n   */\n  \"controls\": {\n    \"name\": \"controls\",\n    \"type\": \"String\",\n    \"value\": null\n  },\n  /**\n   * The editableElement element for the editor.\n   */\n  \"editableElements\": {\n    \"name\": \"editableElements\",\n    \"type\": \"Array\",\n    \"value\": []\n  },\n  /**\n   * The editableElement element for the editor.\n   */\n  \"editableElement\": {\n    \"name\": \"editableElement\",\n    \"type\": \"Object\",\n    \"value\": null\n  },\n  /**\n   * The the size of the editor.\n   */\n  \"responsiveSize\": {\n    \"name\": \"responsiveSize\",\n    \"type\": \"String\",\n    \"value\": \"xs\",\n    \"reflectToAttribute\": true\n  },\n  /**\n   * The current text selection.\n   */\n  \"savedSelection\": {\n    \"name\": \"savedSelection\",\n    \"type\": \"Object\",\n    \"value\": null\n  },\n  /**\n   * The current text selection.\n   */\n  \"selection\": {\n    \"name\": \"selection\",\n    \"type\": \"Object\",\n    \"value\": null\n  },\n  /**\n   * Should the toolbar stick to the top so that it is always visible.\n   */\n  \"sticky\": {\n    \"name\": \"sticky\",\n    \"type\": \"Boolean\",\n    \"value\": false,\n    \"reflectToAttribute\": true\n  }\n}\n;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"rich-text-editor\";\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    let root = this;\n    window.ResponsiveUtility.requestAvailability();\n    window.dispatchEvent(\n      new CustomEvent(\"responsive-element\", {\n        detail: {\n          element: root,\n          attribute: \"responsive-size\",\n          relativeToParent: true\n        }\n      })\n    );\n    document.designMode = \"on\";\n    document.addEventListener(\"selectionchange\", function(e) {\n      root.getUpdatedSelection();\n    });\n  }\n\n  /**\n   * life cycle, element is disconnected\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    let root = this;\n    document.removeEventListener(\"selectionchange\", function(e) {\n      root.getUpdatedSelection();\n    });\n  }\n\n  /**\n   * cancels edits to the active editableElement\n   */\n  cancel() {\n    this.editableElement.innerHTML = this.canceled;\n    this.editTarget(null);\n  }\n  /**\n   * makes a editableElement editable\n   *\n   * @param {object} an HTML object that can be edited\n   */\n  editTarget(editableElement) {\n    let root = this;\n    if (\n      editableElement.getAttribute(\"id\") === undefined ||\n      editableElement.getAttribute(\"id\") === null\n    )\n      editableElement.setAttribute(\"id\", root._generateUUID());\n\n    if (root.editableElement !== editableElement) {\n      //save changes to previous editableElement\n      if (root.editableElement !== null) {\n        root.editableElement.contentEditable = false;\n        root.editableElement = null;\n      }\n      //activate the editableElement\n      editableElement.parentNode.insertBefore(root, editableElement);\n      root.editableElement = editableElement;\n      root.canceled = editableElement.innerHTML;\n      root.editableElement.contentEditable = true;\n      root.controls = editableElement.getAttribute(\"id\");\n    }\n  }\n\n  /**\n   * Gets the updated selection.\n   */\n  getUpdatedSelection() {\n    let root = this;\n    root.selection =\n      root.editableElement === undefined || root.editableElement === null\n        ? null\n        : root.editableElement.getSelection\n        ? root.editableElement.getSelection()\n        : root._getRange();\n    this.buttons.forEach(function(button) {\n      button.selection = null;\n      button.selection = root.selection;\n    });\n  }\n\n  /**\n   * removes an editable region to the list of editableElements\n   *\n   * @param {object} an HTML object that can be edited\n   */\n  removeEditableRegion(editableElement) {\n    let root = this;\n    for (let i = 0; i < this.editableElements.length; i++) {\n      let item = this.editableElements[i];\n      if (item[0] === editableElement) {\n        item[0].removeEventListener(\"click\", function(e) {\n          root.editTarget(editableElement);\n        });\n        editableElement.removeEventListener(\"blur\", function(e) {\n          root.getUpdatedSelection();\n        });\n        editableElement.removeEventListener(\"mouseout\", function(e) {\n          root.getUpdatedSelection();\n        });\n        item[1].disconnect();\n        this.set(\"editableElements\", this.editableElements.splice(i, 1));\n      }\n    }\n  }\n\n  /**\n   * adds an editable region to the list of editableElements\n   *\n   * @param {object} an HTML object that can be edited\n   */\n  addEditableRegion(editableElement) {\n    let root = this,\n      observer = new MutationObserver(function(e) {\n        root.getUpdatedSelection();\n      });\n    editableElement.addEventListener(\"click\", function(e) {\n      root.editTarget(editableElement);\n    });\n    editableElement.addEventListener(\"blur\", function(e) {\n      root.getUpdatedSelection();\n    });\n    editableElement.addEventListener(\"mouseout\", function(e) {\n      root.getUpdatedSelection();\n    });\n    observer.observe(editableElement, {\n      attributes: false,\n      childList: true,\n      subtree: true,\n      characterData: false\n    });\n    console.log(this.editableElements, editableElement);\n    root.push(\"editableElements\", [editableElement, observer]);\n  }\n\n  /**\n   * Adds a button to the toolbar\n   *\n   * @param {object} the child object in the config object\n   * @param {object} the parent object in the config object\n   */\n  _addButton(child, parent) {\n    let root = this,\n      button = document.createElement(child.type);\n    for (var key in child) {\n      button[key] = child[key];\n    }\n    button.setAttribute(\"class\", \"button\");\n    button.addEventListener(\"mousedown\", function(e) {\n      e.preventDefault();\n      root._preserveSelection(button);\n    });\n    button.addEventListener(\"keydown\", function(e) {\n      e.preventDefault();\n      root._preserveSelection(button);\n    });\n    button.addEventListener(\"deselect\", function(e) {\n      root._getRange().collapse(false);\n    });\n    parent.appendChild(button);\n    return button;\n  }\n\n  /**\n   * Generate a UUID\n   */\n  _generateUUID() {\n    return \"ss-s-s-s-sss\".replace(/s/g, this._uuidPart);\n  }\n  /**\n   * Gets the groups array for the dom-repeat.\n   *\n   * @param {object} the toolbar buttons config object\n   * @param {array} an array the buttons grouped by size\n   */\n  _getButtons(config) {\n    let root = this,\n      toolbar = root.$.toolbar,\n      more = this.$.morebutton,\n      max = 0,\n      sizes = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\"],\n      temp = [];\n    toolbar.innerHTML = \"\";\n    config.forEach(function(item) {\n      if (item.type === \"button-group\") {\n        let group = document.createElement(\"div\");\n        group.setAttribute(\"class\", \"group\");\n        if (item.collapsedUntil !== undefined && item.collapsedUntil !== null)\n          group.setAttribute(\"collapsed-until\", item.collapsedUntil);\n        max = Math.max(max, sizes.indexOf(item.collapsedUntil));\n        item.buttons.forEach(function(button) {\n          max = Math.max(max, sizes.indexOf(button.collapsedUntil));\n          temp.push(root._addButton(button, group));\n        });\n        toolbar.appendChild(group);\n      } else {\n        max = Math.max(max, sizes.indexOf(item.collapsedUntil));\n        temp.push(root._addButton(item, toolbar));\n      }\n      toolbar.appendChild(more);\n      more.collapseMax = sizes[max];\n    });\n    return temp;\n  }\n\n  /**\n   * Normalizes selection data.\n   *\n   * @returns {object} the selection\n   */\n  _getRange() {\n    let sel = window.getSelection();\n    if (sel.getRangeAt && sel.rangeCount) {\n      return sel.getRangeAt(0);\n    } else if (sel) {\n      return sel;\n    } else false;\n  }\n\n  /**\n   * Preserves the selection when a button is pressed\n   *\n   * @param {object} the button\n   */\n  _preserveSelection() {\n    let sel = window.getSelection(),\n      temp = this.selection;\n    this.buttons.forEach(function(button) {\n      button.selection = temp;\n    });\n    sel.removeAllRanges();\n    sel.addRange(temp);\n  }\n\n  /**\n   * Toggles collapsed mode\n   */\n  _toggleMore(e) {\n    this.collapsed = !this.collapsed;\n  }\n\n  /**\n   * Generate UUID\n   */\n  _uuidPart() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n}\n\nexport { RichTextEditor };\n\nwindow.customElements.define(RichTextEditor.tag, RichTextEditor);\n"],"names":["styleElement","document","createElement","css","html","appendChild","register","RichTextEditorButton","PolymerElement","__a11y","this","$","button","selection","toggled","toggledCommand","execCommand","command","commandVal","toggles","queryCommandState","label","_regOrToggled","toggledLabel","innerHTML","tooltip","e","preventDefault","doTextOperation","toggledOff","toggledOn","icon","showTextLabel","name","type","value","notify","disabled","labelStyle","computed","readOnly","toggledCommandVal","toggledIcon","validCommands","window","customElements","define","tag","RichTextEditorMoreButton","dispatchEvent","CustomEvent","detail","observer","reflectToAttribute","collapseMax","RichTextEditorPicker","wrap","parent","commonAncestorContainer","parentNode","temp","options","forEach","row","option","push","closest","join","tagName","toLowerCase","set","_getPickerOptions","data","allowNull","val","undefined","node","createTextNode","extractContents","insertNode","alt","style","items","h","cols","Math","sqrt","length","ceil","i","j","floor","col","_getOptionData","titleAsHtml","RichTextEditorHeadingPicker","blocks","block","RichTextEditor","root","ResponsiveUtility","requestAvailability","element","attribute","relativeToParent","designMode","addEventListener","getUpdatedSelection","removeEventListener","editableElement","canceled","editTarget","getAttribute","setAttribute","_generateUUID","contentEditable","insertBefore","controls","getSelection","_getRange","buttons","editableElements","item","disconnect","splice","MutationObserver","observe","attributes","childList","subtree","characterData","console","log","child","key","_preserveSelection","collapse","replace","_uuidPart","config","toolbar","more","morebutton","max","sizes","group","collapsedUntil","indexOf","_addButton","sel","getRangeAt","rangeCount","removeAllRanges","addRange","collapsed","random","toString","substring"],"mappings":"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4B,OAArB,EAAIN,KAAKsE,WACzBC,SAAS,IACTC,UAAU,6CAvoBNzJ,wDA8FA,WACG,eACG,iBACE,QACR,OACE,+BACM,qCACP,sBACC,eACC,CAAC,gBACA,CACT,MACU,sCAGJ,QACI,gBACD,mCAGD,OACD,aACI,CACX,UACc,oBACG,eACA,sBACH,OACJ,2BAGA,8CAOL,SAIE,MACD,eACA,iBACI,gCAKF,MACF,gBACA,gBACC,aAKE,MACH,iBACA,iBACC,UAKD,MACA,cACA,eACC,CACP,OACW,eACD,uBACG,CACT,SACa,YACH,aACC,YACD,2BAEV,SACa,YACH,aACC,YACD,6BAId,OACW,+BACD,uBACG,CACT,OACW,eACD,uCACE,CACR,OAAW,UAAc,KACzB,OAAW,WAAe,MAC1B,OAAW,WAAe,MAC1B,OAAW,WAAe,MAC1B,OAAW,WAAe,MAC1B,OAAW,WAAe,MAC1B,OAAW,WAAe,QAG9B,SACa,YACH,2BACC,gBACE,OACH,2BAEV,SACa,cACH,6BACC,mBACE,OACH,2BAEV,SACa,oBACH,4BACC,oBACD,6BAId,OACW,aACD,uBACG,CACT,SACa,YACH,aACC,sBACS,qBACH,8BACC,iBACL,OACH,6BAId,OACW,4BACD,uBACG,CACT,SACa,WACH,oBACC,WACD,2BAEV,SACa,YACH,qBACC,YACD,2BAEV,SACa,aACH,sBACC,aACD,6BAId,gBACoB,WACT,iCACD,uBACG,CACT,SACa,iBACH,0BACC,qBACE,OACH,2BAEV,SACa,mBACH,4BACC,uBACE,OACH,6BAId,gBACoB,WACT,yBACD,uBACG,CACT,SACa,yBACH,oCACC,wBACE,OACH,2BAEV,SACa,2BACH,oCACC,0BACE,OACH,2BAEV,gBACoB,aACP,yBACG,mBACL,kBACD,2BACA,2BAEV,OACW,uBACD,sCACC,sBACE,cACH,2BAEV,OACW,uBACD,sCACC,uBACE,eACH,wCASN,MACF,gBACA,eACC,uBAKS,MACV,wBACA,cACC,oBAKQ,MACT,uBACA,eACC,qBAKO,MACR,sBACA,eACC,yBACa,kBAKN,MACR,sBACA,eACC,gBAKE,MACH,iBACA,eACC,aAKD,MACA,cACA,iBACC,sBACa,sCAWf,4BAmQXwC,OAAOC,eAAeC,OAAOoD,EAAenD,IAAKmD"}