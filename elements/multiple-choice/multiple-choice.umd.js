!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@polymer/polymer/polymer-element.js"),require("@polymer/polymer/lib/utils/render-status.js"),require("@polymer/polymer/lib/elements/dom-repeat.js"),require("@polymer/polymer/lib/elements/dom-if.js"),require("@lrnwebcomponents/schema-behaviors/schema-behaviors.js"),require("@polymer/paper-toast/paper-toast.js"),require("@lrnwebcomponents/simple-colors/lib/simple-colors-polymer.js")):"function"==typeof define&&define.amd?define(["exports","@polymer/polymer/polymer-element.js","@polymer/polymer/lib/utils/render-status.js","@polymer/polymer/lib/elements/dom-repeat.js","@polymer/polymer/lib/elements/dom-if.js","@lrnwebcomponents/schema-behaviors/schema-behaviors.js","@polymer/paper-toast/paper-toast.js","@lrnwebcomponents/simple-colors/lib/simple-colors-polymer.js"],t):t((e=e||self).MultipleChoice={},e.polymerElement_js,e.renderStatus_js,null,null,e.schemaBehaviors_js,null,e.simpleColorsPolymer_js)}(this,function(e,t,n,o,r,s,l,i){"use strict";function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function p(e,t,n){return t&&c(e.prototype,t),n&&c(e,n),e}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function m(e,t,n){return(m="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=d(e)););return e}(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(n):r.value}})(e,t,n||e)}function y(){var e,t,n=(e=['\n      <style include="simple-colors-shared-styles-polymer">\n        :host {\n          display: block;\n          padding: 16px 16px 54px 16px;\n          background-color: var(--simple-colors-default-theme-grey-1);\n          color: var(--simple-colors-default-theme-grey-12);\n          --paper-checkbox-unchecked-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --paper-checkbox-unchecked-ink-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --paper-checkbox-checked-color: var(\n            --simple-colors-default-theme-accent-8\n          );\n          --paper-checkbox-checked-ink-color: var(\n            --simple-colors-default-theme-accent-8\n          );\n          --paper-checkbox-checkmark-color: var(\n            --simple-colors-default-theme-grey-1\n          );\n          --paper-checkbox-label-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --paper-checkbox-error-color: var(\n            --simple-colors-default-theme-red-8\n          );\n        }\n        :host([accent-color="grey"]),\n        :host([accent-color="red"]),\n        :host([accent-color="green"]) {\n          --paper-checkbox-checked-color: var(\n            --simple-colors-default-theme-blue-8\n          );\n          --paper-checkbox-checked-ink-color: var(\n            --simple-colors-default-theme-blue-8\n          );\n        }\n        :host #check {\n          background-color: var(--simple-colors-default-theme-accent-8);\n          color: var(--simple-colors-default-theme-grey-1);\n        }\n        :host #check:hover {\n          background-color: var(--simple-colors-default-theme-accent-9);\n        }\n        :host([accent-color="red"]) #check,\n        :host([accent-color="green"]) #check {\n          background-color: var(--simple-colors-default-theme-blue-8);\n          color: var(--simple-colors-default-theme-grey-1);\n        }\n        :host([accent-color="red"]) #check:hover,\n        :host([accent-color="green"]) #check:hover {\n          background-color: var(--simple-colors-default-theme-blue-9);\n        }\n        :host([accent-color="grey"]) #check,\n        :host paper-button {\n          background-color: var(--simple-colors-default-theme-grey-1);\n          color: var(--simple-colors-default-theme-grey-12);\n        }\n        :host([accent-color="grey"]) #check:hover,\n        :host paper-button:hover {\n          cursor: pointer;\n          background-color: var(--simple-colors-default-theme-grey-2);\n          color: var(--simple-colors-default-theme-grey-12);\n        }\n        .red {\n          background-color: var(--simple-colors-default-theme-red-8);\n        }\n        .green {\n          background-color: var(--simple-colors-default-theme-green-8);\n        }\n        h3 {\n          margin: 8px;\n        }\n        ul {\n          list-style: none;\n          padding: 0;\n          margin: 0;\n        }\n        ul li {\n          padding: 8px;\n        }\n        paper-radio-button {\n          padding: 8px;\n          display: block;\n        }\n        paper-checkbox {\n          padding: 8px;\n        }\n        iron-icon {\n          display: inline-flex;\n        }\n      </style>\n      <meta property="oer:assessing" content$="[[relatedResource]]" />\n      <h3 hidden$="[[hideTitle]]">\n        <span property="oer:name">[[title]]</span>\n      </h3>\n      <div>[[question]]</div>\n      <template is="dom-if" if="[[singleOption]]" restamp>\n        <paper-radio-group>\n          <template\n            is="dom-repeat"\n            items="[[displayedAnswers]]"\n            as="answer"\n            mutable-data\n          >\n            <paper-radio-button\n              disabled$="[[disabled]]"\n              property="oer:answer"\n              name$="[[index]]"\n              checked="{{answer.userGuess}}"\n              >[[answer.label]]</paper-radio-button\n            >\n          </template>\n        </paper-radio-group>\n      </template>\n      <template is="dom-if" if="[[!singleOption]]" restamp>\n        <ul>\n          <template\n            is="dom-repeat"\n            items="[[displayedAnswers]]"\n            as="answer"\n            mutable-data\n          >\n            <li>\n              <paper-checkbox\n                disabled$="[[disabled]]"\n                property="oer:answer"\n                checked="{{answer.userGuess}}"\n                >[[answer.label]]</paper-checkbox\n              >\n            </li>\n          </template>\n        </ul>\n      </template>\n      <div id="buttons" hidden$="[[hideButtons]]">\n        <paper-button\n          id="check"\n          disabled$="[[disabled]]"\n          raised\n          on-click="_verifyAnswers"\n          >[[checkLabel]]</paper-button\n        >\n        <paper-button\n          id="reset"\n          disabled$="[[disabled]]"\n          raised\n          on-click="resetAnswers"\n          >[[resetLabel]]</paper-button\n        >\n      </div>\n      <paper-toast\n        id="toast"\n        scroll-action="cancel"\n        duration="6000"\n        position-target="[[positionTarget]]"\n        class$="fit-bottom [[__toastColor]]"\n      >\n        [[__toastText]]\n        <iron-icon icon="[[__toastIcon]]" style="margin-left:16px;"></iron-icon>\n      </paper-toast>\n    '],(t=['\n      <style include="simple-colors-shared-styles-polymer">\n        :host {\n          display: block;\n          padding: 16px 16px 54px 16px;\n          background-color: var(--simple-colors-default-theme-grey-1);\n          color: var(--simple-colors-default-theme-grey-12);\n          --paper-checkbox-unchecked-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --paper-checkbox-unchecked-ink-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --paper-checkbox-checked-color: var(\n            --simple-colors-default-theme-accent-8\n          );\n          --paper-checkbox-checked-ink-color: var(\n            --simple-colors-default-theme-accent-8\n          );\n          --paper-checkbox-checkmark-color: var(\n            --simple-colors-default-theme-grey-1\n          );\n          --paper-checkbox-label-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --paper-checkbox-error-color: var(\n            --simple-colors-default-theme-red-8\n          );\n        }\n        :host([accent-color="grey"]),\n        :host([accent-color="red"]),\n        :host([accent-color="green"]) {\n          --paper-checkbox-checked-color: var(\n            --simple-colors-default-theme-blue-8\n          );\n          --paper-checkbox-checked-ink-color: var(\n            --simple-colors-default-theme-blue-8\n          );\n        }\n        :host #check {\n          background-color: var(--simple-colors-default-theme-accent-8);\n          color: var(--simple-colors-default-theme-grey-1);\n        }\n        :host #check:hover {\n          background-color: var(--simple-colors-default-theme-accent-9);\n        }\n        :host([accent-color="red"]) #check,\n        :host([accent-color="green"]) #check {\n          background-color: var(--simple-colors-default-theme-blue-8);\n          color: var(--simple-colors-default-theme-grey-1);\n        }\n        :host([accent-color="red"]) #check:hover,\n        :host([accent-color="green"]) #check:hover {\n          background-color: var(--simple-colors-default-theme-blue-9);\n        }\n        :host([accent-color="grey"]) #check,\n        :host paper-button {\n          background-color: var(--simple-colors-default-theme-grey-1);\n          color: var(--simple-colors-default-theme-grey-12);\n        }\n        :host([accent-color="grey"]) #check:hover,\n        :host paper-button:hover {\n          cursor: pointer;\n          background-color: var(--simple-colors-default-theme-grey-2);\n          color: var(--simple-colors-default-theme-grey-12);\n        }\n        .red {\n          background-color: var(--simple-colors-default-theme-red-8);\n        }\n        .green {\n          background-color: var(--simple-colors-default-theme-green-8);\n        }\n        h3 {\n          margin: 8px;\n        }\n        ul {\n          list-style: none;\n          padding: 0;\n          margin: 0;\n        }\n        ul li {\n          padding: 8px;\n        }\n        paper-radio-button {\n          padding: 8px;\n          display: block;\n        }\n        paper-checkbox {\n          padding: 8px;\n        }\n        iron-icon {\n          display: inline-flex;\n        }\n      </style>\n      <meta property="oer:assessing" content\\$="[[relatedResource]]" />\n      <h3 hidden\\$="[[hideTitle]]">\n        <span property="oer:name">[[title]]</span>\n      </h3>\n      <div>[[question]]</div>\n      <template is="dom-if" if="[[singleOption]]" restamp>\n        <paper-radio-group>\n          <template\n            is="dom-repeat"\n            items="[[displayedAnswers]]"\n            as="answer"\n            mutable-data\n          >\n            <paper-radio-button\n              disabled\\$="[[disabled]]"\n              property="oer:answer"\n              name$="[[index]]"\n              checked="{{answer.userGuess}}"\n              >[[answer.label]]</paper-radio-button\n            >\n          </template>\n        </paper-radio-group>\n      </template>\n      <template is="dom-if" if="[[!singleOption]]" restamp>\n        <ul>\n          <template\n            is="dom-repeat"\n            items="[[displayedAnswers]]"\n            as="answer"\n            mutable-data\n          >\n            <li>\n              <paper-checkbox\n                disabled\\$="[[disabled]]"\n                property="oer:answer"\n                checked="{{answer.userGuess}}"\n                >[[answer.label]]</paper-checkbox\n              >\n            </li>\n          </template>\n        </ul>\n      </template>\n      <div id="buttons" hidden\\$="[[hideButtons]]">\n        <paper-button\n          id="check"\n          disabled\\$="[[disabled]]"\n          raised\n          on-click="_verifyAnswers"\n          >[[checkLabel]]</paper-button\n        >\n        <paper-button\n          id="reset"\n          disabled\\$="[[disabled]]"\n          raised\n          on-click="resetAnswers"\n          >[[resetLabel]]</paper-button\n        >\n      </div>\n      <paper-toast\n        id="toast"\n        scroll-action="cancel"\n        duration="6000"\n        position-target="[[positionTarget]]"\n        class\\$="fit-bottom [[__toastColor]]"\n      >\n        [[__toastText]]\n        <iron-icon icon="[[__toastIcon]]" style="margin-left:16px;"></iron-icon>\n      </paper-toast>\n    '])||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}})));return y=function(){return n},n}var b=function(e){function o(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),e=h(this,d(o).call(this)),import("@polymer/iron-icons/iron-icons.js"),import("@polymer/iron-icon/iron-icon.js"),import("@polymer/paper-button/paper-button.js"),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(o,s.SchemaBehaviors(i.SimpleColorsPolymer)),p(o,null,[{key:"tag",get:function(){return"multiple-choice"}}]),p(o,[{key:"_valueChanged",value:function(e){for(var t in e)for(var n in e[t])this.notifyPath("displayedAnswers."+t+"."+n)}},{key:"resetAnswers",value:function(e){var t=this;for(var n in this.shadowRoot.querySelector("#toast").hide(),this.displayedAnswers)this.displayedAnswers[n].userGuess&&(this.displayedAnswers[n].userGuess=!1);setTimeout(function(){var e=t.answers;t.set("answers",[]),t.set("answers",e)},100)}},{key:"checkAnswers",value:function(){var e=!0;for(var t in this.displayedAnswers)0!=e&&this.displayedAnswers[t].correct&&this.displayedAnswers[t].userGuess?e=!0:this.displayedAnswers[t].correct&&!this.displayedAnswers[t].userGuess?e=!1:!this.displayedAnswers[t].correct&&this.displayedAnswers[t].userGuess&&(e=!1);return e}},{key:"_verifyAnswers",value:function(e){this.shadowRoot.querySelector("#toast").hide();var t=this.checkAnswers();t?(this.__toastColor="green",this.__toastIcon="thumb-up",this.__toastText=this.correctText):(this.__toastColor="red",this.__toastIcon="thumb-down",this.__toastText=this.incorrectText),this.shadowRoot.querySelector("#toast").show();var n={activityDisplay:"answered",objectName:this.quizName,resultSuccess:t};this.dispatchEvent(new CustomEvent("user-engagement",{bubbles:!0,composed:!0,cancelable:!1,detail:n}))}},{key:"_computeDisplayedAnswers",value:function(e,t){if("undefined"!==a(e)&&null!=e&&e.length>0&&t){for(var n,o,r=e,s=r.length;0!==s;)o=Math.floor(Math.random()*s),n=r[s-=1],r[s]=r[o],r[o]=n;return r}return e}},{key:"preProcessHaxInsertContent",value:function(e){return e.properties.answers=e.properties.answers.map(function(e){return e.userGuess&&delete e.userGuess,e}),e}},{key:"connectedCallback",value:function(){m(d(o.prototype),"connectedCallback",this).call(this),this.shadowRoot.querySelector("#positionTarget")&&(this.positionTarget=this.shadowRoot.querySelector("#positionTarget")),this.singleOption?(import("@polymer/paper-radio-group/paper-radio-group.js"),import("@polymer/paper-radio-button/paper-radio-button.js")):import("@polymer/paper-checkbox/paper-checkbox.js"),this.setAttribute("typeof","oer:Assessment"),n.afterNextRender(this,function(){this.shadowRoot.querySelector("#toast").fitInto=this})}}],[{key:"template",get:function(){return t.html(y())}},{key:"properties",get:function(){var e={title:{type:String,value:""},positionTarget:{type:Object},disabled:{type:Boolean,value:!1},singleOption:{type:Boolean,value:!1},checkLabel:{type:String,value:"Check answer"},resetLabel:{type:String,value:"Reset"},relatedResource:{type:String},hideTitle:{type:Boolean,value:!1},question:{type:String,value:""},answers:{type:Array,value:[],notify:!0},displayedAnswers:{type:Array,computed:"_computeDisplayedAnswers(answers, randomize)",observer:"_valueChanged",notify:!0},correctText:{type:String,value:"Great job!"},incorrectText:{type:String,value:"Better luck next time!"},quizName:{type:String,value:"Default Quiz"},randomize:{type:Boolean,value:!1,reflectToAttribute:!0},hideButtons:{type:Boolean,value:!1}};return m(d(o),"properties",this)&&(e=Object.assign(e,m(d(o),"properties",this))),e}},{key:"haxProperties",get:function(){return{canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"Multiple choice",description:"Multiple choice self check",icon:"icons:list",color:"purple",groups:["Instructional"],handles:[],meta:{author:"LRNWebComponents"}},settings:{quick:[{property:"title",title:"Title",description:"The title of the element",inputMethod:"textfield",icon:"editor:title"},{property:"question",title:"Question",description:"Question for users to respond to.",inputMethod:"textfield",icon:"icons:help"}],configure:[{property:"title",title:"Title",description:"The title of the element",inputMethod:"textfield"},{property:"hideTitle",title:"Hide title",description:"Whether or not to display the title",inputMethod:"boolean"},{property:"question",title:"Question",description:"Question for users to respond to.",inputMethod:"textfield"},{property:"randomize",title:"Randomize",description:"Randomize the answers dynamically",inputMethod:"boolean"},{property:"answers",title:"Answer set",description:"Answers in a multiple choice",inputMethod:"array",itemLabel:"label",properties:[{property:"correct",title:"Correct",description:"If this is correct or not",inputMethod:"boolean"},{property:"label",title:"Answer",description:"Possible answer to the question",inputMethod:"textfield",required:!0}]},{property:"correctText",title:"Correct feedback",description:"Feedback when they get it right",inputMethod:"textfield"},{property:"incorrectText",title:"Incorrect feedback",description:"Feedback when they get it wrong",inputMethod:"textfield"},{property:"quizName",title:"Name of the quiz",description:"Quiz name passed in",inputMethod:"textfield"}],advanced:[{property:"checkLabel",title:"Check answers label",description:"Label for getting solution feedback",inputMethod:"textfield"},{property:"resetLabel",title:"Reset label",description:"label for the reset button",inputMethod:"textfield"}]},saveOptions:{unsetAttributes:["__utils","displayed-answers","displayedAnswers"]}}}}]),o}();window.customElements.define(b.tag,b),e.MultipleChoice=b,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=multiple-choice.umd.js.map
