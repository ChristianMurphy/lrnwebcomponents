{"version":3,"file":"multiple-choice.umd.js","sources":["multiple-choice.umd.js"],"sourcesContent":["import { html, css } from \"lit-element/lit-element.js\";\nimport { SchemaBehaviors } from \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\nimport { SimpleColors } from \"@lrnwebcomponents/simple-colors/simple-colors.js\";\n/**\n * `multiple-choice`\n * `Ask the user a question from a set of possible answers.`\n * @demo demo/index.html\n * @customElement multiple-choice\n */\nclass MultipleChoice extends SchemaBehaviors(SimpleColors) {\n  /**\n   * LitElement constructable styles enhancement\n   */\n  static get styles() {\n    return [\n      ...super.styles,\n      css`\n        :host {\n          display: block;\n          padding: 16px 16px 54px 16px;\n          background-color: var(--simple-colors-default-theme-grey-1);\n          color: var(--simple-colors-default-theme-grey-12);\n          --paper-checkbox-unchecked-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --paper-checkbox-unchecked-ink-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --paper-checkbox-checked-color: var(\n            --simple-colors-default-theme-accent-8\n          );\n          --paper-checkbox-checked-ink-color: var(\n            --simple-colors-default-theme-accent-8\n          );\n          --paper-checkbox-checkmark-color: var(\n            --simple-colors-default-theme-grey-1\n          );\n          --paper-checkbox-label-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --paper-checkbox-error-color: var(\n            --simple-colors-default-theme-red-8\n          );\n        }\n        :host([accent-color=\"grey\"]),\n        :host([accent-color=\"red\"]),\n        :host([accent-color=\"green\"]) {\n          --paper-checkbox-checked-color: var(\n            --simple-colors-default-theme-blue-8\n          );\n          --paper-checkbox-checked-ink-color: var(\n            --simple-colors-default-theme-blue-8\n          );\n        }\n        :host #check {\n          background-color: var(--simple-colors-default-theme-accent-8);\n          color: var(--simple-colors-default-theme-grey-1);\n        }\n        :host #check:hover {\n          background-color: var(--simple-colors-default-theme-accent-9);\n        }\n        :host([accent-color=\"red\"]) #check,\n        :host([accent-color=\"green\"]) #check {\n          background-color: var(--simple-colors-default-theme-blue-8);\n          color: var(--simple-colors-default-theme-grey-1);\n        }\n        :host([accent-color=\"red\"]) #check:hover,\n        :host([accent-color=\"green\"]) #check:hover {\n          background-color: var(--simple-colors-default-theme-blue-9);\n        }\n        :host([accent-color=\"grey\"]) #check,\n        :host paper-button {\n          background-color: var(--simple-colors-default-theme-grey-1);\n          color: var(--simple-colors-default-theme-grey-12);\n        }\n        :host([accent-color=\"grey\"]) #check:hover,\n        :host paper-button:hover {\n          cursor: pointer;\n          background-color: var(--simple-colors-default-theme-grey-2);\n          color: var(--simple-colors-default-theme-grey-12);\n        }\n        .red {\n          background-color: var(--simple-colors-default-theme-red-8);\n        }\n        .green {\n          background-color: var(--simple-colors-default-theme-green-8);\n        }\n        h3 {\n          margin: 8px;\n        }\n        ul {\n          list-style: none;\n          padding: 0;\n          margin: 0;\n        }\n        ul li {\n          padding: 8px;\n        }\n        paper-radio-button {\n          padding: 8px;\n          display: block;\n        }\n        paper-checkbox {\n          padding: 8px;\n        }\n        iron-icon {\n          display: inline-flex;\n        }\n      `\n    ];\n  }\n  static get tag() {\n    return \"multiple-choice\";\n  }\n  constructor() {\n    super();\n    import(\"@polymer/paper-toast/paper-toast.js\");\n    import(\"@polymer/iron-icons/iron-icons.js\");\n    import(\"@polymer/iron-icon/iron-icon.js\");\n    import(\"@polymer/paper-button/paper-button.js\");\n    this.randomize = false;\n    this.hideButtons = false;\n    this.title = \"\";\n    this.disabled = false;\n    this.singleOption = false;\n    this.checkLabel = \"Check answer\";\n    this.resetLabel = \"Reset\";\n    this.hideTitle = false;\n    this.question = \"\";\n    this.answers = [];\n    this.displayedAnswers = [];\n    this.correctText = \"Great job!\";\n    this.incorrectText = \"Better luck next time!\";\n    this.quizName = \"default\";\n  }\n  updated(changedProperties) {\n    if (super.updated) {\n      super.updated(changedProperties);\n    }\n    changedProperties.forEach((oldValue, propName) => {\n      let notifiedProps = [\"answers\", \"displayedAnswers\"];\n      if (notifiedProps.includes(propName)) {\n        // notify\n        let eventName = `${propName\n          .replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, \"$1-$2\")\n          .toLowerCase()}-changed`;\n        this.dispatchEvent(\n          new CustomEvent(eventName, {\n            detail: {\n              value: this[propName]\n            }\n          })\n        );\n      }\n      if ([\"answers\", \"randomize\"].includes(propName)) {\n        this.displayedAnswers = [\n          ...this._computeDisplayedAnswers(this.answers, this.randomize)\n        ];\n      }\n      // single option implies it's a radio group or if multiple, do check boxes\n      if (propName == \"singleOption\") {\n        this.singleOptionChanged(this[propName]);\n      }\n    });\n  }\n  singleOptionChanged(singleOption) {\n    if (singleOption) {\n      import(\"@polymer/paper-radio-group/paper-radio-group.js\");\n      import(\"@polymer/paper-radio-button/paper-radio-button.js\");\n    } else {\n      import(\"@polymer/paper-checkbox/paper-checkbox.js\");\n    }\n  }\n  render() {\n    return html`\n      <meta property=\"oer:assessing\" content=\"${this.relatedResource}\" />\n      ${this.title\n        ? html`\n            <h3><span property=\"oer:name\">${this.title}</span></h3>\n          `\n        : ``}\n      <div>${this.question}</div>\n      ${this.singleOption\n        ? html`\n            <paper-radio-group>\n              ${this.displayedAnswers.map(\n                (answer, index) => html`\n                  <paper-radio-button\n                    ?disabled=\"${this.disabled}\"\n                    property=\"oer:answer\"\n                    name=\"${index}\"\n                    ?checked=\"${answer.userGuess}\"\n                    @checked-changed=\"${this.checkedEvent}\"\n                    >${answer.label}</paper-radio-button\n                  >\n                `\n              )}\n            </paper-radio-group>\n          `\n        : html`\n            <ul>\n              ${this.displayedAnswers.map(\n                (answer, index) => html`\n                  <li>\n                    <paper-checkbox\n                      ?disabled=\"${this.disabled}\"\n                      property=\"oer:answer\"\n                      name=\"${index}\"\n                      ?checked=\"${answer.userGuess}\"\n                      @checked-changed=\"${this.checkedEvent}\"\n                      >${answer.label}</paper-checkbox\n                    >\n                  </li>\n                `\n              )}\n            </ul>\n          `}\n      ${!this.hideButtons\n        ? html`\n            <div id=\"buttons\">\n              <paper-button\n                id=\"check\"\n                ?disabled=\"${this.disabled}\"\n                raised\n                @click=\"${this._verifyAnswers}\"\n                >${this.checkLabel}</paper-button\n              >\n              <paper-button\n                id=\"reset\"\n                ?disabled=\"${this.disabled}\"\n                raised\n                @click=\"${this.resetAnswers}\"\n                >${this.resetLabel}</paper-button\n              >\n            </div>\n          `\n        : ``}\n      <paper-toast\n        id=\"toast\"\n        scroll-action=\"cancel\"\n        duration=\"6000\"\n        position-target=\"${this.positionTarget}\"\n        class=\"fit-bottom ${this.__toastColor}\"\n      >\n        ${this.__toastText}\n        <iron-icon\n          icon=\"${this.__toastIcon}\"\n          style=\"margin-left:16px;\"\n        ></iron-icon>\n      </paper-toast>\n    `;\n  }\n  checkedEvent(e) {\n    let attr = this.displayedAnswers;\n    attr[e.target.name].userGuess = e.detail.value;\n    this.displayedAnswers = [...attr];\n  }\n  static get properties() {\n    return {\n      ...super.properties,\n      /**\n       * Title\n       */\n      title: {\n        type: String\n      },\n      positionTarget: {\n        type: Object\n      },\n      /**\n       * Support disabling interaction with the entire board\n       */\n      disabled: {\n        type: Boolean\n      },\n      /**\n       * Simple option, otherwise allow multiple via checkbox\n       */\n      singleOption: {\n        type: Boolean,\n        attribute: \"single-option\"\n      },\n      /**\n       * Text of the label to check your answer\n       */\n      checkLabel: {\n        type: String,\n        attribute: \"check-label\"\n      },\n      /**\n       * Text of the reset button\n       */\n      resetLabel: {\n        type: String,\n        attribute: \"reset-label\"\n      },\n      /**\n       * Related Resource ID\n       */\n      relatedResource: {\n        type: String,\n        attribute: \"related-resource\"\n      },\n      /**\n       * Flag to hide the title\n       */\n      hideTitle: {\n        type: Boolean,\n        attribute: \"hide-title\"\n      },\n      /**\n       * Question to ask\n       */\n      question: {\n        type: String\n      },\n      /**\n       * Array of possible answers\n       */\n      answers: {\n        type: Array\n      },\n      /**\n       * Displayed Answer set.\n       */\n      displayedAnswers: {\n        type: Array\n      },\n      /**\n       * Correct answer text to display\n       */\n      correctText: {\n        type: String,\n        attribute: \"correct-text\"\n      },\n      /**\n       * Incorrect answer text to display\n       */\n      incorrectText: {\n        type: String,\n        attribute: \"incorrect-text\"\n      },\n      /**\n       * Name of the quiz - hardcoded for now from HTML\n       */\n      quizName: {\n        type: String,\n        attribute: \"quiz-name\"\n      },\n      /**\n       * Randomize the display of the answers\n       */\n      randomize: {\n        type: Boolean,\n        reflect: true\n      },\n      /**\n       * flag to hide buttons\n       */\n      hideButtons: {\n        type: Boolean,\n        attribute: \"hide-buttons\"\n      },\n      __toastText: {\n        type: String\n      },\n      __toastColor: {\n        type: String\n      },\n      __toastIcon: {\n        type: String\n      }\n    };\n  }\n\n  /**\n   * Reset user answers and shuffle the board again.\n   */\n  resetAnswers(e) {\n    this.shadowRoot.querySelector(\"#toast\").hide();\n    this.displayedAnswers = [];\n    const answers = this.answers;\n    this.answers.forEach(el => {\n      el.userGuess = false;\n    });\n    this.answers = [...answers];\n  }\n\n  /**\n   * Return if the current answers are correct\n   */\n  checkAnswers() {\n    let gotRight = true;\n    // see that they got them all right\n    for (var i in this.displayedAnswers) {\n      if (\n        gotRight != false &&\n        this.displayedAnswers[i].correct &&\n        this.displayedAnswers[i].userGuess\n      ) {\n        gotRight = true;\n      } else if (\n        this.displayedAnswers[i].correct &&\n        !this.displayedAnswers[i].userGuess\n      ) {\n        gotRight = false;\n      } else if (\n        !this.displayedAnswers[i].correct &&\n        this.displayedAnswers[i].userGuess\n      ) {\n        gotRight = false;\n      }\n    }\n    return gotRight;\n  }\n  /**\n   * Verify the answers of the user based on their saying\n   * that they want to see how they did.\n   */\n  _verifyAnswers(e) {\n    this.shadowRoot.querySelector(\"#toast\").hide();\n    let gotRight = this.checkAnswers();\n    // see if they got this correct based on their answers\n    if (gotRight) {\n      this.__toastColor = \"green\";\n      this.__toastIcon = \"thumb-up\";\n      this.__toastText = this.correctText;\n    } else {\n      this.__toastColor = \"red\";\n      this.__toastIcon = \"thumb-down\";\n      this.__toastText = this.incorrectText;\n    }\n    this.shadowRoot.querySelector(\"#toast\").show();\n    // start of data passing, this is a prototype atm\n    let eventData = {\n      activityDisplay: \"answered\",\n      objectName: this.quizName,\n      resultSuccess: gotRight\n    };\n    this.dispatchEvent(\n      new CustomEvent(\"user-engagement\", {\n        bubbles: true,\n        composed: true,\n        cancelable: false,\n        detail: eventData\n      })\n    );\n  }\n\n  /**\n   * Figure out the order of the answers which will be displayed\n   */\n  _computeDisplayedAnswers(answers, randomize) {\n    if (\n      typeof answers !== typeof undefined &&\n      answers != null &&\n      answers.length > 0 &&\n      randomize\n    ) {\n      let random = answers;\n      var currentIndex = random.length,\n        temporaryValue,\n        randomIndex;\n      // While there remain elements to shuffle...\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        // And swap it with the current element.\n        temporaryValue = random[currentIndex];\n        random[currentIndex] = random[randomIndex];\n        random[randomIndex] = temporaryValue;\n      }\n      // @todo apply a random sort to the answers array\n      return random;\n    } else {\n      return answers;\n    }\n  }\n  static get haxProperties() {\n    return {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Multiple choice\",\n        description: \"Multiple choice self check\",\n        icon: \"icons:list\",\n        color: \"purple\",\n        groups: [\"Instructional\"],\n        handles: [],\n        meta: {\n          author: \"ELMS:LN\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"question\",\n            title: \"Question\",\n            description: \"Question for users to respond to.\",\n            inputMethod: \"textfield\",\n            icon: \"icons:help\"\n          }\n        ],\n        configure: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"hideTitle\",\n            title: \"Hide title\",\n            description: \"Whether or not to display the title\",\n            inputMethod: \"boolean\"\n          },\n          {\n            property: \"question\",\n            title: \"Question\",\n            description: \"Question for users to respond to.\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"randomize\",\n            title: \"Randomize\",\n            description: \"Randomize the answers dynamically\",\n            inputMethod: \"boolean\"\n          },\n          {\n            property: \"answers\",\n            title: \"Answer set\",\n            description: \"Answers in a multiple choice\",\n            inputMethod: \"array\",\n            itemLabel: \"label\",\n            properties: [\n              {\n                property: \"correct\",\n                title: \"Correct\",\n                description: \"If this is correct or not\",\n                inputMethod: \"boolean\"\n              },\n              {\n                property: \"label\",\n                title: \"Answer\",\n                description: \"Possible answer to the question\",\n                inputMethod: \"textfield\",\n                required: true\n              }\n            ]\n          },\n          {\n            property: \"correctText\",\n            title: \"Correct feedback\",\n            description: \"Feedback when they get it right\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"incorrectText\",\n            title: \"Incorrect feedback\",\n            description: \"Feedback when they get it wrong\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"quizName\",\n            title: \"Name of the quiz\",\n            description: \"Quiz name passed in\",\n            inputMethod: \"textfield\"\n          }\n        ],\n        advanced: [\n          {\n            property: \"checkLabel\",\n            title: \"Check answers label\",\n            description: \"Label for getting solution feedback\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"resetLabel\",\n            title: \"Reset label\",\n            description: \"label for the reset button\",\n            inputMethod: \"textfield\"\n          }\n        ]\n      },\n      saveOptions: {\n        unsetAttributes: [\"__utils\", \"displayed-answers\", \"displayedAnswers\"]\n      }\n    };\n  }\n  /**\n   * HAX preprocess insert content hook\n   */\n  preProcessHaxInsertContent(detail) {\n    // ensure we dont accidently have the answer displayed!\n    detail.properties.answers = detail.properties.answers.map(function(val) {\n      if (val.userGuess) {\n        delete val.userGuess;\n      }\n      return val;\n    });\n    return detail;\n  }\n  firstUpdated(changedProperties) {\n    if (super.firstUpdated) {\n      super.firstUpdated(changedProperties);\n    }\n    if (this.shadowRoot.querySelector(\"#positionTarget\")) {\n      this.positionTarget = this.shadowRoot.querySelector(\"#positionTarget\");\n    }\n    this.setAttribute(\"typeof\", \"oer:Assessment\");\n    this.shadowRoot.querySelector(\"#toast\").fitInto = this;\n  }\n}\nwindow.customElements.define(MultipleChoice.tag, MultipleChoice);\nexport { MultipleChoice };\n"],"names":["MultipleChoice","randomize","hideButtons","title","disabled","singleOption","checkLabel","resetLabel","hideTitle","question","answers","displayedAnswers","correctText","incorrectText","quizName","SchemaBehaviors","SimpleColors","css","changedProperties","forEach","oldValue","propName","includes","eventName","replace","toLowerCase","_this2","dispatchEvent","CustomEvent","detail","value","_computeDisplayedAnswers","singleOptionChanged","html","this","relatedResource","map","answer","index","_this3","userGuess","checkedEvent","label","_verifyAnswers","resetAnswers","positionTarget","__toastColor","__toastText","__toastIcon","e","attr","target","name","shadowRoot","querySelector","hide","el","gotRight","i","correct","checkAnswers","show","eventData","activityDisplay","objectName","resultSuccess","bubbles","composed","cancelable","_typeof","length","temporaryValue","randomIndex","random","currentIndex","Math","floor","properties","val","setAttribute","fitInto","type","String","Object","Boolean","attribute","Array","reflect","canScale","canPosition","canEditSource","gizmo","description","icon","color","groups","handles","meta","author","settings","quick","property","inputMethod","configure","itemLabel","required","advanced","saveOptions","unsetAttributes","window","customElements","define","tag"],"mappings":"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"}