{"version":3,"file":"multiple-choice.umd.js","sources":["multiple-choice.umd.js"],"sourcesContent":["import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { afterNextRender } from \"@polymer/polymer/lib/utils/render-status.js\";\nimport \"@polymer/polymer/lib/elements/dom-repeat.js\";\nimport \"@polymer/polymer/lib/elements/dom-if.js\";\nimport { SchemaBehaviors } from \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\nimport \"@polymer/paper-toast/paper-toast.js\";\nimport { SimpleColors } from \"@lrnwebcomponents/simple-colors/simple-colors.js\";\n/**\n * `multiple-choice`\n * `Ask the user a question from a set of possible answers.`\n * @demo demo/index.html\n */\nclass MultipleChoice extends SchemaBehaviors(SimpleColors) {\n  static get tag() {\n    return \"multiple-choice\";\n  }\n  constructor() {\n    super();\n    import(\"@polymer/iron-icons/iron-icons.js\");\n    import(\"@polymer/iron-icon/iron-icon.js\");\n    import(\"@polymer/paper-button/paper-button.js\");\n  }\n  static get template() {\n    return html`\n      <style include=\"simple-colors-shared-styles\">\n        :host {\n          display: block;\n          padding: 16px 16px 54px 16px;\n          background-color: var(--simple-colors-default-theme-grey-1);\n          color: var(--simple-colors-default-theme-grey-12);\n          --paper-checkbox-unchecked-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --paper-checkbox-unchecked-ink-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --paper-checkbox-checked-color: var(\n            --simple-colors-default-theme-accent-8\n          );\n          --paper-checkbox-checked-ink-color: var(\n            --simple-colors-default-theme-accent-8\n          );\n          --paper-checkbox-checkmark-color: var(\n            --simple-colors-default-theme-grey-1\n          );\n          --paper-checkbox-label-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --paper-checkbox-error-color: var(\n            --simple-colors-default-theme-red-8\n          );\n        }\n        :host([accent-color=\"grey\"]),\n        :host([accent-color=\"red\"]),\n        :host([accent-color=\"green\"]) {\n          --paper-checkbox-checked-color: var(\n            --simple-colors-default-theme-blue-8\n          );\n          --paper-checkbox-checked-ink-color: var(\n            --simple-colors-default-theme-blue-8\n          );\n        }\n        :host #check {\n          background-color: var(--simple-colors-default-theme-accent-8);\n          color: var(--simple-colors-default-theme-grey-1);\n        }\n        :host #check:hover {\n          background-color: var(--simple-colors-default-theme-accent-9);\n        }\n        :host([accent-color=\"red\"]) #check,\n        :host([accent-color=\"green\"]) #check {\n          background-color: var(--simple-colors-default-theme-blue-8);\n          color: var(--simple-colors-default-theme-grey-1);\n        }\n        :host([accent-color=\"red\"]) #check:hover,\n        :host([accent-color=\"green\"]) #check:hover {\n          background-color: var(--simple-colors-default-theme-blue-9);\n        }\n        :host([accent-color=\"grey\"]) #check,\n        :host paper-button {\n          background-color: var(--simple-colors-default-theme-grey-1);\n          color: var(--simple-colors-default-theme-grey-12);\n        }\n        :host([accent-color=\"grey\"]) #check:hover,\n        :host paper-button:hover {\n          cursor: pointer;\n          background-color: var(--simple-colors-default-theme-grey-2);\n          color: var(--simple-colors-default-theme-grey-12);\n        }\n        .red {\n          background-color: var(--simple-colors-default-theme-red-8);\n        }\n        .green {\n          background-color: var(--simple-colors-default-theme-green-8);\n        }\n        h3 {\n          margin: 8px;\n        }\n        ul {\n          list-style: none;\n          padding: 0;\n          margin: 0;\n        }\n        ul li {\n          padding: 8px;\n        }\n        paper-radio-button {\n          padding: 8px;\n          display: block;\n        }\n        paper-checkbox {\n          padding: 8px;\n        }\n        iron-icon {\n          display: inline-flex;\n        }\n      </style>\n      <meta property=\"oer:assessing\" content\\$=\"[[relatedResource]]\" />\n      <h3 hidden\\$=\"[[hideTitle]]\">\n        <span property=\"oer:name\">[[title]]</span>\n      </h3>\n      <div>[[question]]</div>\n      <template is=\"dom-if\" if=\"[[singleOption]]\" restamp>\n        <paper-radio-group>\n          <template\n            is=\"dom-repeat\"\n            items=\"[[displayedAnswers]]\"\n            as=\"answer\"\n            mutable-data\n          >\n            <paper-radio-button\n              disabled\\$=\"[[disabled]]\"\n              property=\"oer:answer\"\n              name$=\"[[index]]\"\n              checked=\"{{answer.userGuess}}\"\n              >[[answer.label]]</paper-radio-button\n            >\n          </template>\n        </paper-radio-group>\n      </template>\n      <template is=\"dom-if\" if=\"[[!singleOption]]\" restamp>\n        <ul>\n          <template\n            is=\"dom-repeat\"\n            items=\"[[displayedAnswers]]\"\n            as=\"answer\"\n            mutable-data\n          >\n            <li>\n              <paper-checkbox\n                disabled\\$=\"[[disabled]]\"\n                property=\"oer:answer\"\n                checked=\"{{answer.userGuess}}\"\n                >[[answer.label]]</paper-checkbox\n              >\n            </li>\n          </template>\n        </ul>\n      </template>\n      <div id=\"buttons\" hidden\\$=\"[[hideButtons]]\">\n        <paper-button\n          id=\"check\"\n          disabled\\$=\"[[disabled]]\"\n          raised\n          on-click=\"_verifyAnswers\"\n          >[[checkLabel]]</paper-button\n        >\n        <paper-button\n          id=\"reset\"\n          disabled\\$=\"[[disabled]]\"\n          raised\n          on-click=\"resetAnswers\"\n          >[[resetLabel]]</paper-button\n        >\n      </div>\n      <paper-toast\n        id=\"toast\"\n        scroll-action=\"cancel\"\n        duration=\"6000\"\n        position-target=\"[[positionTarget]]\"\n        class\\$=\"fit-bottom [[__toastColor]]\"\n      >\n        [[__toastText]]\n        <iron-icon icon=\"[[__toastIcon]]\" style=\"margin-left:16px;\"></iron-icon>\n      </paper-toast>\n    `;\n  }\n  static get properties() {\n    let props = {\n      /**\n       * Title\n       */\n      title: {\n        type: String,\n        value: \"\"\n      },\n      positionTarget: {\n        type: Object\n      },\n      /**\n       * Support disabling interaction with the entire board\n       */\n      disabled: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Simple option, otherwise allow multiple via checkbox\n       */\n      singleOption: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Text of the label to check your answer\n       */\n      checkLabel: {\n        type: String,\n        value: \"Check answer\"\n      },\n      /**\n       * Text of the reset button\n       */\n      resetLabel: {\n        type: String,\n        value: \"Reset\"\n      },\n      /**\n       * Related Resource ID\n       */\n      relatedResource: {\n        type: String\n      },\n      /**\n       * Flag to hide the title\n       */\n      hideTitle: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Question to ask\n       */\n      question: {\n        type: String,\n        value: \"\"\n      },\n      /**\n       * Array of possible answers\n       */\n      answers: {\n        type: Array,\n        value: [],\n        notify: true\n      },\n      /**\n       * Displayed Answer set.\n       */\n      displayedAnswers: {\n        type: Array,\n        computed: \"_computeDisplayedAnswers(answers, randomize)\",\n        observer: \"_valueChanged\",\n        notify: true\n      },\n      /**\n       * Correct answer text to display\n       */\n      correctText: {\n        type: String,\n        value: \"Great job!\"\n      },\n      /**\n       * Incorrect answer text to display\n       */\n      incorrectText: {\n        type: String,\n        value: \"Better luck next time!\"\n      },\n      /**\n       * Name of the quiz - hardcoded for now from HTML\n       */\n      quizName: {\n        type: String,\n        value: \"Default Quiz\"\n      },\n      /**\n       * Randomize the display of the answers\n       */\n      randomize: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * flag to hide buttons\n       */\n      hideButtons: {\n        type: Boolean,\n        value: false\n      }\n    };\n    if (super.properties) {\n      props = Object.assign(props, super.properties);\n    }\n    return props;\n  }\n  /**\n   * Notice an answer has changed and update the DOM.\n   */\n  _valueChanged(e) {\n    for (var i in e) {\n      for (var j in e[i]) {\n        this.notifyPath(\"displayedAnswers.\" + i + \".\" + j);\n      }\n    }\n  }\n  /**\n   * Reset user answers and shuffle the board again.\n   */\n  resetAnswers(e) {\n    this.shadowRoot.querySelector(\"#toast\").hide();\n    // loop and force all answers to false\n    for (var i in this.displayedAnswers) {\n      if (this.displayedAnswers[i].userGuess) {\n        this.displayedAnswers[i].userGuess = false;\n      }\n    }\n    setTimeout(() => {\n      const answers = this.answers;\n      this.set(\"answers\", []);\n      this.set(\"answers\", answers);\n    }, 100);\n  }\n\n  /**\n   * Return if the current answers are correct\n   */\n  checkAnswers() {\n    let gotRight = true;\n    // see that they got them all right\n    for (var i in this.displayedAnswers) {\n      if (\n        gotRight != false &&\n        this.displayedAnswers[i].correct &&\n        this.displayedAnswers[i].userGuess\n      ) {\n        gotRight = true;\n      } else if (\n        this.displayedAnswers[i].correct &&\n        !this.displayedAnswers[i].userGuess\n      ) {\n        gotRight = false;\n      } else if (\n        !this.displayedAnswers[i].correct &&\n        this.displayedAnswers[i].userGuess\n      ) {\n        gotRight = false;\n      }\n    }\n    return gotRight;\n  }\n  /**\n   * Verify the answers of the user based on their saying\n   * that they want to see how they did.\n   */\n  _verifyAnswers(e) {\n    this.shadowRoot.querySelector(\"#toast\").hide();\n    let gotRight = this.checkAnswers();\n    // see if they got this correct based on their answers\n    if (gotRight) {\n      this.__toastColor = \"green\";\n      this.__toastIcon = \"thumb-up\";\n      this.__toastText = this.correctText;\n    } else {\n      this.__toastColor = \"red\";\n      this.__toastIcon = \"thumb-down\";\n      this.__toastText = this.incorrectText;\n    }\n    this.shadowRoot.querySelector(\"#toast\").show();\n    // start of data passing, this is a prototype atm\n    let eventData = {\n      activityDisplay: \"answered\",\n      objectName: this.quizName,\n      resultSuccess: gotRight\n    };\n    this.dispatchEvent(\n      new CustomEvent(\"user-engagement\", {\n        bubbles: true,\n        composed: true,\n        cancelable: false,\n        detail: eventData\n      })\n    );\n  }\n\n  /**\n   * Figure out the order of the answers which will be displayed\n   */\n  _computeDisplayedAnswers(answers, randomize) {\n    if (\n      typeof answers !== typeof undefined &&\n      answers != null &&\n      answers.length > 0 &&\n      randomize\n    ) {\n      let random = answers;\n      var currentIndex = random.length,\n        temporaryValue,\n        randomIndex;\n      // While there remain elements to shuffle...\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        // And swap it with the current element.\n        temporaryValue = random[currentIndex];\n        random[currentIndex] = random[randomIndex];\n        random[randomIndex] = temporaryValue;\n      }\n      // @todo apply a random sort to the answers array\n      return random;\n    } else {\n      return answers;\n    }\n  }\n  static get haxProperties() {\n    return {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Multiple choice\",\n        description: \"Multiple choice self check\",\n        icon: \"icons:list\",\n        color: \"purple\",\n        groups: [\"Instructional\"],\n        handles: [],\n        meta: {\n          author: \"LRNWebComponents\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"question\",\n            title: \"Question\",\n            description: \"Question for users to respond to.\",\n            inputMethod: \"textfield\",\n            icon: \"icons:help\"\n          }\n        ],\n        configure: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"hideTitle\",\n            title: \"Hide title\",\n            description: \"Whether or not to display the title\",\n            inputMethod: \"boolean\"\n          },\n          {\n            property: \"question\",\n            title: \"Question\",\n            description: \"Question for users to respond to.\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"randomize\",\n            title: \"Randomize\",\n            description: \"Randomize the answers dynamically\",\n            inputMethod: \"boolean\"\n          },\n          {\n            property: \"answers\",\n            title: \"Answer set\",\n            description: \"Answers in a multiple choice\",\n            inputMethod: \"array\",\n            itemLabel: \"label\",\n            properties: [\n              {\n                property: \"correct\",\n                title: \"Correct\",\n                description: \"If this is correct or not\",\n                inputMethod: \"boolean\"\n              },\n              {\n                property: \"label\",\n                title: \"Answer\",\n                description: \"Possible answer to the question\",\n                inputMethod: \"textfield\",\n                required: true\n              }\n            ]\n          },\n          {\n            property: \"correctText\",\n            title: \"Correct feedback\",\n            description: \"Feedback when they get it right\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"incorrectText\",\n            title: \"Incorrect feedback\",\n            description: \"Feedback when they get it wrong\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"quizName\",\n            title: \"Name of the quiz\",\n            description: \"Quiz name passed in\",\n            inputMethod: \"textfield\"\n          }\n        ],\n        advanced: [\n          {\n            property: \"checkLabel\",\n            title: \"Check answers label\",\n            description: \"Label for getting solution feedback\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"resetLabel\",\n            title: \"Reset label\",\n            description: \"label for the reset button\",\n            inputMethod: \"textfield\"\n          }\n        ]\n      },\n      saveOptions: {\n        unsetAttributes: [\"__utils\", \"displayed-answers\", \"displayedAnswers\"]\n      }\n    };\n  }\n  /**\n   * HAX preprocess insert content hook\n   */\n  preProcessHaxInsertContent(detail) {\n    // ensure we dont accidently have the answer displayed!\n    detail.properties.answers = detail.properties.answers.map(function(val) {\n      if (val.userGuess) {\n        delete val.userGuess;\n      }\n      return val;\n    });\n    return detail;\n  }\n  /**\n   * Attached to the DOM, now fire.\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    if (this.shadowRoot.querySelector(\"#positionTarget\")) {\n      this.positionTarget = this.shadowRoot.querySelector(\"#positionTarget\");\n    }\n    // single option implies it's a radio group or if multiple, do check boxes\n    if (this.singleOption) {\n      import(\"@polymer/paper-radio-group/paper-radio-group.js\");\n      import(\"@polymer/paper-radio-button/paper-radio-button.js\");\n    } else {\n      import(\"@polymer/paper-checkbox/paper-checkbox.js\");\n    }\n    this.setAttribute(\"typeof\", \"oer:Assessment\");\n    afterNextRender(this, function() {\n      this.shadowRoot.querySelector(\"#toast\").fitInto = this;\n    });\n  }\n}\nwindow.customElements.define(MultipleChoice.tag, MultipleChoice);\nexport { MultipleChoice };\n"],"names":["MultipleChoice","SchemaBehaviors","SimpleColors","e","i","j","notifyPath","shadowRoot","querySelector","hide","this","displayedAnswers","userGuess","setTimeout","answers","_this2","set","gotRight","correct","checkAnswers","__toastColor","__toastIcon","__toastText","correctText","incorrectText","show","eventData","activityDisplay","objectName","quizName","resultSuccess","dispatchEvent","CustomEvent","bubbles","composed","cancelable","detail","randomize","_typeof","length","temporaryValue","randomIndex","random","currentIndex","Math","floor","properties","map","val","positionTarget","singleOption","setAttribute","afterNextRender","fitInto","html","props","title","type","String","value","Object","disabled","Boolean","checkLabel","resetLabel","relatedResource","hideTitle","question","Array","notify","computed","observer","reflectToAttribute","hideButtons","assign","canScale","canPosition","canEditSource","gizmo","description","icon","color","groups","handles","meta","author","settings","quick","property","inputMethod","configure","itemLabel","required","advanced","saveOptions","unsetAttributes","window","customElements","define","tag"],"mappings":"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"}