{
  /**
   * llow a null value?
   * Default behavior/false will select first option and set value accordingly.
   */
  "allowNull": {
    "name": "allowNull",
    "type": "Boolean",
    "value": false,
    "reflectToAttribute": true
  },

  /**
   * Align right edges of listbox and button?
   * Default behavior/false aligns to left edges.
   */
  "alignRight": {
    "name": "alignRight",
    "type": "Boolean",
    "value": false,
    "reflectToAttribute": true
  },

  /**
   * Optional. Sets aria-labelledby attribute
   */
  "ariaLabelledby": {
    "name": "ariaLabelledby",
    "type": "String",
    "value": null
  },

  /**
   * Position label above select dropdown?
   */
  "blockLabel": {
    "name": "blockLabel",
    "type": "Boolean",
    "value": false,
    "reflectToAttribute": true
  },

  /**
   * Is picker disabled?
   */
  "disabled": {
    "name": "disabled",
    "type": "Boolean",
    "value": false,
    "reflectToAttribute": true
  },

  /**
   * Is it expanded?
   */
  "expanded": {
    "name": "expanded",
    "type": "Boolean",
    "value": false,
    "reflectToAttribute": true
  },

  /**
   * Hide option labels? As color-picker or icon-picker, labels may be redundant.
   * This option would move labels off-screen so that only screen-readers will have them.
   */
  "hideOptionLabels": {
    "name": "hideOptionLabels",
    "type": "Boolean",
    "value": false
  },

  /**
   * Hide selected item sample?
   * Default behavior/false shows a sample without expanding menu.
   */
  "hideSample": {
    "name": "hideSample",
    "type": "Boolean",
    "value": false,
    "reflectToAttribute": true
  },

  /**
   * Optional. Label for picker input
   */
  "label": {
    "name": "label",
    "type": "String",
    "value": null,
    "observer": "_setLabel"
  },

  /**
   * An array of options for picker, eg.: `
[
  [
    {
      "icon": "editor:format-paint",      //Optional. Used if picker is used as an icon picker.
      "alt": "Blue",                      //Required for accessibility. Alt text description of choice.
      "style": "background-color: blue;", //Optional. Used to set an option's style.
      ...                                 //Optional. Any other properties that should be captured as part of selected option's value
    },...
  ]
]`
   */
  "options": {
    "name": "options",
    "type": "Array",
    "value": [
      [
        {
          "icon": null,
          "style": null,
          "alt": null,
          "value": null
        }
      ]
    ],
    "observer": "_optionsChanged"
  },

  /**
   * position swatches relative to picker, where:
   * `left` aligns swatches to picker's left edge
   * `right` aligns swatches to picker's right edge
   * `center` aligns swatches to picker's center
  "position": {
    "name": "position",
    "type": Boolean,
    "value": "left",
    "reflectToAttribute": false,
    "observer": false
  },
   */

  /**
   * Renders html as title. (Good for titles with HTML in them.)
   */
  "titleAsHtml": {
    "name": "titleAsHtml",
    "type": "Boolean",
    "value": false
  },

  /**
   * An string that stores current value for picker
   */
  "value": {
    "name": "value",
    "type": "Object",
    "value": null,
    "notify": true,
    "observer": "_valueChanged",
    "reflectToAttribute": true
  },

  /**
   * Aria-activedescendant attribute (active option's ID)
   */
  "__activeDesc": {
    "name": "__activeDesc",
    "type": "String",
    "value": "option-0-0"
  },

  /**
   * Whether or not a label should be added
   */
  "__hasLabel": {
    "name": "__hasLabel",
    "type": "Boolean",
    "value": true
  },

  /**
   * Selected option based on value of picker
   */
  "__selectedOption": {
    "name": "__selectedOption",
    "type": "Object"
  }
}
