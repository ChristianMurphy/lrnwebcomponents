{
  /**
   * Optional. Sets the aria-labelledby attribute
   */
  "ariaLabelledby": {
    "name": "ariaLabelledby",
    "type": "String",
    "value": null
  },

  /**
   * Is the picker disabled?
   */
  "disabled": {
    "name": "disabled",
    "type": "Boolean",
    "value": false
  },

  /**
   * Is it expanded?
   */
  "expanded": {
    "name": "expanded",
    "type": "Boolean",
    "value": false,
    "reflectToAttribute": true
  },

  /**
   * Hide option labels? As color-picker or icon-picker, labels may be redundant.
   * This option would move the labels off-screen so that only screen-readers will have them.
   */
  "hideOptionLabels": {
    "name": "hideOptionLabels",
    "type": "Boolean",
    "value": false
  },

  /**
   * Whether r not a label shoudl be added
   */
  "hasLabel": {
    "name": "label",
    "type": "Boolean",
    "computed": "_hasLabel(label)"
  },

  /**
   * Optional. The label for the picker input
   */
  "label": {
    "name": "label",
    "type": "String",
    "value": null
  },

  /**
   * An array of options for the picker, eg.: `
[
  {
    "icon": "editor:format-paint",      //Optional. Used if the picker is used as an icon picker.
    "alt": "Blue",                      //Required for accessibility. Alt text description of the choice.
    "style": "background-color: blue;", //Optional. Used to set an option's style.
    ...                                 //Optional. Any other properties that should be captured as part of the selected option's value
  },...
]`
   */
  "options": {
    "name": "options",
    "type": "Array",
    "value": [[]]
  },

  /**
   * position the swatches relative to the picker, where:
   * `left` aligns the swatches to the picker's left edge
   * `right` aligns the swatches to the picker's right edge
   * `center` aligns the swatches to the picker's center
  "position": {
    "name": "position",
    "type": "Boolean",
    "value": "left",
    "reflectToAttribute": false,
    "observer": false
  },
   */

  /**
   * An string that stores the current value for the picker
   */
  "value": {
    "name": "value",
    "type": "Object",
    "value": null,
    "notify": true,
    "reflectToAttribute": true
  },

  /**
   * The aria-activedescendant attribute (active option's ID)
   */
  "__activeDesc": {
    "name": "__activeDesc",
    "type": "String",
    "value": "option-0-0"
  },

  /**
   * The selected option based on the value of the picker
   */
  "__selectedOption": {
    "name": "_setSelectedOption",
    "type": "Object",
    "computed": "_setSelectedOption(value)"
  }
}
