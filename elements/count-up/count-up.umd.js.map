{"version":3,"file":"count-up.umd.js","sources":["count-up.umd.js"],"sourcesContent":["/**\n * Copyright 2019 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { CountUp } from \"countup.js\";\n\n/**\n * `count-up`\n * `count up js wrapper with minimal styling`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @lit-element\n * @demo demo/index.html\n */\nclass CountUpElement extends PolymerElement {\n  \n  // render function\n  static get template() {\n    return html`\n<style>:host {\n  display: inline-flex;\n  --count-up-color: #000000;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n.wrapper {\n  display: block;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n}\n\n#counter {\n  color: var(--count-up-color);\n  @apply --count-up-number;\n}\n</style>\n<div class=\"wrapper\">\n  <slot name=\"prefix\"></slot>\n  <div id=\"counter\"></div>\n  <slot name=\"suffix\"></slot>\n</div>`;\n  }\n\n  // haxProperty definition\n  static get haxProperties() {\n    return {\n  \"canScale\": true,\n  \"canPosition\": true,\n  \"canEditSource\": false,\n  \"gizmo\": {\n    \"title\": \"Count up\",\n    \"description\": \"count up js wrapper with minimal styling\",\n    \"icon\": \"icons:android\",\n    \"color\": \"green\",\n    \"groups\": [\"Up\"],\n    \"handles\": [\n      {\n        \"type\": \"todo:read-the-docs-for-usage\"\n      }\n    ],\n    \"meta\": {\n      \"author\": \"btopro\",\n      \"owner\": \"The Pennsylvania State University\"\n    }\n  },\n  \"settings\": {\n    \"quick\": [],\n    \"configure\": [\n      {\n        \"property\": \"start\",\n        \"description\": \"\",\n        \"inputMethod\": \"textfield\"\n      },\n      {\n        \"property\": \"end\",\n        \"description\": \"\",\n        \"inputMethod\": \"textfield\"\n      },\n      {\n        \"property\": \"duration\",\n        \"description\": \"\",\n        \"inputMethod\": \"textfield\"\n      },\n      {\n        \"property\": \"noeasing\",\n        \"description\": \"\",\n        \"inputMethod\": \"boolean\"\n      },\n      {\n        \"property\": \"decimalplaces\",\n        \"description\": \"\",\n        \"inputMethod\": \"textfield\"\n      },\n      {\n        \"property\": \"separator\",\n        \"description\": \"\",\n        \"inputMethod\": \"textfield\"\n      },\n      {\n        \"property\": \"decimal\",\n        \"description\": \"\",\n        \"inputMethod\": \"textfield\"\n      },\n      {\n        \"property\": \"prefix\",\n        \"description\": \"\",\n        \"inputMethod\": \"textfield\"\n      },\n      {\n        \"property\": \"suffix\",\n        \"description\": \"\",\n        \"inputMethod\": \"textfield\"\n      }\n    ],\n    \"advanced\": []\n  }\n}\n;\n  }\n  // properties available to the custom element for data binding\n    static get properties() {\n    let props = {\n  /**\n   * Starting point for counting\n   */\n  \"start\": {\n    \"name\": \"start\",\n    \"type\": Number,\n    \"value\": 0\n  },\n  /**\n   * End point for counting stopping\n   */\n  \"end\": {\n    \"name\": \"end\",\n    \"type\": Number,\n    \"value\": 100\n  },\n  /**\n   * Duration to count\n   */\n  \"duration\": {\n    \"name\": \"duration\",\n    \"type\": Number,\n    \"value\": 2.5\n  },\n  /**\n   * Disable easing animation\n   */\n  \"noeasing\": {\n    \"name\": \"noeasing\",\n    \"type\": Boolean,\n    \"value\": false\n  },\n  /**\n   * decimal places to show\n   */\n  \"decimalplaces\": {\n    \"name\": \"decimalPlaces\",\n    \"type\": Number,\n    \"value\": 0\n  },\n  /**\n   * separator for 100s groupings\n   */\n  \"separator\": {\n    \"name\": \"separator\",\n    \"type\": String,\n    \"value\": \",\"\n  },\n  /**\n   * decimal point character\n   */\n  \"decimal\": {\n    \"name\": \"decimal\",\n    \"type\": String,\n    \"value\": \".\"\n  },\n  /**\n   * prefix string before the number counting\n   */\n  \"prefixtext\": {\n    \"name\": \"prefixtext\",\n    \"type\": String,\n    \"value\": \" \"\n  },\n  /**\n   * suffix string after the number counting\n   */\n  \"suffixtext\": {\n    \"name\": \"suffixtext\",\n    \"type\": String,\n    \"value\": \" \"\n  },\n  \"thresholds\": {\n    \"type\": Array,\n    \"value\": [0.0, 0.25, 0.5, 0.75, 1.0]\n  },\n  \"rootMargin\": {\n    \"type\": String,\n    \"value\": \"0px\"\n  },\n  \"ratio\": {\n    \"type\": Number,\n    \"reflectToAttribute\": true,\n    \"readOnly\": true\n  },\n  \"visibleLimit\": {\n    \"type\": Number,\n    \"value\": 0.5,\n    \"reflectToAttribute\": true\n  }\n}\n;\n    if (super.properties) {\n      props = Object.assign(props, super.properties);\n    }\n    return props;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"count-up\";\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    // setup the intersection observer\n    this.observer = new IntersectionObserver(\n      this.handleIntersectionCallback.bind(this),\n      {\n        root: document.rootElement,\n        rootMargin: this.rootMargin,\n        threshold: this.thresholds\n      }\n    );\n    this.observer.observe(this);\n    const options = {\n      startVal: this.start,\n      decimalPlaces: this.decimalplaces,\n      duration: this.duration,\n      useEasing: !this.noeasing,\n      separator: this.separator,\n      decimal: this.decimal,\n      prefix: this.prefixtext,\n      suffix: this.suffixtext\n    };\n    this._countUp = new CountUp(\n      this.shadowRoot.querySelector(\"#counter\"),\n      this.end,\n      options\n    );\n  }\n  handleIntersectionCallback(entries) {\n    for (let entry of entries) {\n      this._setRatio(Number(entry.intersectionRatio).toFixed(2));\n      if (this.ratio >= this.visibleLimit) {\n        // now we care\n        this._countUp.start();\n      }\n    }\n  }\n}\ncustomElements.define(CountUpElement.tag, CountUpElement);\nexport { CountUpElement, CountUp };\n"],"names":["CountUpElement","PolymerElement","html","props","Number","Boolean","String","Array","Object","assign","observer","IntersectionObserver","this","handleIntersectionCallback","bind","root","document","rootElement","rootMargin","threshold","thresholds","observe","options","startVal","start","decimalPlaces","decimalplaces","duration","useEasing","noeasing","separator","decimal","prefix","prefixtext","suffix","suffixtext","_countUp","CountUp","shadowRoot","querySelector","end","entries","entry","_setRatio","intersectionRatio","toFixed","ratio","visibleLimit","customElements","define","tag"],"mappings":"qxDAkBMA,gaAAuBC,+DAIlBC,wDA+BA,WACG,eACG,iBACE,QACR,OACE,uBACM,gDACP,sBACC,eACC,CAAC,cACA,CACT,MACU,sCAGJ,QACI,eACD,+CAGD,OACD,aACI,CACX,UACc,oBACG,eACA,aAEjB,UACc,kBACG,eACA,aAEjB,UACc,uBACG,eACA,aAEjB,UACc,uBACG,eACA,WAEjB,UACc,4BACG,eACA,aAEjB,UACc,wBACG,eACA,aAEjB,UACc,sBACG,eACA,aAEjB,UACc,qBACG,eACA,aAEjB,UACc,qBACG,eACA,uBAGP,4CAORC,EAAQ,OAIL,MACC,aACAC,aACC,OAKJ,MACG,WACAA,aACC,cAKC,MACF,gBACAA,aACC,cAKC,MACF,gBACAC,eACC,iBAKM,MACP,qBACAD,aACC,aAKE,MACH,iBACAE,aACC,aAKA,MACD,eACAA,aACC,gBAKG,MACJ,kBACAA,aACC,gBAKG,MACJ,kBACAA,aACC,gBAEG,MACJC,YACC,CAAC,EAAK,IAAM,GAAK,IAAM,eAEpB,MACJD,aACC,aAEF,MACCF,2BACc,YACV,gBAEE,MACNA,aACC,uBACa,uCAKpBD,EAAQK,OAAOC,OAAON,8BAEjBA,oCAQA,uHAQFO,SAAW,IAAIC,qBAClBC,KAAKC,2BAA2BC,KAAKF,MACrC,CACEG,KAAMC,SAASC,YACfC,WAAYN,KAAKM,WACjBC,UAAWP,KAAKQ,kBAGfV,SAASW,QAAQT,UAChBU,EAAU,CACdC,SAAUX,KAAKY,MACfC,cAAeb,KAAKc,cACpBC,SAAUf,KAAKe,SACfC,WAAYhB,KAAKiB,SACjBC,UAAWlB,KAAKkB,UAChBC,QAASnB,KAAKmB,QACdC,OAAQpB,KAAKqB,WACbC,OAAQtB,KAAKuB,iBAEVC,SAAW,IAAIC,UAClBzB,KAAK0B,WAAWC,cAAc,YAC9B3B,KAAK4B,IACLlB,sDAGuBmB,0CACPA,iDAAS,KAAlBC,eACFC,UAAUvC,OAAOsC,EAAME,mBAAmBC,QAAQ,IACnDjC,KAAKkC,OAASlC,KAAKmC,mBAEhBX,SAASZ,iIAKtBwB,eAAeC,OAAOjD,EAAekD,IAAKlD"}