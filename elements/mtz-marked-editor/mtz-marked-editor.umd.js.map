{"version":3,"file":"mtz-marked-editor.umd.js","sources":["mtz-marked-editor.umd.js"],"sourcesContent":["import { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { afterNextRender } from \"@polymer/polymer/lib/utils/render-status.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport { IronFormElementBehavior } from \"@polymer/iron-form-element-behavior/iron-form-element-behavior.js\";\nimport { IronValidatableBehavior } from \"@polymer/iron-validatable-behavior/iron-validatable-behavior.js\";\nimport { mixinBehaviors } from \"@polymer/polymer/lib/legacy/class.js\";\n/**\n * `mtz-marked-editor`\n * `Creates a textarea with common editor logic and can be controlled by UI elements`\n * @demo demo/index.html\n */\nclass MtzMarkedEditor extends mixinBehaviors(\n  [IronFormElementBehavior, IronValidatableBehavior],\n  PolymerElement\n) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n        }\n      </style>\n      <slot name=\"controls\"></slot> <slot name=\"textarea\"></slot>\n      <slot name=\"footer\"></slot>\n    `;\n  }\n  static get tag() {\n    return \"mtz-marked-editor\";\n  }\n  static get properties() {\n    let props = {\n      autofocus: Boolean,\n      readonly: Boolean,\n      textareaSelector: {\n        type: String,\n        value: \"textarea\"\n      },\n      __textarea: Object\n    };\n    if (super.properties) {\n      props = Object.assign(props, super.properties);\n    }\n    return props;\n  }\n  constructor() {\n    super();\n    this.addEventListener(\n      \"register-control\",\n      this.__bindControlToEditor.bind(this)\n    );\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.__textarea = dom(this).queryDistributedElements(\n      '[slot=\"textarea\"]'\n    )[0];\n  }\n\n  disconnectedCallback() {\n    this.removeEventListener(\"register-control\", this.__bindControlToEditor);\n    this.disconnectedCallback();\n  }\n  /**\n   * Returns the instance of textarea\n   * @return {HTMLTextAreaElement}\n   */\n  getTextarea() {\n    return this.__textarea;\n  }\n  /**\n   * Returns the number of lines in the textarea\n   * @return {Number}\n   */\n  getLines() {\n    return this.getContent().split(/(?=\\n|\\r\\n)$/gm);\n  }\n  /**\n   * Gets the content of the textarea\n   * @return {String}\n   */\n  getContent() {\n    if (typeof this.getTextarea() !== typeof undefined) {\n      return this.getTextarea().value;\n    }\n    return \"\";\n  }\n  /**\n   * Sets the content of the textarea\n   * @param {String} content\n   */\n  setContent(content) {\n    this.getTextarea().value = content;\n  }\n  /**\n   * Gets the selection information from the textarea and puts it into\n   * a useful object.\n   * @param {HTMLTextAreaElement} [textarea=this.getTextarea()]\n   * @return {Object} Containing selection information, start, end, text, and length.\n   */\n  getSelection(textarea = this.getTextarea()) {\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    return {\n      start,\n      end,\n      length: end - start,\n      text: textarea.value.substring(start, end)\n    };\n  }\n  /**\n   * Updates the selection of the textarea\n   * @param {Number} start - Starting index of selection\n   * @param {Number} end - Ending index of selection\n   * @param {HTMLTextAreaElement} [textarea=this.getTextarea()]\n   */\n  setSelection(start, end, textarea = this.getTextarea()) {\n    textarea.selectionStart = start;\n    textarea.selectionEnd = end;\n  }\n  /**\n   * Replaces the current selection with the passed in text\n   * @param {String} text\n   * @param {HTMLTextAreaElement} [textarea=this.getTextarea()]\n   * @param {Object} [selection=this.getSelection()]\n   */\n  replaceSelection(\n    text,\n    textarea = this.getTextarea(),\n    selection = this.getSelection()\n  ) {\n    const val = textarea.value;\n    textarea.value = `${val.substr(0, selection.start)}${text}${val.substr(\n      selection.end,\n      val.length\n    )}`;\n  }\n  /**\n   * Adds a reference of editor to the control\n   * @param {CustomEvent} event\n   * @private\n   */\n  __bindControlToEditor(e) {\n    e.stopPropagation();\n    e.target.__editor = this;\n  }\n}\nwindow.customElements.define(MtzMarkedEditor.tag, MtzMarkedEditor);\nexport { MtzMarkedEditor };\n"],"names":["MtzMarkedEditor","addEventListener","_this","__bindControlToEditor","bind","mixinBehaviors","IronFormElementBehavior","IronValidatableBehavior","PolymerElement","html","props","autofocus","Boolean","readonly","textareaSelector","type","String","value","__textarea","Object","assign","dom","this","queryDistributedElements","removeEventListener","disconnectedCallback","getContent","split","_typeof","getTextarea","content","textarea","start","selectionStart","end","selectionEnd","length","text","substring","selection","getSelection","val","substr","e","stopPropagation","target","__editor","window","customElements","define","tag"],"mappings":"63EAWMA,kOAmCGC,iBACH,mBACAC,EAAKC,sBAAsBC,0PArCHC,iBAC5B,CAACC,0BAAyBC,2BAC1BC,mEAGSC,8CAWA,2DAGHC,EAAQ,CACVC,UAAWC,QACXC,SAAUD,QACVE,iBAAkB,CAChBC,KAAMC,OACNC,MAAO,YAETC,WAAYC,2CAGZT,EAAQS,OAAOC,OAAOV,8BAEjBA,gHAWFQ,WAAaG,MAAIC,MAAMC,yBAC1B,qBACA,uDAIGC,oBAAoB,mBAAoBF,KAAKnB,4BAC7CsB,oEAOEH,KAAKJ,qDAOLI,KAAKI,aAAaC,MAAM,2EAO3BC,EAAON,KAAKO,eACPP,KAAKO,cAAcZ,MAErB,sCAMEa,QACJD,cAAcZ,MAAQa,6CAQhBC,yDAAWT,KAAKO,cACrBG,EAAQD,EAASE,eACjBC,EAAMH,EAASI,mBACd,CACLH,MAAAA,EACAE,IAAAA,EACAE,OAAQF,EAAMF,EACdK,KAAMN,EAASd,MAAMqB,UAAUN,EAAOE,yCAS7BF,EAAOE,OAAKH,yDAAWT,KAAKO,cACvCE,EAASE,eAAiBD,EAC1BD,EAASI,aAAeD,2CASxBG,OACAN,yDAAWT,KAAKO,cAChBU,yDAAYjB,KAAKkB,eAEXC,EAAMV,EAASd,MACrBc,EAASd,gBAAWwB,EAAIC,OAAO,EAAGH,EAAUP,eAASK,UAAOI,EAAIC,OAC9DH,EAAUL,IACVO,EAAIL,uDAQcO,GACpBA,EAAEC,kBACFD,EAAEE,OAAOC,SAAWxB,cAGxByB,OAAOC,eAAeC,OAAOjD,EAAgBkD,IAAKlD"}