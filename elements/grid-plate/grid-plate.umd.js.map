{"version":3,"file":"grid-plate.umd.js","sources":["grid-plate.umd.js"],"sourcesContent":["import { LitElement, html, css } from \"lit-element/lit-element.js\";\nimport \"@lrnwebcomponents/responsive-utility/responsive-utility.js\";\n// need to make this an object so that HAX can listen for it correctly\nclass GridPlateLayoutOptions {\n  constructor() {\n    this.resizeTimer = null;\n    this.activeItem = null;\n    this.layouts = {\n      \"1\": {\n        columnLayout: \"1: full width\",\n        xs: [\"100%\"],\n        sm: [\"100%\"],\n        md: [\"100%\"],\n        lg: [\"100%\"],\n        xl: [\"100%\"]\n      },\n      \"1-1\": {\n        columnLayout: \"2: equal width\",\n        xs: [\"100%\", \"100%\"],\n        sm: [\"50%\", \"50%\"],\n        md: [\"50%\", \"50%\"],\n        lg: [\"50%\", \"50%\"],\n        xl: [\"50%\", \"50%\"]\n      },\n      \"2-1\": {\n        columnLayout: \"2: wide & narrow\",\n        xs: [\"100%\", \"100%\"],\n        sm: [\"50%\", \"50%\"],\n        md: [\"66.6666667%\", \"33.3333337%\"],\n        lg: [\"66.6666667%\", \"33.3333337%\"],\n        xl: [\"66.6666667%\", \"33.3333337%\"]\n      },\n      \"1-2\": {\n        columnLayout: \"2: narrow & wide\",\n        xs: [\"100%\", \"100%\"],\n        sm: [\"50%\", \"50%\"],\n        md: [\"33.3333333%\", \"66.6666667%\"],\n        lg: [\"33.3333333%\", \"66.6666667%\"],\n        xl: [\"33.3333333%\", \"66.6666667%\"]\n      },\n      \"3-1\": {\n        columnLayout: \"2: wider & narrower\",\n        xs: [\"100%\", \"100%\"],\n        sm: [\"50%\", \"50%\"],\n        md: [\"75%\", \"25%\"],\n        lg: [\"75%\", \"25%\"],\n        xl: [\"75%\", \"25%\"]\n      },\n      \"1-3\": {\n        columnLayout: \"2: narrower & wider\",\n        xs: [\"100%\", \"100%\"],\n        sm: [\"50%\", \"50%\"],\n        md: [\"25%\", \"75%\"],\n        lg: [\"25%\", \"75%\"],\n        xl: [\"25%\", \"75%\"]\n      },\n      \"1-1-1\": {\n        columnLayout: \"3: equal width\",\n        xs: [\"100%\", \"100%\", \"100%\"],\n        sm: [\"100%\", \"100%\", \"100%\"],\n        md: [\"33.3333333%\", \"33.3333333%\", \"33.3333333%\"],\n        lg: [\"33.3333333%\", \"33.3333333%\", \"33.3333333%\"],\n        xl: [\"33.3333333%\", \"33.3333333%\", \"33.3333333%\"]\n      },\n      \"2-1-1\": {\n        columnLayout: \"3: wide, narrow, and narrow\",\n        xs: [\"100%\", \"100%\", \"100%\"],\n        sm: [\"100%\", \"50%\", \"50%\"],\n        md: [\"50%\", \"25%\", \"25%\"],\n        lg: [\"50%\", \"25%\", \"25%\"],\n        xl: [\"50%\", \"25%\", \"25%\"]\n      },\n      \"1-2-1\": {\n        columnLayout: \"3: narrow, wide, and narrow\",\n        xs: [\"100%\", \"100%\", \"100%\"],\n        sm: [\"100%\", \"100%\", \"100%\"],\n        md: [\"25%\", \"50%\", \"25%\"],\n        lg: [\"25%\", \"50%\", \"25%\"],\n        xl: [\"25%\", \"50%\", \"25%\"]\n      },\n      \"1-1-2\": {\n        columnLayout: \"3: narrow, narrow, and wide\",\n        xs: [\"100%\", \"100%\", \"100%\"],\n        sm: [\"50%\", \"50%\", \"100%\"],\n        md: [\"25%\", \"25%\", \"50%\"],\n        lg: [\"25%\", \"25%\", \"50%\"],\n        xl: [\"25%\", \"25%\", \"50%\"]\n      },\n      \"1-1-1-1\": {\n        columnLayout: \"4: equal width\",\n        xs: [\"100%\", \"100%\", \"100%\", \"100%\"],\n        sm: [\"50%\", \"50%\", \"50%\", \"50%\"],\n        md: [\"25%\", \"25%\", \"25%\", \"25%\"],\n        lg: [\"25%\", \"25%\", \"25%\", \"25%\"],\n        xl: [\"25%\", \"25%\", \"25%\", \"25%\"]\n      },\n      \"1-1-1-1-1\": {\n        columnLayout: \"5: equal width\",\n        xs: [\"100%\", \"100%\", \"100%\", \"100%\", \"100%\"],\n        sm: [\"50%\", \"50%\", \"50%\", \"50%\", \"50%\"],\n        md: [\"20%\", \"20%\", \"20%\", \"20%\", \"20%\"],\n        lg: [\"20%\", \"20%\", \"20%\", \"20%\", \"20%\"],\n        xl: [\"20%\", \"20%\", \"20%\", \"20%\", \"20%\"]\n      },\n      \"1-1-1-1-1-1\": {\n        columnLayout: \"6: equal width\",\n        xs: [\"100%\", \"100%\", \"100%\", \"100%\", \"100%\", \"100%\"],\n        sm: [\"50%\", \"50%\", \"50%\", \"50%\", \"50%\", \"50%\"],\n        md: [\n          \"33.3333333%\",\n          \"33.3333333%\",\n          \"33.3333333%\",\n          \"33.3333333%\",\n          \"33.3333333%\",\n          \"33.3333333%\"\n        ],\n        lg: [\n          \"16.6666667%\",\n          \"16.6666667%\",\n          \"16.6666667%\",\n          \"16.6666667%\",\n          \"16.6666667%\",\n          \"16.6666667%\"\n        ],\n        xl: [\n          \"16.6666667%\",\n          \"16.6666667%\",\n          \"16.6666667%\",\n          \"16.6666667%\",\n          \"16.6666667%\",\n          \"16.6666667%\"\n        ]\n      }\n    };\n    this.options = {};\n    let layoutFlip = Object.keys(this.layouts);\n    // loop through all the supplied layouts to get the HAX layout options & descriptions\n    for (let i = 0; i < layoutFlip.length; i++) {\n      this.options[layoutFlip[i]] = this.layouts[layoutFlip[i]].columnLayout;\n    }\n  }\n}\n/**\n * `grid-plate`\n * @customElement grid-plate\n * `A grid plate based on a layout that manipulates it.`\n * @demo demo/index.html\n */\nclass GridPlate extends LitElement {\n  /**\n   * LitElement render styles\n   */\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: block;\n          --grid-plate-row-margin: 0px;\n          --grid-plate-row-padding: 0px;\n          --grid-plate-item-margin: 15px;\n          --grid-plate-editable-border-color: #bbbbbb;\n          --grid-plate-active-border-color: #000000;\n          --grid-plate-target-background-color: var(\n            --simple-colors-default-theme-blue-1\n          );\n          --grid-plate-possible-target-background-color: transparent;\n          --grid-plate-selected-background-color: #ffffff;\n        }\n        :host .row {\n          width: 100%;\n          display: flex;\n          flex-wrap: wrap;\n          justify-content: space-between;\n          align-items: stretch;\n          margin: var(--grid-plate-row-margin);\n          padding: var(--grid-plate-row-padding);\n        }\n        :host .column {\n          width: 100%;\n          flex: 0 0 auto;\n        }\n        :host([edit-mode]) .column {\n          min-height: 150px;\n        }\n        :host([edit-mode]) .column {\n          outline: 2px dashed var(--grid-plate-editable-border-color);\n        }\n        :host .column[style=\"min-height: unset;\"] {\n          display: none;\n        }\n        :host([edit-mode]) .column[style=\"min-height: unset;\"]:not(:empty) {\n          display: block;\n          outline: 2px solid red;\n          width: 20%;\n          min-width: 100px;\n          padding: 15px 0;\n          min-height: 150px !important;\n          margin-top: var(--grid-plate-item-margin);\n        }\n        :host([edit-mode])\n          .column[style=\"min-height: unset;\"]:not(:empty):before {\n          content: \"Column (\" attr(id) \") hidden by layout selected\";\n          color: red;\n          margin: var(--grid-plate-item-margin);\n        }\n        :host .column ::slotted(*) {\n          margin: var(--grid-plate-item-margin);\n          padding: var(--grid-plate-item-margin);\n          max-width: calc(100% - 60px);\n          max-width: -webkit-fill-available;\n        }\n        :host([edit-mode]) .column ::slotted(img) {\n          display: block;\n        }\n        :host([edit-mode]) .column ::slotted(.grid-plate-active-item) {\n          outline: 2px dashed var(--grid-plate-active-border-color);\n          background-color: var(--grid-plate-selected-background-color);\n        }\n        :host([edit-mode]) .column ::slotted(*:focus),\n        :host([edit-mode]) .column ::slotted(*:hover),\n        :host([edit-mode]) .column ::slotted(*:active) {\n          cursor: move;\n        }\n        :host([edit-mode]) .column ::slotted(.mover) {\n          outline: 2px dashed var(--grid-plate-editable-border-color);\n        }\n        :host([edit-mode]) .column.mover {\n          outline: 2px dashed var(--grid-plate-editable-border-color);\n        }\n        :host([edit-mode]) .column ::slotted(.mover) {\n          background-color: var(--grid-plate-possible-target-background-color);\n          padding: 16px;\n        }\n        :host([edit-mode]) .column.mover {\n          content: \"Double click to create a paragraph here\";\n          background-color: var(--grid-plate-possible-target-background-color);\n        }\n        :host([edit-mode]) .column ::slotted(.hovered) {\n          background-color: var(\n            --grid-plate-target-background-color\n          ) !important;\n          outline: dashed 2px var(--grid-plate-active-border-color);\n          z-index: 2;\n        }\n        :host([edit-mode]) .column.hovered {\n          background-color: var(\n            --grid-plate-target-background-color\n          ) !important;\n          outline: dashed 2px var(--grid-plate-active-border-color);\n          z-index: 2;\n        }\n        paper-icon-button {\n          display: none;\n          position: absolute;\n          margin: 0;\n          padding: 0;\n          outline: none;\n          width: 30px;\n          height: 30px;\n          color: black;\n          opacity: 0.8;\n          background-color: transparent;\n          border-radius: 0;\n          box-sizing: content-box !important;\n          z-index: 1;\n          min-width: unset;\n        }\n        paper-icon-button:hover {\n          outline: 2px dashed #000000;\n          opacity: 1;\n          visibility: visible;\n          background-color: #ffffff;\n        }\n\n        paper-icon-button[disabled] {\n          color: #aaa;\n        }\n        paper-icon-button[disabled]:focus,\n        paper-icon-button[disabled]:hover {\n          cursor: not-allowed;\n        }\n        paper-icon-button.active {\n          display: block;\n        }\n\n        .button-holding-pen {\n          position: relative;\n        }\n      `\n    ];\n  }\n  constructor() {\n    super();\n    this.droppable = false;\n    this.ignoreHax = false;\n    this.breakpointSm = 900;\n    this.breakpointMd = 1200;\n    this.breakpointLg = 1500;\n    this.breakpointXl = 1800;\n    this.columns = 6;\n    this.disableResponsive = false;\n    this.editMode = false;\n    this.layout = \"1-1\";\n    this.layouts = new GridPlateLayoutOptions().layouts;\n    this.responsiveSize = \"xs\";\n    import(\"@polymer/paper-icon-button/paper-icon-button.js\");\n    import(\"@polymer/iron-icons/hardware-icons.js\");\n    setTimeout(() => {\n      this.addEventListener(\"focusin\", this._focusIn.bind(this));\n    }, 0);\n    window.ResponsiveUtility.requestAvailability();\n  }\n  /**\n   * LitElement render\n   */\n  render() {\n    return html`\n      <div class=\"button-holding-pen\">\n        <paper-icon-button\n          class=\"direction\"\n          icon=\"hardware:keyboard-arrow-up\"\n          title=\"move item up\"\n          id=\"up\"\n          @click=\"${this.moveActiveElement}\"\n        >\n        </paper-icon-button>\n        <paper-icon-button\n          class=\"direction\"\n          icon=\"hardware:keyboard-arrow-right\"\n          title=\"move item right\"\n          id=\"right\"\n          @click=\"${this.moveActiveElement}\"\n        >\n        </paper-icon-button>\n        <paper-icon-button\n          class=\"direction\"\n          icon=\"hardware:keyboard-arrow-down\"\n          title=\"move item down\"\n          id=\"down\"\n          @click=\"${this.moveActiveElement}\"\n        >\n        </paper-icon-button>\n        <paper-icon-button\n          class=\"direction\"\n          icon=\"hardware:keyboard-arrow-left\"\n          title=\"move item left\"\n          id=\"left\"\n          @click=\"${this.moveActiveElement}\"\n        >\n        </paper-icon-button>\n      </div>\n      <div class=\"row\">\n        <div\n          class=\"column\"\n          id=\"col1\"\n          .style=\"${this._getColumnWidth(0, this.columnWidths)}\"\n        >\n          <slot name=\"col-1\"></slot>\n        </div>\n        <div\n          class=\"column\"\n          id=\"col2\"\n          .style=\"${this._getColumnWidth(1, this.columnWidths)}\"\n        >\n          <slot name=\"col-2\"></slot>\n        </div>\n        <div\n          class=\"column\"\n          id=\"col3\"\n          .style=\"${this._getColumnWidth(2, this.columnWidths)}\"\n        >\n          <slot name=\"col-3\"></slot>\n        </div>\n        <div\n          class=\"column\"\n          id=\"col4\"\n          .style=\"${this._getColumnWidth(3, this.columnWidths)}\"\n        >\n          <slot name=\"col-4\"></slot>\n        </div>\n        <div\n          class=\"column\"\n          id=\"col5\"\n          .style=\"${this._getColumnWidth(4, this.columnWidths)}\"\n        >\n          <slot name=\"col-5\"></slot>\n        </div>\n        <div\n          class=\"column\"\n          id=\"col6\"\n          .style=\"${this._getColumnWidth(5, this.columnWidths)}\"\n        >\n          <slot name=\"col-6\"></slot>\n        </div>\n      </div>\n    `;\n  }\n  static get tag() {\n    return \"grid-plate\";\n  }\n  /**\n   * Validate the slot name\n   */\n  validateElementSlot(node) {\n    return [\"col-1\", \"col-2\", \"col-3\", \"col-4\", \"col-5\", \"col-6\"].includes(\n      node.getAttribute(\"slot\")\n    );\n  }\n  _dragstart(e) {\n    let target;\n    // @todo this MUST validate that we are 1 below this element\n    // leverage closest thing to the drag 1st\n    // THIS IS HOW WE CAN MAKE A GRIP HANDLE!!!!!\n    if (e.path[0]) {\n      target = e.path[0];\n    } else {\n      target = e.target;\n    }\n    // special support for HAXStore\n    if (window.HaxStore && window.HaxStore.ready) {\n      window.HaxStore.instance.__dragTarget = target;\n    } else {\n      this.__dragTarget = target;\n    }\n    e.dataTransfer.dropEffect = \"move\";\n    e.dataTransfer.setDragImage(target, 25, 25);\n  }\n  /**\n   * HTMLElement\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.observer = new MutationObserver(mutations => {\n      mutations.forEach(mutation => {\n        // only need to apply this when we're in editMode\n        // this implies something was added dynamically or drag and drop\n        // from outside this element or dragging between grid plates\n        // so we need to disconnect the handlers from here and pick them\n        // up in the new plate\n        if (this.editMode) {\n          mutation.addedNodes.forEach(node => {\n            if (node.tagName) {\n              // verify this has a slot set otherwise we need to set one on the fly\n              // otherwise this won't show up. This could be incorrectly formed HTML\n              // DOM that was pushed in via an outside system or edge cases of things\n              // dropping in without a slot set in anyway\n              // validate slot name, otherwise force it to col-1\n              if (\n                node.getAttribute(\"slot\") == null ||\n                !this.validateElementSlot(node)\n              ) {\n                node.setAttribute(\"slot\", \"col-1\");\n              }\n              node.addEventListener(\"drop\", this.dropEvent.bind(this));\n              node.addEventListener(\"dragenter\", this.dragEnter.bind(this));\n              node.addEventListener(\"dragleave\", this.dragLeave.bind(this));\n              node.addEventListener(\"dragstart\", this.dragStart.bind(this));\n              node.addEventListener(\"dragend\", this.dragEnd.bind(this));\n              node.addEventListener(\"dragover\", function(e) {\n                e.preventDefault();\n              });\n              node.setAttribute(\"draggable\", true);\n              node.setAttribute(\"data-draggable\", true);\n              // ensure they can be focused\n              node.setAttribute(\"tabindex\", 0);\n              // set whatever got added here as active in the grid plate\n              this.activeItem = node;\n            }\n          });\n          mutation.removedNodes.forEach(node => {\n            if (node.tagName) {\n              node.removeEventListener(\"drop\", this.dropEvent.bind(this));\n              node.removeEventListener(\"dragenter\", this.dragEnter.bind(this));\n              node.removeEventListener(\"dragleave\", this.dragLeave.bind(this));\n              node.removeEventListener(\"dragstart\", this.dragStart.bind(this));\n              node.removeEventListener(\"dragend\", this.dragEnd.bind(this));\n              node.removeEventListener(\"dragover\", function(e) {\n                e.preventDefault();\n              });\n              node.removeAttribute(\"draggable\");\n              node.removeAttribute(\"data-draggable\");\n              // ensure they can be focused\n              node.removeAttribute(\"tabindex\");\n            }\n          });\n        }\n      });\n    });\n    this.observer.observe(this, {\n      childList: true\n    });\n    // need to do some global drag tracking to know the DOM node moved\n    window.addEventListener(\"dragstart\", this._dragstart.bind(this));\n    // capture keydown events\n    window.addEventListener(\"keydown\", this._onKeyDown.bind(this));\n    // listen for HAX if it's around\n    window.addEventListener(\n      \"hax-store-property-updated\",\n      this._haxStorePropertyUpdated.bind(this)\n    );\n    // listen for HAX insert events if it exists\n    window.addEventListener(\n      \"hax-insert-content\",\n      this.haxInsertContent.bind(this)\n    );\n    // dom loaded, resize to be safe\n    window.addEventListener(\"load\", this.resize.bind(this));\n    // if we resize, listen and react\n    window.addEventListener(\"resize\", this.resizeListener.bind(this));\n  }\n  resizeListener(e) {\n    if (this.activeItem) {\n      clearTimeout(this.resizeTimer);\n      this.resizeTimer = setTimeout(() => {\n        this.positionArrows(this.activeItem);\n      }, 50);\n    }\n  }\n  _onKeyDown(e) {\n    if (this.editMode && this.getAttribute(\"contenteditable\")) {\n      switch (e.key) {\n        case \"Enter\":\n          // support HAX text operations should take priority\n          if (\n            window.HaxStore &&\n            window.HaxStore.instance &&\n            window.HaxStore.instance.isTextElement(this.activeItem)\n          ) {\n            return true;\n          }\n          this.shadowRoot.querySelector(\"#right\").focus();\n          break;\n        // clear active\n        case \"Escape\":\n          this.activeItem = null;\n          break;\n      }\n    }\n  }\n  /**\n   * life cycle\n   */\n  firstUpdated(changedProperties) {\n    window.dispatchEvent(\n      new CustomEvent(\"responsive-element\", {\n        detail: {\n          element: this,\n          attribute: \"responsive-size\",\n          relativeToParent: false,\n          sm: this.breakpointSm,\n          md: this.breakpointMd,\n          lg: this.breakpointLg,\n          xl: this.breakpointXl\n        }\n      })\n    );\n    // apply handlers to the columns themselves\n    for (var j = 1; j <= this.columns; j++) {\n      if (this.shadowRoot.querySelector(\"#col\" + j) !== undefined) {\n        let col = this.shadowRoot.querySelector(\"#col\" + j);\n        col.addEventListener(\"drop\", this.dropEvent.bind(this));\n        col.addEventListener(\"dblclick\", this.dblclick.bind(this));\n        col.addEventListener(\"dragstart\", this.dragStart.bind(this));\n        col.addEventListener(\"dragenter\", this.dragEnter.bind(this));\n        col.addEventListener(\"dragleave\", this.dragLeave.bind(this));\n        col.addEventListener(\"dragend\", this.dragEnd.bind(this));\n        col.addEventListener(\"dragover\", function(e) {\n          e.preventDefault();\n        });\n        col.setAttribute(\"data-draggable\", true);\n      }\n    }\n    this.columnWidths = this._getColumnWidths(\n      this.responsiveSize,\n      this.layout,\n      this.layouts,\n      this.disableResponsive\n    );\n  }\n  /**\n   * life cycle\n   */\n  disconnectedCallback() {\n    window.removeEventListener(\"dragstart\", this._dragstart.bind(this));\n    window.removeEventListener(\"keydown\", this._onKeyDown.bind(this));\n    // listen for HAX if it's around\n    window.removeEventListener(\n      \"hax-store-property-updated\",\n      this._haxStorePropertyUpdated.bind(this)\n    );\n    // listen for HAX insert events if it exists\n    window.removeEventListener(\n      \"hax-insert-content\",\n      this.haxInsertContent.bind(this)\n    );\n    window.removeEventListener(\"load\", this.resize.bind(this));\n    window.removeEventListener(\"resize\", this.resizeListener.bind(this));\n    // clean up mutation observer\n    this.observer.disconnect();\n    super.disconnectedCallback();\n  }\n  static get haxProperties() {\n    return {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      settings: {\n        quick: [],\n        configure: [\n          {\n            property: \"layout\",\n            title: \"Column Layout\",\n            description:\n              \"Style to present these items (may change for small screens)\",\n            inputMethod: \"select\",\n            options: new GridPlateLayoutOptions().options\n          }\n        ],\n        advanced: [\n          {\n            property: \"breakpointSm\",\n            title: \"Small Breakpoint\",\n            description:\n              \"Anything less than this number (in pixels) will render with the smallest version of this layout\",\n            inputMethod: \"textfield\",\n            validationType: \"number\"\n          },\n          {\n            property: \"breakpointMd\",\n            title: \"Medium Breakpoint\",\n            description:\n              \"Anything less than this number (in pixels) will render with the small version of this layout\",\n            inputMethod: \"textfield\",\n            validationType: \"number\"\n          },\n          {\n            property: \"breakpointLg\",\n            title: \"Large Breakpoint\",\n            description:\n              \"Anything less than this number (in pixels) will render with the medium version of this layout.\",\n            inputMethod: \"textfield\",\n            validationType: \"number\"\n          },\n          {\n            property: \"breakpointXl\",\n            title: \"Extra-Large Breakpoint\",\n            description:\n              \"Anything less than this number (in pixels) will render with the large version of this layout. Anything greater than or equal to this number will display with the maximum number of columns for this layout.\",\n            inputMethod: \"textfield\",\n            validationType: \"number\"\n          }\n        ]\n      },\n      saveOptions: {\n        unsetAttributes: [\n          \"grid-plate-active-item\",\n          \"edit-mode\",\n          \"active-item\",\n          \"layouts\",\n          \"columns\",\n          \"options\",\n          \"droppable\",\n          \"ignorehax\",\n          \"disableresponsive\",\n          \"activeitem\"\n        ]\n      }\n    };\n  }\n  static get properties() {\n    return {\n      droppable: {\n        type: Boolean,\n        reflect: true\n      },\n      ignoreHax: {\n        type: Boolean,\n        attribute: \"ignore-hax\"\n      },\n      /**\n       * Custom small breakpoint for the layouts; only updated on attached\n       */\n      breakpointSm: {\n        type: Number,\n        attribute: \"breakpoint-sm\"\n      },\n      /**\n       * Custom medium breakpoint for the layouts; only updated on attached\n       */\n      breakpointMd: {\n        type: Number,\n        attribute: \"breakpoint-md\"\n      },\n      /**\n       * Custom large breakpoint for the layouts; only updated on attached\n       */\n      breakpointLg: {\n        type: Number,\n        attribute: \"breakpoint-lg\"\n      },\n      /**\n       * Custom extra-large breakpoint for the layouts; only updated on attached\n       */\n      breakpointXl: {\n        type: Number,\n        attribute: \"breakpoint-xl\"\n      },\n      /**\n       * number of columns at this layout / responsive size\n       */\n      columns: {\n        type: Number,\n        reflect: true\n      },\n      /**\n       * disables responsive layouts for HAX preview\n       */\n      disableResponsive: {\n        type: Boolean,\n        attribute: \"disable-responsive\"\n      },\n      /**\n       * If the grid plate is in a state where its items\n       * can be modified as far as order or column placement.\n       */\n      editMode: {\n        reflect: true,\n        type: Boolean,\n        attribute: \"edit-mode\"\n      },\n      /**\n       * an object with a layout's column sizes\n       * at the current responsive width\n       */\n      layout: {\n        type: String,\n        reflect: true\n      },\n      /**\n       * Predefined layouts of column sizes and various responsive widths. \n       * For example:```\n  {\n    \"1-1-1-1\": {                         //the name of the layout\n      \"xs\": [\"100%\",\"100%\",\"100%\",\"100%] //the responsive width of each column when the grid is extra small\n      \"sm\": [\"50%\",\"50%\",\"50%\",\"50%\"]    //the responsive width of each column when the grid is small\n      \"md\": [\"50%\",\"50%\",\"50%\",\"50%\"]    //the responsive width of each column when the grid is medium\n      \"lg\": [\"25%\",\"25%\",\"25%\",\"25%\"]    //the responsive width of each column when the grid is large\n      \"xl\": [\"25%\",\"25%\",\"25%\",\"25%\"]    //the responsive width of each column when the grid is extra large\n    },\n    {...}\n  }```\n      */\n      layouts: {\n        type: Object\n      },\n      /**\n       * Responsive size as `xs`, `sm`, `md`, `lg`, or `xl`\n       */\n      responsiveSize: {\n        type: String,\n        reflect: true,\n        attribute: \"responsive-size\"\n      },\n      /**\n       * Track active item\n       */\n      activeItem: {\n        type: Object,\n        attribute: \"active-item\"\n      },\n      /**\n       * name of selected layout\n       */\n      columnWidths: {\n        type: String,\n        attribute: \"column-widths\"\n      }\n    };\n  }\n  updated(changedProperties) {\n    changedProperties.forEach((oldValue, propName) => {\n      // if any of these changed, update col widths\n      if (\n        [\"responsiveSize\", \"layout\", \"layouts\", \"disableResponsive\"].includes(\n          propName\n        )\n      ) {\n        this.columnWidths = this._getColumnWidths(\n          this.responsiveSize,\n          this.layout,\n          this.layouts,\n          this.disableResponsive\n        );\n      }\n      switch (propName) {\n        // observer\n        case \"droppable\":\n          this._droppableChanged(this[propName], oldValue);\n          break;\n        // observer\n        case \"editMode\":\n          this._editModeChanged(this[propName], oldValue);\n          this.resize();\n          break;\n        // observer\n        case \"activeItem\":\n          this._activeItemChanged(this[propName], oldValue);\n          break;\n        // observer, ensure we are sized correctly after widths change\n        case \"columnWidths\":\n          // widths changed because of layout somehow, wait for the resize transition\n          // to have processed, then fire a resize event which we are listening for\n          // which will then ensure the arrows are positioned correctly\n          this.resize();\n          break;\n        case \"disableResponsive\":\n          // fire an event that this is a core piece of the system\n          this.dispatchEvent(\n            new CustomEvent(\"disable-responsive-changed\", {\n              detail: this[propName]\n            })\n          );\n          break;\n      }\n    });\n  }\n  resize() {\n    window.dispatchEvent(new Event(\"resize\"));\n  }\n  /**\n   * Implements preProcessHaxInsertContent to clean up output on save\n   */\n  preProcessHaxInsertContent(detail) {\n    // ensure this is wiped to avoid issues in building\n    delete detail.properties.activeItem;\n    return detail;\n  }\n\n  _droppableChanged(newValue) {\n    if (newValue) {\n      this.editMode = true;\n    }\n  }\n  /**\n   * Determines if the item can move a set number of slots.\n   *\n   * @param {object} the item\n   * @param {number} -1 for left or +1 for right\n   * @returns {boolean} if the item can move a set number of slots\n   */\n  canMoveSlot(item, before) {\n    let dir = before ? -1 : 1,\n      max = this.shadowRoot.querySelectorAll(\".column\").length,\n      col = item.getAttribute(\"slot\").split(\"-\"),\n      dest = parseInt(col[1]) + dir;\n    return dest >= 1 && dest <= max;\n  }\n  /**\n   * Moves an item a set number of slots.\n   *\n   * @param {object} the item\n   * @param {number} -1 for left or +1 for right\n   */\n  moveSlot(item, before) {\n    let dir = before ? -1 : 1,\n      col = item.getAttribute(\"slot\").split(\"-\"),\n      dest = parseInt(col[1]) + dir;\n    item.setAttribute(\"slot\", \"col-\" + dest);\n  }\n\n  /**\n   * Determines if the item can move a set number of slots.\n   *\n   * @param {object} the item\n   * @param {boolean} move item before previous? (false for move item after next)\n   * @returns {boolean} if the item can move a set number of slots\n   */\n  canMoveOrder(item, before) {\n    let slot = item.getAttribute(\"slot\");\n    let nodes = this.shadowRoot\n      .querySelector(`slot[name='${slot}']`)\n      .assignedNodes({ flatten: true });\n    let target = null,\n      position = 0;\n    for (var i in nodes) {\n      if (item === nodes[i]) {\n        position = i;\n      }\n    }\n    if (before && parseInt(position) - 1 >= 0) {\n      target = nodes[parseInt(position) - 1];\n    } else if (!before && parseInt(position) + 1 <= nodes.length - 1) {\n      target = nodes[parseInt(position) + 1];\n    }\n    return target !== null && typeof target !== typeof undefined;\n  }\n  /**\n   * Moves an item's order within a slot.\n   *\n   * @param {object} the item\n   * @param {boolean} move item before previous? (false for move item after next)\n   */\n  moveOrder(item, before = true) {\n    let slot = item.getAttribute(\"slot\");\n    let nodes = this.shadowRoot\n      .querySelector(`slot[name='${slot}']`)\n      .assignedNodes({ flatten: true });\n    let target = null,\n      position = 0;\n    for (var i in nodes) {\n      if (item === nodes[i]) {\n        position = i;\n      }\n    }\n    if (before) {\n      target = nodes[parseInt(position) - 1];\n      this.insertBefore(this.activeItem, target);\n    } else {\n      target = nodes[parseInt(position) + 1];\n      this.insertBefore(target, this.activeItem);\n    }\n  }\n\n  /**\n   * Move the active element based on which button got pressed.\n   */\n  moveActiveElement(e) {\n    var local = e.target;\n    // see if this was an up down left or right movement\n    switch (local.id) {\n      case \"up\":\n        this.moveOrder(this.activeItem, true);\n        break;\n      case \"down\":\n        this.moveOrder(this.activeItem, false);\n        break;\n      case \"left\":\n        this.moveSlot(this.activeItem, true);\n        break;\n      case \"right\":\n        this.moveSlot(this.activeItem, false);\n        break;\n    }\n    // ensure arrows are correctly positioned after the move\n    if (this.activeItem && typeof this.activeItem.focus === \"function\") {\n      this.positionArrows(this.activeItem);\n      this.activeItem.focus();\n    }\n  }\n\n  /**\n   * Notice changes to what's active and ensure UX associated w/ it is visble\n   */\n  _activeItemChanged(newValue, oldValue) {\n    // remove anything currently with the active class\n    this.querySelectorAll(\".grid-plate-active-item\").forEach(el => {\n      el.classList.remove(\"grid-plate-active-item\");\n    });\n    if (typeof newValue !== typeof undefined && newValue != null) {\n      // position arrows\n      newValue.classList.add(\"grid-plate-active-item\");\n      this.positionArrows(newValue);\n    } else if (newValue == null) {\n      this.positionArrows(newValue);\n    }\n    // if we had a previous value then remove the active item class\n    if (typeof oldValue !== typeof undefined && oldValue != null) {\n      oldValue.blur();\n    }\n  }\n  /**\n   * gets the column widths based on selected layout and current responsive width\n   *\n   * @param {string} a string that describes the current responsive width\n   * @param {string} the name of selected layout\n   * @param {object} predefined layouts of column sizes and various responsive widths\n   * @param {boolean} disable responsive sizing?\n   * @returns {object} an object with a layout's column sizes at the current responsive width\n   */\n  _getColumnWidths(\n    responsiveSize = \"sm\",\n    layout = \"1-1\",\n    layouts,\n    disableResponsive\n  ) {\n    if (layouts) {\n      let newl = layouts[layout],\n        //how old layout names map to the new ones\n        oldLayouts = {\n          \"12\": \"1\",\n          \"8/4\": \"2-1\",\n          \"6/6\": \"1-1\",\n          \"4/8\": \"1-2\",\n          \"4/4/4\": \"1-1-1\",\n          \"3/3/3/3\": \"1-1-1-1\"\n        },\n        size = disableResponsive !== false ? \"xl\" : responsiveSize;\n      let oldl = oldLayouts[layout];\n      if (newl !== undefined && newl[size] !== undefined) {\n        //return the layout\n        return layouts[layout][size];\n      } else if (\n        layouts[oldl] !== undefined &&\n        layouts[oldl][size] !== undefined\n      ) {\n        //return new layout that maps to old one\n        return layouts[oldl][size];\n      } else if (typeof layouts[\"1-1\"] !== typeof undefined) {\n        //return 2-column layout\n        return layouts[\"1-1\"][size];\n      }\n    }\n  }\n\n  /**\n   * gets a given column's current width based on layout and current responsive width\n   *\n   * @param {number} the index of the column\n   * @param {object} an object with a layout's column sizes at the current responsive width\n   * @returns {string} a given column's current width based on layout and current responsive width\n   */\n  _getColumnWidth(column, columnWidths) {\n    return columnWidths !== undefined && columnWidths[column] !== undefined\n      ? \"width:\" + columnWidths[column]\n      : \"min-height: unset\";\n  }\n  /**\n   * gets a given column's current width based on layout and current responsive width\n   *\n   * @param {string} the name of selected layout\n   * @returns {number} the number of columns in this layout\n   */\n  _getColumns(columnWidths) {\n    return columnWidths.length;\n  }\n  /**\n   * Focus / tab / click event normalization\n   */\n  _focusIn(e) {\n    if (this.editMode) {\n      var local = e.target;\n      // only activate if we touch something that's in the slot of the grid plate\n      if (local.parentNode === this) {\n        this.activeItem = local;\n      }\n    }\n  }\n  /**\n   * Position the arrows to change directions around something\n   */\n  positionArrows(item) {\n    if (item == null) {\n      this.shadowRoot.querySelectorAll(\".direction\").forEach(el => {\n        el.classList.remove(\"active\");\n      });\n    } else {\n      this.shadowRoot.querySelectorAll(\".direction\").forEach(el => {\n        el.classList.add(\"active\");\n      });\n\n      // ensure we disable invalid options contextually\n      // test for an element above us\n      this.shadowRoot.querySelector(\"#up\").disabled = !this.canMoveOrder(\n        item,\n        true\n      );\n      // test for an element below us\n      this.shadowRoot.querySelector(\"#down\").disabled = !this.canMoveOrder(\n        item,\n        false\n      );\n      // test for a column to the left of us\n      this.shadowRoot.querySelector(\"#left\").disabled = !this.canMoveSlot(\n        item,\n        true\n      );\n      // test for a column to the right of us\n      this.shadowRoot.querySelector(\"#right\").disabled = !this.canMoveSlot(\n        item,\n        false\n      );\n      // get coordinates of the page and active element\n      // delay since a transition might move it\n      let bodyRect = this.getBoundingClientRect();\n      let elemRect = item.getBoundingClientRect();\n      let topOffset = elemRect.top - bodyRect.top;\n      let leftOffset = elemRect.left - bodyRect.left;\n\n      // set the arrows to position correctly at all 4 sides\n      this.shadowRoot.querySelector(\"#up\").style.top = topOffset - 32 + \"px\";\n      this.shadowRoot.querySelector(\"#down\").style.top =\n        topOffset + elemRect.height + 2 + \"px\";\n      this.shadowRoot.querySelector(\"#left\").style.top =\n        topOffset + elemRect.height / 2 - 15 + \"px\";\n      this.shadowRoot.querySelector(\"#right\").style.top =\n        topOffset + elemRect.height / 2 - 15 + \"px\";\n\n      this.shadowRoot.querySelector(\"#up\").style.left =\n        leftOffset + elemRect.width / 2 - 15 + \"px\";\n      this.shadowRoot.querySelector(\"#down\").style.left =\n        leftOffset + elemRect.width / 2 - 15 + \"px\";\n      this.shadowRoot.querySelector(\"#left\").style.left =\n        leftOffset - 32 + \"px\";\n      this.shadowRoot.querySelector(\"#right\").style.left =\n        leftOffset + elemRect.width + 2 + \"px\";\n    }\n  }\n  /**\n   * Notice edit state has changed\n   */\n  _editModeChanged(newValue, oldValue) {\n    // flipping from false to true\n    if (newValue && !oldValue) {\n      let children = this.children;\n      // walk the children and apply the draggable state needed\n      for (var i in children) {\n        if (children[i].tagName) {\n          children[i].addEventListener(\"drop\", this.dropEvent.bind(this));\n          children[i].addEventListener(\"dragenter\", this.dragEnter.bind(this));\n          children[i].addEventListener(\"dragleave\", this.dragLeave.bind(this));\n          children[i].addEventListener(\"dragstart\", this.dragStart.bind(this));\n          children[i].addEventListener(\"dragend\", this.dragEnd.bind(this));\n          children[i].addEventListener(\"dragover\", function(e) {\n            e.preventDefault();\n          });\n          children[i].setAttribute(\"draggable\", true);\n          children[i].setAttribute(\"data-draggable\", true);\n          // ensure they can be focused\n          children[i].setAttribute(\"tabindex\", 0);\n        }\n      }\n    }\n    // flipping from true to false\n    else if (!newValue && oldValue) {\n      // unset active to clean up state\n      this.activeItem = null;\n      let children = this.children;\n      // walk the children and remove the draggable state needed\n      for (var i in children) {\n        if (typeof children[i].tagName !== typeof undefined) {\n          children[i].removeEventListener(\"drop\", this.dropEvent.bind(this));\n          children[i].removeEventListener(\n            \"dragstart\",\n            this.dragStart.bind(this)\n          );\n          children[i].removeEventListener(\n            \"dragenter\",\n            this.dragEnter.bind(this)\n          );\n          children[i].removeEventListener(\n            \"dragleave\",\n            this.dragLeave.bind(this)\n          );\n          children[i].removeEventListener(\"dragend\", this.dragEnd.bind(this));\n          children[i].removeEventListener(\"dragover\", function(e) {\n            e.preventDefault();\n          });\n          children[i].removeAttribute(\"draggable\");\n          children[i].removeAttribute(\"data-draggable\");\n          children[i].removeAttribute(\"tabindex\");\n        }\n      }\n    }\n  }\n  /**\n   * Enter an element, meaning we've over it while dragging\n   */\n  dragEnter(e) {\n    if (this.editMode) {\n      e.preventDefault();\n      e.target.classList.add(\"hovered\");\n    }\n  }\n  /**\n   * Leaving an element while dragging.\n   */\n  dragLeave(e) {\n    if (this.editMode) {\n      e.target.classList.remove(\"hovered\");\n    }\n  }\n  /**\n   * On double check, fire an event for HAX to insert a paragraph.\n   * If they aren't using HAX then it won't do anything\n   */\n  dblclick(e) {\n    if (this.editMode && e.target.id) {\n      let detail = {};\n      detail.properties = {\n        slot: e.target.id.replace(\"col\", \"col-\")\n      };\n      this.dispatchEvent(\n        new CustomEvent(\"grid-plate-add-item\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: detail\n        })\n      );\n    }\n  }\n  /**\n   * Drop an item onto another\n   */\n  dropEvent(e) {\n    if (this.editMode) {\n      let target = this.activeItem;\n      if (this.__dragTarget) {\n        target = this.__dragTarget;\n      }\n      // support global hax store target\n      if (\n        window.HaxStore &&\n        window.HaxStore.ready &&\n        window.HaxStore.instance.__dragTarget\n      ) {\n        target = window.HaxStore.instance.__dragTarget;\n      }\n      // edge case, something caused this to drag and it tried to do\n      // itself into itself\n      if (target === this) {\n        e.preventDefault();\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n        return false;\n      }\n      var local = e.target;\n      // if we have a slot on what we dropped into then we need to mirror that item\n      // and place ourselves below it in the DOM\n      if (\n        typeof target !== typeof undefined &&\n        target !== null &&\n        typeof local !== typeof undefined &&\n        local.getAttribute(\"slot\") != null &&\n        target !== local\n      ) {\n        target.setAttribute(\"slot\", local.getAttribute(\"slot\"));\n        this.insertBefore(target, local);\n        // ensure that if we caught this event we process it\n        e.preventDefault();\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n      }\n      // special case for dropping on an empty column or between items\n      // which could involve a miss on the column\n      else if (local.tagName === \"DIV\" && local.classList.contains(\"column\")) {\n        var col = local.id.replace(\"col\", \"\");\n        target.setAttribute(\"slot\", \"col-\" + col);\n        this.appendChild(target);\n        // ensure that if we caught this event we process it\n        e.preventDefault();\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n      }\n      let children = this.children;\n      // walk the children and apply the draggable state needed\n      for (var i in children) {\n        if (typeof children[i].classList !== typeof undefined) {\n          children[i].classList.remove(\"mover\");\n        }\n      }\n      for (var j = 1; j <= this.columns; j++) {\n        if (this.shadowRoot.querySelector(\"#col\" + j) !== undefined) {\n          this.shadowRoot.querySelector(\"#col\" + j).classList.remove(\"mover\");\n        }\n      }\n      // position arrows / set focus in case the DOM got updated above\n      if (\n        target &&\n        typeof target.focus === \"function\" &&\n        target.parentNode === this\n      ) {\n        this.positionArrows(target);\n        target.focus();\n      } else {\n        // element moved outside of this grid plate, lose focus\n        this.positionArrows(null);\n      }\n    }\n  }\n\n  /**\n   * Start a drag event, this is an element being dragged\n   */\n  dragStart(e) {\n    if (this.editMode) {\n      let children = this.children;\n      // walk the children and apply the draggable state needed\n      for (var i in children) {\n        if (typeof children[i].classList !== typeof undefined) {\n          children[i].classList.add(\"mover\");\n        }\n      }\n      for (var j = 1; j <= this.columns; j++) {\n        if (this.shadowRoot.querySelector(\"#col\" + j) !== undefined) {\n          this.shadowRoot.querySelector(\"#col\" + j).classList.add(\"mover\");\n        }\n      }\n    }\n  }\n\n  /**\n   * When we end dragging ensure we remove the mover class.\n   */\n  dragEnd(e) {\n    if (this.editMode) {\n      let children = this.children;\n      // walk the children and apply the draggable state needed\n      for (var i in children) {\n        if (typeof children[i].classList !== typeof undefined) {\n          children[i].classList.remove(\"mover\", \"hovered\");\n        }\n      }\n      for (var j = 1; j <= this.columns; j++) {\n        if (this.shadowRoot.querySelector(\"#col\" + j) !== undefined) {\n          this.shadowRoot\n            .querySelector(\"#col\" + j)\n            .classList.remove(\"mover\", \"hovered\");\n        }\n      }\n    }\n  }\n\n  /**\n   * Insert event noticed by HAX\n   */\n  haxInsertContent(e) {\n    // see if WE are the thing that's active when insert was fired\n    if (\n      this === window.HaxStore.instance.activeContainerNode &&\n      this.activeItem &&\n      typeof this.activeItem.focus === \"function\"\n    ) {\n      this.positionArrows(this.activeItem);\n      this.activeItem.focus();\n    }\n  }\n\n  /**\n   * Store updated, sync.\n   */\n  _haxStorePropertyUpdated(e) {\n    if (\n      e.detail &&\n      typeof e.detail.value !== typeof undefined &&\n      e.detail.property\n    ) {\n      if (typeof e.detail.value === \"object\") {\n        this[e.detail.property] = null;\n      }\n      if (e.detail.property === \"editMode\" && this.ignoreHax) {\n        // do nothing, we were told to ignore hax\n      } else {\n        this[e.detail.property] = e.detail.value;\n      }\n    }\n  }\n}\nwindow.customElements.define(GridPlate.tag, GridPlate);\nexport { GridPlate };\n"],"names":["GridPlateLayoutOptions","resizeTimer","activeItem","layouts","columnLayout","xs","sm","md","lg","xl","options","layoutFlip","Object","keys","this","i","length","GridPlate","droppable","ignoreHax","breakpointSm","breakpointMd","breakpointLg","breakpointXl","columns","disableResponsive","editMode","layout","responsiveSize","setTimeout","addEventListener","_this","_focusIn","bind","window","ResponsiveUtility","requestAvailability","LitElement","css","html","moveActiveElement","_getColumnWidth","columnWidths","node","includes","getAttribute","e","target","path","HaxStore","ready","instance","__dragTarget","dataTransfer","dropEffect","setDragImage","observer","MutationObserver","mutations","forEach","mutation","_this2","addedNodes","tagName","validateElementSlot","setAttribute","dropEvent","dragEnter","dragLeave","dragStart","dragEnd","preventDefault","removedNodes","removeEventListener","removeAttribute","observe","childList","_dragstart","_onKeyDown","_haxStorePropertyUpdated","haxInsertContent","resize","resizeListener","clearTimeout","_this3","positionArrows","key","isTextElement","shadowRoot","querySelector","focus","changedProperties","dispatchEvent","CustomEvent","detail","element","attribute","relativeToParent","j","undefined","col","dblclick","_getColumnWidths","disconnect","oldValue","propName","_this4","_droppableChanged","_editModeChanged","_activeItemChanged","Event","properties","newValue","item","before","dir","max","querySelectorAll","split","dest","parseInt","slot","nodes","assignedNodes","flatten","position","_typeof","insertBefore","id","moveOrder","moveSlot","el","classList","remove","add","blur","newl","size","oldl","column","local","parentNode","disabled","canMoveOrder","canMoveSlot","bodyRect","getBoundingClientRect","elemRect","topOffset","top","leftOffset","left","style","height","width","children","replace","bubbles","cancelable","composed","stopPropagation","stopImmediatePropagation","contains","appendChild","activeContainerNode","value","property","canScale","canPosition","canEditSource","settings","quick","configure","title","description","inputMethod","advanced","validationType","saveOptions","unsetAttributes","type","Boolean","reflect","Number","String","customElements","define","tag"],"mappings":"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"}