{"version":3,"file":"simple-icon-picker.umd.js","sources":["simple-icon-picker.umd.js"],"sourcesContent":["/**\n * Copyright 2019 Penn State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { SimplePicker } from \"@lrnwebcomponents/simple-picker/simple-picker.js\";\nimport { IronMeta } from \"@polymer/iron-meta/iron-meta.js\";\n\n/**\n * `simple-icon-picker`\n * `Uses simple-picker to create an icon picker`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass SimpleIconPicker extends SimplePicker {\n  \n  // render function\n  static get template() {\n    return html`\n<style>:host {\n  display: flex;\n  --simple-picker-option-size: 24px;\n  --simple-picker-collapse: {\n    width: 360px;\n    height: 300px;\n    max-height: 300px;\n    overflow: scroll;\n  }\n  --simple-picker-row: {\n    justify-content: flex-start;\n  }\n  --simple-picker-option: {\n    flex: 0 0 auto;\n  }\n}\n\n:host([hidden]) {\n  display: none;\n}\n</style>\n<simple-picker \n  aria-labelledby$=\"[[ariaLabelledby]]\"\n  disabled$=\"[[disabled]]\"\n  expanded$=\"[[expanded]]\"\n  hide-option-labels\n  label$=\"[[label]]\"\n  on-change=\"_handleChange\"\n  on-collapse=\"_handleCollapse\"\n  on-expand=\"_handleExpand\"\n  on-option-focus=\"_handleOptionFocus\"\n  options=\"[[options]]\"\n  value$=\"{{value}}\">\n</simple-picker>`;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n  /**\n   * Allow a null option to be selected?\n   */\n  \"allowNull\": {\n    \"name\": \"allowNull\",\n    \"type\": \"Boolean\",\n    \"value\": false\n  },\n\n  /**\n   * Icon picker should not have visible icon labels.\n   */\n  \"hideOptionLabels\": {\n    \"name\": \"hideOptionLabels\",\n    \"type\": \"Boolean\",\n    \"value\": true,\n    \"read-only\": true\n  },\n\n  /**\n    * An array of icons by name: ```\n[\n  \"editor:format-paint\",\n  \"content-copy\",\n  \"av:volume-off\"\n  \n]```\n  */\n  \"icons\": {\n    \"name\": \"icons\",\n    \"type\": \"Array\",\n    \"value\": []\n  },\n\n  /**\n    * An array of options for the picker, eg.: ```\n[\n  {\n    \"icon\": \"editor:format-paint\",      //Optional. Used if the picker is used as an icon picker.\n    \"alt\": \"Blue\",                      //Required for accessibility. Alt text description of the choice.\n    \"style\": \"background-color: blue;\", //Optional. Used to set an option's style.\n    ...                                 //Optional. Any other properties that should be captured as part of the selected option's value\n  },...\n]```\n    */\n  \"options\": {\n    \"name\": \"options\",\n    \"type\": \"Array\",\n    \"computed\": \"_getOptions(icons,__iconList,allowNull)\"\n  },\n\n  /**\n   * The value of the option.\n   */\n  \"value\": {\n    \"name\": \"label\",\n    \"type\": \"String\",\n    \"value\": null,\n    \"reflectToAttribute\": true,\n    \"notify\": true\n  },\n\n  /**\n    * An array of icons by name: ```\n[\n  \"editor:format-paint\",\n  \"content-copy\",\n  \"av:volume-off\"\n  \n]```\n  */\n  \"__iconList\": {\n    \"name\": \"__iconList\",\n    \"type\": \"Array\",\n    \"read-only\": true\n  }\n}\n;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"simple-icon-picker\";\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    const iconSets = new IronMeta({ type: \"iconset\" });\n    if (\n      this.icons.length === 0 &&\n      typeof iconSets !== typeof undefined &&\n      iconSets.list &&\n      iconSets.list.length\n    ) {\n      var iconList = [];\n      iconSets.list.forEach(function(item) {\n        item.getIconNames().forEach(icon => {\n          iconList.push(icon);\n        });\n      });\n      this.__iconList = iconList;\n    }\n  }\n\n  /**\n   * gets a list of icons and load them in a format\n   * that the simple-picker can take;\n   * if no icons are provided, loads a list from iron-meta\n   *\n   * @param {array} a list of custom icons for the picker\n   * @param {array} default list of icons for the picker\n   * @param {boolean} allow a null value for the picker\n   *\n   */\n  _getOptions(icons = [], __iconList = [], allowNull = false) {\n    if (icons.length === 0) icons = __iconList;\n    let options = allowNull === false ? [] : [[{ alt: \"null\", value: null }]],\n      h = allowNull === false ? 0 : 1,\n      cols =\n        Math.sqrt(icons.length + h) < 16\n          ? Math.ceil(Math.sqrt(icons.length + h))\n          : 15;\n    for (let i = 0; i < icons.length; i++) {\n      let j = h + i,\n        row = Math.floor(j / cols),\n        col = j - row * cols;\n      if (options[row] === undefined || options[row] === null)\n        options[row] = [];\n      options[row][col] = {\n        alt: icons[i],\n        icon: icons[i],\n        value: icons[i]\n      };\n    }\n    return options;\n  }\n\n  /**\n   * handles when the picker's value changes\n   */\n  _handleChange(e) {\n    this.value = e.detail.value;\n    this.dispatchEvent(\n      new CustomEvent(\"change\", { bubbles: true, detail: this })\n    );\n  }\n\n  /**\n   * handles when the picker collapses\n   */\n  _handleCollapse(e) {\n    this.dispatchEvent(new CustomEvent(\"collapse\", { detail: this }));\n  }\n\n  /**\n   * handles when the picker expands\n   */\n  _handleExpand(e) {\n    this.dispatchEvent(new CustomEvent(\"expand\", { detail: this }));\n  }\n\n  /**\n   * handles when the picker's focus changes\n   */\n  _handleOptionFocus(e) {\n    this.dispatchEvent(new CustomEvent(\"option-focus\", { detail: this }));\n  }\n  /**\n   * life cycle, element is removed from the DOM\n   */\n  //disconnectedCallback() {}\n}\nwindow.customElements.define(SimpleIconPicker.tag, SimpleIconPicker);\nexport { SimpleIconPicker };\n"],"names":["SimpleIconPicker","SimplePicker","html","iconSets","IronMeta","type","this","icons","length","_typeof","list","iconList","forEach","item","getIconNames","icon","push","__iconList","allowNull","options","alt","value","h","cols","Math","sqrt","ceil","i","j","row","floor","col","undefined","e","detail","dispatchEvent","CustomEvent","bubbles","window","customElements","define","tag"],"mappings":"49EAmBMA,gaAAyBC,6DAIpBC,qDAuCA,WAII,MACH,iBACA,iBACC,oBAMS,MACV,wBACA,iBACC,eACI,SAYN,MACC,aACA,cACC,YAcA,MACD,eACA,iBACI,iDAML,MACC,aACA,eACC,yBACa,UACZ,cAYE,MACJ,kBACA,qBACK,sCAWN,gIAODC,EAAW,IAAIC,WAAS,CAAEC,KAAM,eAEd,IAAtBC,KAAKC,MAAMC,sBACXC,EAAON,IACPA,EAASO,MACTP,EAASO,KAAKF,OACd,KACIG,EAAW,GACfR,EAASO,KAAKE,QAAQ,SAASC,GAC7BA,EAAKC,eAAeF,QAAQ,SAAAG,GAC1BJ,EAASK,KAAKD,YAGbE,WAAaN,6CAcVJ,yDAAQ,GAAIU,yDAAa,GAAIC,0DAClB,IAAjBX,EAAMC,SAAcD,EAAQU,WAC5BE,GAAwB,IAAdD,EAAsB,GAAK,CAAC,CAAC,CAAEE,IAAK,OAAQC,MAAO,QAC/DC,GAAkB,IAAdJ,EAAsB,EAAI,EAC9BK,EACEC,KAAKC,KAAKlB,EAAMC,OAASc,GAAK,GAC1BE,KAAKE,KAAKF,KAAKC,KAAKlB,EAAMC,OAASc,IACnC,GACCK,EAAI,EAAGA,EAAIpB,EAAMC,OAAQmB,IAAK,KACjCC,EAAIN,EAAIK,EACVE,EAAML,KAAKM,MAAMF,EAAIL,GACrBQ,EAAMH,EAAIC,EAAMN,OACGS,IAAjBb,EAAQU,IAAuC,OAAjBV,EAAQU,KACxCV,EAAQU,GAAO,IACjBV,EAAQU,GAAKE,GAAO,CAClBX,IAAKb,EAAMoB,GACXZ,KAAMR,EAAMoB,GACZN,MAAOd,EAAMoB,WAGVR,wCAMKc,QACPZ,MAAQY,EAAEC,OAAOb,WACjBc,cACH,IAAIC,YAAY,SAAU,CAAEC,SAAS,EAAMH,OAAQ5B,gDAOvC2B,QACTE,cAAc,IAAIC,YAAY,WAAY,CAAEF,OAAQ5B,8CAM7C2B,QACPE,cAAc,IAAIC,YAAY,SAAU,CAAEF,OAAQ5B,mDAMtC2B,QACZE,cAAc,IAAIC,YAAY,eAAgB,CAAEF,OAAQ5B,6CAOjEgC,OAAOC,eAAeC,OAAOxC,EAAiByC,IAAKzC"}