{"version":3,"file":"simple-colors.umd.js","sources":["lib/simple-colors-styles.js","simple-colors.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n *\n * `rich-text-editor-styles`\n * `a shared set of styles for rich-text-editor`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @pseudoElement\n * @polymer\n * @demo demo/index.html\n * @see lib/rich-text-editor-styles-demo.js\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\n\nwindow.SimpleColorsUtilities = window.SimpleColorsUtilities || {};\nconst utils = window.SimpleColorsUtilities;\n/**\n * The colors object.\n * Each color contains an array of shades as hex codes from lightest to darkest.\n */\nwindow.SimpleColorsUtilities.colors = {\n  grey: [\n    \"#ffffff\",\n    \"#eeeeee\",\n    \"#dddddd\",\n    \"#cccccc\",\n    \"#bbbbbb\",\n    \"#999999\",\n    \"#666666\",\n    \"#444444\",\n    \"#333333\",\n    \"#222222\",\n    \"#111111\",\n    \"#000000\"\n  ],\n  red: [\n    \"#ffdddd\",\n    \"#ffaeae\",\n    \"#ff8f8f\",\n    \"#ff7474\",\n    \"#fd5151\",\n    \"#ff2222\",\n    \"#ee0000\",\n    \"#ac0000\",\n    \"#850000\",\n    \"#670000\",\n    \"#520000\",\n    \"#3f0000\"\n  ],\n  pink: [\n    \"#ffe6f1\",\n    \"#ffa5cf\",\n    \"#ff87c0\",\n    \"#ff73b5\",\n    \"#fd60aa\",\n    \"#ff3996\",\n    \"#da004e\",\n    \"#b80042\",\n    \"#980036\",\n    \"#78002b\",\n    \"#5a0020\",\n    \"#440019\"\n  ],\n  purple: [\n    \"#fce6ff\",\n    \"#f4affd\",\n    \"#f394ff\",\n    \"#f07cff\",\n    \"#ed61ff\",\n    \"#e200ff\",\n    \"#a500ba\",\n    \"#8a009b\",\n    \"#6c0079\",\n    \"#490052\",\n    \"#33003a\",\n    \"#200025\"\n  ],\n  \"deep-purple\": [\n    \"#f3e4ff\",\n    \"#ddacff\",\n    \"#c97eff\",\n    \"#bb63f9\",\n    \"#b44aff\",\n    \"#a931ff\",\n    \"#7e00d8\",\n    \"#5d009f\",\n    \"#4c0081\",\n    \"#3a0063\",\n    \"#2a0049\",\n    \"#1d0033\"\n  ],\n  indigo: [\n    \"#e5ddff\",\n    \"#c3b2ff\",\n    \"#af97ff\",\n    \"#9e82ff\",\n    \"#9373ff\",\n    \"#835fff\",\n    \"#3a00ff\",\n    \"#2801b0\",\n    \"#20008c\",\n    \"#160063\",\n    \"#100049\",\n    \"#0a0030\"\n  ],\n  blue: [\n    \"#e2ecff\",\n    \"#acc9ff\",\n    \"#95baff\",\n    \"#74a5ff\",\n    \"#5892fd\",\n    \"#4083ff\",\n    \"#0059ff\",\n    \"#0041bb\",\n    \"#003494\",\n    \"#002569\",\n    \"#001947\",\n    \"#001333\"\n  ],\n  \"light-blue\": [\n    \"#ddefff\",\n    \"#a1d1ff\",\n    \"#92c9ff\",\n    \"#65b3ff\",\n    \"#58adff\",\n    \"#41a1ff\",\n    \"#007ffc\",\n    \"#0066ca\",\n    \"#0055a8\",\n    \"#003f7d\",\n    \"#002850\",\n    \"#001b36\"\n  ],\n  cyan: [\n    \"#ddf8ff\",\n    \"#9beaff\",\n    \"#77e2ff\",\n    \"#33d4ff\",\n    \"#1ccfff\",\n    \"#00c9ff\",\n    \"#009dc7\",\n    \"#007999\",\n    \"#005970\",\n    \"#003f50\",\n    \"#002c38\",\n    \"#001a20\"\n  ],\n  teal: [\n    \"#d9fff0\",\n    \"#98ffd7\",\n    \"#79ffcb\",\n    \"#56ffbd\",\n    \"#29ffac\",\n    \"#00ff9c\",\n    \"#009d75\",\n    \"#007658\",\n    \"#004e3a\",\n    \"#003829\",\n    \"#002a20\",\n    \"#001b14\"\n  ],\n  green: [\n    \"#e1ffeb\",\n    \"#acffc9\",\n    \"#79ffa7\",\n    \"#49ff88\",\n    \"#24ff70\",\n    \"#00f961\",\n    \"#008c37\",\n    \"#00762e\",\n    \"#005a23\",\n    \"#003d18\",\n    \"#002a11\",\n    \"#001d0c\"\n  ],\n  \"light-green\": [\n    \"#ebffdb\",\n    \"#c7ff9b\",\n    \"#b1ff75\",\n    \"#a1fd5a\",\n    \"#8efd38\",\n    \"#6fff00\",\n    \"#429d00\",\n    \"#357f00\",\n    \"#296100\",\n    \"#1b3f00\",\n    \"#143000\",\n    \"#0d2000\"\n  ],\n  lime: [\n    \"#f1ffd2\",\n    \"#dfff9b\",\n    \"#d4ff77\",\n    \"#caff58\",\n    \"#bdff2d\",\n    \"#aeff00\",\n    \"#649900\",\n    \"#4d7600\",\n    \"#3b5a00\",\n    \"#293f00\",\n    \"#223400\",\n    \"#182400\"\n  ],\n  yellow: [\n    \"#ffffd5\",\n    \"#ffffac\",\n    \"#ffff90\",\n    \"#ffff7c\",\n    \"#ffff3a\",\n    \"#f6f600\",\n    \"#929100\",\n    \"#787700\",\n    \"#585700\",\n    \"#454400\",\n    \"#303000\",\n    \"#242400\"\n  ],\n  amber: [\n    \"#fff2d4\",\n    \"#ffdf92\",\n    \"#ffd677\",\n    \"#ffcf5e\",\n    \"#ffc235\",\n    \"#ffc500\",\n    \"#b28900\",\n    \"#876800\",\n    \"#614b00\",\n    \"#413200\",\n    \"#302500\",\n    \"#221a00\"\n  ],\n  orange: [\n    \"#ffebd7\",\n    \"#ffca92\",\n    \"#ffbd75\",\n    \"#ffb05c\",\n    \"#ff9e36\",\n    \"#ff9625\",\n    \"#e56a00\",\n    \"#ae5100\",\n    \"#833d00\",\n    \"#612d00\",\n    \"#3d1c00\",\n    \"#2c1400\"\n  ],\n  \"deep-orange\": [\n    \"#ffe7e0\",\n    \"#ffb299\",\n    \"#ffa588\",\n    \"#ff8a64\",\n    \"#ff7649\",\n    \"#ff6c3c\",\n    \"#f53100\",\n    \"#b92500\",\n    \"#8a1c00\",\n    \"#561100\",\n    \"#3a0c00\",\n    \"#240700\"\n  ],\n  brown: [\n    \"#f0e2de\",\n    \"#e5b8aa\",\n    \"#c59485\",\n    \"#b68373\",\n    \"#ac7868\",\n    \"#a47060\",\n    \"#85574a\",\n    \"#724539\",\n    \"#5b3328\",\n    \"#3b1e15\",\n    \"#2c140e\",\n    \"#200e09\"\n  ],\n  \"blue-grey\": [\n    \"#e7eff1\",\n    \"#b1c5ce\",\n    \"#9badb6\",\n    \"#8d9fa7\",\n    \"#7a8f98\",\n    \"#718892\",\n    \"#56707c\",\n    \"#40535b\",\n    \"#2f3e45\",\n    \"#1e282c\",\n    \"#182023\",\n    \"#0f1518\"\n  ]\n};\n/**\n * Object with information on which color combinations are WCAG 2.0AA compliant, eg: ```\n  {\n    greyColor: {          //if either the color or its contrast will be a grey\n      aaLarge: [          //if bold text >= 14pt, text >= 18pt, decorative only, or disabled\n        {                 //for the first shade of a color\n          min: 7,         //index of the lightest contrasting shade of another color\n          max: 12         //index of the darkest contrasting shade of another color\n        },\n        ...\n      ],\n      aa: [ ... ]         //if bold text < 14pt, or text < 18pt\n    },\n    colorColor: { ... }   //if neither the color nor its contrast are grey\n  }```\n*/\nconst contrasts = {\n  greyColor: {\n    aaLarge: [\n      { min: 7, max: 12 },\n      { min: 7, max: 12 },\n      { min: 7, max: 12 },\n      { min: 7, max: 12 },\n      { min: 8, max: 12 },\n      { min: 10, max: 12 },\n      { min: 1, max: 3 },\n      { min: 1, max: 5 },\n      { min: 1, max: 6 },\n      { min: 1, max: 6 },\n      { min: 1, max: 6 },\n      { min: 1, max: 6 }\n    ],\n    aa: [\n      //if bold text < 14pt, or text < 18pt\n      { min: 7, max: 12 },\n      { min: 7, max: 12 },\n      { min: 7, max: 12 },\n      { min: 8, max: 12 },\n      { min: 8, max: 12 },\n      { min: 11, max: 12 },\n      { min: 1, max: 2 },\n      { min: 1, max: 7 },\n      { min: 1, max: 7 },\n      { min: 1, max: 6 },\n      { min: 1, max: 6 },\n      { min: 1, max: 6 }\n    ]\n  },\n  colorColor: {\n    //if neither the color nor its contrast are grey\n    aaLarge: [\n      { min: 7, max: 12 },\n      { min: 7, max: 12 },\n      { min: 8, max: 12 },\n      { min: 9, max: 12 },\n      { min: 10, max: 12 },\n      { min: 11, max: 12 },\n      { min: 1, max: 2 },\n      { min: 1, max: 3 },\n      { min: 1, max: 4 },\n      { min: 1, max: 5 },\n      { min: 1, max: 6 },\n      { min: 1, max: 6 }\n    ],\n    aa: [\n      { min: 8, max: 12 },\n      { min: 8, max: 12 },\n      { min: 9, max: 12 },\n      { min: 9, max: 12 },\n      { min: 11, max: 12 },\n      { min: 12, max: 12 },\n      { min: 1, max: 1 },\n      { min: 1, max: 2 },\n      { min: 1, max: 4 },\n      { min: 1, max: 4 },\n      { min: 1, max: 5 },\n      { min: 1, max: 5 }\n    ]\n  }\n};\n\n/**\n * for large or small text given a color and its shade,\n * lists all the shades of another color that would be\n * WCAG 2.0 AA-compliant for contrast\n *\n * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n * @param {string} color name, e.g. \"deep-purple\"\n * @param {string} color shade, e.g. 3\n * @param {string} contrasting color name, e.g. \"grey\"\n * @param {array} all of the WCAG 2.0 AA-compliant shades of the contrasting color\n */\nutils.getContrastingShades = (isLarge, colorName, colorShade, contrastName) => {\n  let hasGrey =\n      colorName === \"grey\" || contrastName === \"grey\"\n        ? \"greyColor\"\n        : \"colorColor\",\n    aa = isLarge ? \"aaLarge\" : \"aa\",\n    index = parseInt(colorShade) + 1,\n    range = contrasts[hasGrey][aa][index];\n  return Array(range.max - range.min + 1)\n    .fill()\n    .map((_, idx) => range.min + idx);\n};\n\n/**\n * for large or small text given a color and its shade,\n * lists all the colors and shades that would be\n * WCAG 2.0 AA-compliant for contrast\n *\n * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n * @param {string} color name, e.g. \"deep-purple\"\n * @param {string} color shade, e.g. 3\n * @param {object} all of the WCAG 2.0 AA-compliant colors and shades\n */\nutils.getContrastingColors = (colorName, colorShade, isLarge) => {\n  let result = {};\n  Object.keys(utils.colors).forEach(color => {\n    result[color] = utils.getContrastingShades(\n      isLarge,\n      colorName,\n      colorShade,\n      color\n    );\n  });\n  return result.color;\n};\n/**\n * determines if two shades are WCAG 2.0 AA-compliant for contrast\n *\n * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n * @param {string} color name, e.g. \"deep-purple\"\n * @param {string} color shade, e.g. 3\n * @param {string} contrasting color name, e.g. \"grey\"\n * @param {string} contrast shade, e.g. 12\n * @param {boolean} whether or not the contrasting shade is WCAG 2.0 AA-compliant\n */\nutils.isContrastCompliant = (\n  isLarge,\n  colorName,\n  colorShade,\n  contrastName,\n  contrastShade\n) => {\n  let hasGrey =\n      colorName === \"grey\" || contrastName === \"grey\"\n        ? \"greyColor\"\n        : \"colorColor\",\n    aa = isLarge ? \"aaLarge\" : \"aa\",\n    index = parseInt(colorShade) + 1,\n    range = contrasts[hasGrey][aa][index];\n  return contrastShade >= range.min && ontrastShade >= range.max;\n};\n\n/**\n * gets the current shade based on the index\n *\n * @param {string} the index\n * @param {number} the shade\n */\nutils.indexToShade = index => {\n  return parseInt(index) + 1;\n};\n\n/**\n * gets the current shade based on the index\n *\n * @param {string} the shade\n * @param {number} the index\n */\nutils.shadeToIndex = shade => {\n  return parseInt(shade) - 1;\n};\n\n/**\n * gets the current shade\n *\n * @param {string} the shade\n * @param {number} the inverted shade\n */\n\nutils.invertShade = shade => {\n  return utils.colors[\"grey\"].length + 1 - parseInt(shade);\n};\n\n/**\n * inverts the current index\n *\n * @param {string} the index\n * @param {number} the inverted index\n */\nutils.invertIndex = index => {\n  return utils.colors[\"grey\"].length - 1 - parseInt(index);\n};\n\n/**\n * returns the maximum contrast to the index\n *\n * @param {string} the index\n * @param {number} the index with maximum contrast\n */\nutils.maxContrastIndex = index => {\n  return parseInt(index) < utils.colors[\"grey\"].length / 2\n    ? utils.colors[\"grey\"].length - 1\n    : 0;\n};\n\n/**\n * returns the maximum contrast to the shade\n *\n * @param {string} the shade\n * @param {number} the shade with maximum contrast\n */\nutils.maxContrastShade = shade => {\n  return parseInt(shade) < utils.colors[\"grey\"].length / 2 + 1\n    ? utils.colors[\"grey\"].length\n    : 1;\n};\n\n/**\n * returns a variable based on color name, shade, and fixed theme\n *\n * @param {string} the color name\n * @param {number} the color shade\n * @param {boolean} the color shade\n * @returns {string} the CSS Variable\n */\nutils.makeVariable = (color = \"grey\", shade = 1, theme = \"default\") => {\n  return [\"--simple-colors\", theme, \"theme\", color, shade].join(\"-\");\n};\n\n/**\n * returns a variable based on color name, shade, and fixed theme\n *\n * @param {string} the color name\n * @param {number} the color shade\n * @param {boolean} the color shade\n * @returns {string} the CSS class\n */\nutils.makeClass = (\n  color = \"grey\",\n  shade = 1,\n  theme = \"default\",\n  suffix = \"\"\n) => {\n  return [\".simple-colors\", theme, \"theme\", color, shade].join(\"-\") + suffix;\n};\n\n/**\n * gets the correct hexCode for a color shade,\n * depending on whether or not the list is dark (inverted)\n */\nutils.getHex = (hexcodes, index, dark) => {\n  if (dark) {\n    return hexcodes[utils.invertIndex(utils.colors, index)];\n  } else {\n    return hexcodes[index];\n  }\n};\n/**\n * adds all CSS variables for a given theme (default, dark, or light)\n */\nutils.addThemeVariables = (theme, dark) => {\n  let str = [];\n  for (var name in utils.colors) {\n    str.push(utils.addColorShades(theme, name, utils.colors[name], dark));\n  }\n  return str.join(\"\");\n};\n/**\n * adds CSS variables for all shades of contrast for a given theme+color\n * and assigns a hex code to it\n *\n * @returns {string}\n */\nutils.addColorShades = (theme, color, hexcodes, dark) => {\n  let str = [];\n  for (let i = 0; i < hexcodes.length; i++) {\n    let cssvar = utils.makeVariable(color, i + 1, theme),\n      hex = dark ? hexcodes[utils.invertIndex(i)] : hexcodes[i];\n    str.push(cssvar + \":\" + hex + \"; \");\n  }\n  return str.join(\"\");\n};\n/**\n * adds all CSS variables as styles for :host and :host([dark]) selectors\n *\n * @returns {string}\n */\nutils.addCssVariables = () => {\n  let str = [],\n    greys = utils.colors[\"grey\"];\n  str.push(\n    utils.addStatement(\n      \":host\",\n      utils.addColorShades(\"default\", \"accent\", greys, false) +\n        utils.addThemeVariables(\"default\", false)\n    )\n  );\n  str.push(\n    utils.addStatement(\n      \":host\",\n      utils.addColorShades(\"fixed\", \"accent\", greys, false) +\n        utils.addThemeVariables(\"fixed\", false)\n    )\n  );\n\n  /**\n   * dark and light themes will be deprecated\n   * in favor of default and fixed themes\n   */\n  str.push(\n    utils.addStatement(\n      \":host\",\n      utils.addColorShades(\"light\", \"accent\", greys, false) +\n        utils.addThemeVariables(\"light\", false)\n    )\n  );\n\n  str.push(\n    utils.addStatement(\n      \":host\",\n      utils.addColorShades(\"dark\", \"accent\", greys, true) +\n        utils.addThemeVariables(\"dark\", true)\n    )\n  );\n  str.push(\n    utils.addStatement(\n      \":host([dark])\",\n      utils.addColorShades(\"default\", \"accent\", greys, true) +\n        utils.addThemeVariables(\"default\", true)\n    )\n  );\n  return utils.addStyle(str.join(\"\"));\n};\n/**\n * adds all CSS accent color variables as styles for :host([accent-color]]) selectors\n *\n * @returns {object}\n */\nutils.addAccentVariables = () => {\n  let str = [];\n  for (let color in utils.colors) {\n    str.push(\n      utils.addStatement(\n        ':host([accent-color=\"' + color + '\"])',\n        [\n          utils.addColorShades(\"default\", \"accent\", utils.colors[color], false),\n          utils.addColorShades(\"fixed\", \"accent\", utils.colors[color], false),\n          utils.addColorShades(\"light\", \"accent\", utils.colors[color], false),\n          utils.addColorShades(\"dark\", \"accent\", utils.colors[color], true)\n        ].join(\"\")\n      )\n    );\n\n    str.push(\n      utils.addStatement(\n        ':host([dark][accent-color=\"' + color + '\"])',\n        [\n          utils.addColorShades(\"default\", \"accent\", utils.colors[color], true)\n        ].join(\"\")\n      )\n    );\n  }\n  return utils.addStyle(str.join(\"\"));\n};\n/**\n * adds all CSS color classes for a given theme\n *\n * @returns {object}\n */\nutils.addClasses = () => {\n  let themes = [\"default\", \"fixed\", \"light\", \"dark\"],\n    str = [];\n  for (let i = 0; i < themes.length; i++) {\n    for (let j = 0; j < utils.colors[\"grey\"].length; j++) {\n      let bg = \":host \" + utils.makeClass(\"accent\", j + 1, themes[i]),\n        cssvar = utils.makeVariable(\"accent\", j + 1, themes[i]);\n      str.push(\n        [\n          utils.addStatement(bg, \"background-color: var(\" + cssvar + \");\"),\n          utils.addStatement(bg + \"-text\", \"color: var(\" + cssvar + \");\"),\n          utils.addStatement(\n            bg + \"-border\",\n            \"border: 1px solid var(\" + cssvar + \");\"\n          )\n        ].join(\"\")\n      );\n      for (let color in utils.colors) {\n        let bg = \":host \" + utils.makeClass(color, i + 1, themes[i]),\n          cssVar = utils.makeVariable(color, i + 1, themes[i]);\n        str.push(\n          [\n            utils.addStatement(bg, \"background-color: var(\" + cssvar + \");\"),\n            utils.addStatement(bg + \"-text\", \"color: var(\" + cssvar + \");\"),\n            utils.addStatement(\n              bg + \"-border\",\n              \"border: 1px solid var(\" + cssvar + \");\"\n            )\n          ].join(\"\")\n        );\n      }\n    }\n  }\n  return utils.addStyle(str.join(\"\"));\n};\nutils.addStatement = (selector, style) => {\n  return selector + \" {\\n\" + style + \"\\n}\\n\";\n};\nutils.addStyle = content => {\n  return \"<style>\\n\" + content + \"\\n</style>\\n\";\n};\nutils.testStyle = str => {\n  let temp = document.createElement(\"template\");\n  temp.innerHTML = utils.addStyle(str);\n  console.log(temp);\n};\n\n/**\n * append and register the shared styles\n */\nconst template = document.createElement(\"template\"),\n  styleElement = document.createElement(\"dom-module\");\n\ntemplate.innerHTML =\n  utils.addCssVariables() + utils.addAccentVariables() + utils.addClasses();\nstyleElement.appendChild(template);\nstyleElement.register(\"simple-colors\");\n","/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"./lib/simple-colors-styles.js\";\n/**\n * `simple-colors`\n * `a shared set of styles for @lrnwebcomponents`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @demo demo/index.html demo\n * @demo demo/how.html getting started\n * @demo demo/colors.html all of the colors\n * @demo demo/picker.html simple-colors-picker\n * @demo demo/extending.html extending simple-colors\n */\nclass SimpleColors extends PolymerElement {\n  // render function\n  static get template() {\n    return html`\n      <style is=\"custom-style\" include=\"simple-colors\"></style>\n      <slot></slot>\n    `;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * a selected accent-color: grey, red, pink, purple, etc.\n       */\n      accentColor: {\n        name: \"accentColor\",\n        type: \"String\",\n        value: \"grey\",\n        reflectToAttribute: true,\n        notify: true\n      },\n      /**\n       * make the default theme dark?\n       */\n      dark: {\n        name: \"dark\",\n        type: \"Boolean\",\n        value: false,\n        reflectToAttribute: true,\n        notify: true\n      },\n      /**\n       * make the default theme dark?\n       */\n      colors: {\n        name: \"colors\",\n        type: \"Object\",\n        value: window.SimpleColorsUtilities.colors,\n        notify: true\n      }\n    };\n  }\n\n  static get tag() {\n    return \"simple-colors\";\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n  }\n\n  /**\n   * life cycle, element is ready\n   */\n  ready() {\n    super.ready();\n  }\n\n  /**\n   * returns the maximum contrast to the shade\n   *\n   * @param {string} the shade\n   * @param {number} the shade with maximum contrast\n   */\n  maxContrastShade(shade) {\n    return window.SimpleColorsUtilities.maxContrastShade(shade);\n  }\n\n  /**\n   * gets the current shade\n   *\n   * @param {string} the shade\n   * @param {number} the inverted shade\n   */\n  invertShade(shade) {\n    return window.SimpleColorsUtilities.invertShade(shade);\n  }\n\n  /**\n   * gets the color information of a given CSS variable or class\n   *\n   * @param {string} the CSS variable (eg. `--simple-colors-fixed-theme-red-3`) or a class (eg. `.simple-colors-fixed-theme-red-3-text`)\n   * @param {object} an object that includes the theme, color, and shade information\n   */\n  getColorInfo(colorName) {\n    let temp1 = colorName\n        .replace(/(.+simple-colors-)?(-text)?(-border)?/g, \"\")\n        .split(\"-theme-\"),\n      theme = temp1.length > 0 ? temp1[0] : \"default\",\n      temp2 = temp1.length > 0 ? temp1[1].split(\"-\") : temp1[0].split(\"-\"),\n      color =\n        temp2.length > 1 ? temp2.slice(1, temp2.length - 1).join(\"-\") : \"grey\",\n      shade = temp2.length > 1 ? temp2[temp2.length - 1] : \"1\";\n    return {\n      theme: theme,\n      color: color,\n      shade: shade\n    };\n  }\n\n  /**\n   * returns a variable based on color name, shade, and fixed theme\n   *\n   * @param {string} the color name\n   * @param {number} the color shade\n   * @param {boolean} the color shade\n   * @returns {string} the CSS Variable\n   */\n  makeVariable(color = \"grey\", shade = 1, theme = \"default\") {\n    return window.SimpleColorsUtilities.makeVariable(\n      (color = \"grey\"),\n      (shade = 1),\n      (theme = \"default\")\n    );\n  }\n\n  /**\n   * returns a variable based on color name, shade, and fixed theme\n   *\n   * @param {string} the color name\n   * @param {number} the color shade\n   * @param {boolean} the color shade\n   * @returns {string} the CSS class\n   */\n  makeClass(color = \"grey\", shade = 1, theme = \"default\", suffix = \"\") {\n    return window.SimpleColorsUtilities.makeClass(\n      (color = \"grey\"),\n      (shade = 1),\n      (theme = \"default\"),\n      (suffix = \"\")\n    );\n  }\n\n  /**\n   * for large or small text given a color and its shade,\n   * lists all the colors and shades that would be\n   * WCAG 2.0 AA-compliant for contrast\n   *\n   * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n   * @param {string} color name, e.g. \"deep-purple\"\n   * @param {string} color shade, e.g. 3\n   * @param {object} all of the WCAG 2.0 AA-compliant colors and shades\n   */\n  getContrastingColors(colorName, colorShade, isLarge) {\n    return window.SimpleColorsUtilities.getContrastingColors(\n      colorName,\n      colorShade,\n      isLarge\n    );\n  }\n\n  /**\n   * for large or small text given a color and its shade,\n   * lists all the shades of another color that would be\n   * WCAG 2.0 AA-compliant for contrast\n   *\n   * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n   * @param {string} color name, e.g. \"deep-purple\"\n   * @param {string} color shade, e.g. 3\n   * @param {string} contrasting color name, e.g. \"grey\"\n   * @param {array} all of the WCAG 2.0 AA-compliant shades of the contrasting color\n   */\n  getContrastingShades(isLarge, colorName, colorShade, contrastName) {\n    return window.SimpleColorsUtilities.getContrastingShades(\n      isLarge,\n      colorName,\n      colorShade,\n      contrastName\n    );\n  }\n\n  /**\n   * determines if two shades are WCAG 2.0 AA-compliant for contrast\n   *\n   * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n   * @param {string} color name, e.g. \"deep-purple\"\n   * @param {string} color shade, e.g. 3\n   * @param {string} contrasting color name, e.g. \"grey\"\n   * @param {string} contrast shade, e.g. 12\n   * @param {boolean} whether or not the contrasting shade is WCAG 2.0 AA-compliant\n   */\n  isContrastCompliant(\n    isLarge,\n    colorName,\n    colorShade,\n    contrastName,\n    contrastShade\n  ) {\n    return window.SimpleColorsUtilities.isContrastCompliant(\n      isLarge,\n      colorName,\n      colorShade,\n      contrastName,\n      contrastShade\n    );\n  }\n}\ncustomElements.define(SimpleColors.tag, SimpleColors);\nexport { SimpleColors };\n"],"names":["window","SimpleColorsUtilities","utils","colors","grey","red","pink","purple","indigo","blue","cyan","teal","green","lime","yellow","amber","orange","brown","contrasts","greyColor","aaLarge","min","max","aa","colorColor","getContrastingShades","isLarge","colorName","colorShade","contrastName","hasGrey","index","parseInt","range","Array","fill","map","_","idx","getContrastingColors","result","Object","keys","forEach","color","isContrastCompliant","contrastShade","ontrastShade","indexToShade","shadeToIndex","shade","invertShade","length","invertIndex","maxContrastIndex","maxContrastShade","makeVariable","join","makeClass","theme","suffix","getHex","hexcodes","dark","addThemeVariables","str","name","push","addColorShades","i","cssvar","hex","addCssVariables","greys","addStatement","addStyle","addAccentVariables","addClasses","themes","j","bg","selector","style","content","testStyle","temp","document","createElement","innerHTML","console","log","template","styleElement","appendChild","register","SimpleColors","PolymerElement","html","accentColor","type","value","reflectToAttribute","notify","temp1","replace","split","temp2","slice","customElements","define","tag"],"mappings":"gqCAiBAA,OAAOC,sBAAwBD,OAAOC,uBAAyB,GAC/D,IAAMC,EAAQF,OAAOC,sBAKrBD,OAAOC,sBAAsBE,OAAS,CACpCC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,IAAK,CACH,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,yBAEa,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,wBAEY,CACZ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,MAAO,CACL,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,yBAEa,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,MAAO,CACL,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,yBAEa,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,MAAO,CACL,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,uBAEW,CACX,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAmBJ,IAAMC,EAAY,CAChBC,UAAW,CACTC,QAAS,CACP,CAAEC,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,GAAIC,IAAK,IAChB,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,IAEjBC,GAAI,EAEAF,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,GAAIC,IAAK,IAChB,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,KAGnBE,WAAY,CAEVJ,QAAS,CACP,CAAEC,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,GAAIC,IAAK,IAChB,CAAED,IAAK,GAAIC,IAAK,IAChB,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,IAEjBC,GAAI,CACF,CAAEF,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,EAAGC,IAAK,IACf,CAAED,IAAK,GAAIC,IAAK,IAChB,CAAED,IAAK,GAAIC,IAAK,IAChB,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,GACf,CAAED,IAAK,EAAGC,IAAK,MAgBrBpB,EAAMuB,qBAAuB,SAACC,EAASC,EAAWC,EAAYC,OACxDC,EACc,SAAdH,GAAyC,SAAjBE,EACpB,YACA,aACNN,EAAKG,EAAU,UAAY,KAC3BK,EAAQC,SAASJ,GAAc,EAC/BK,EAAQf,EAAUY,GAASP,GAAIQ,UAC1BG,MAAMD,EAAMX,IAAMW,EAAMZ,IAAM,GAClCc,OACAC,IAAI,SAACC,EAAGC,UAAQL,EAAMZ,IAAMiB,KAajCpC,EAAMqC,qBAAuB,SAACZ,EAAWC,EAAYF,OAC/Cc,EAAS,UACbC,OAAOC,KAAKxC,EAAMC,QAAQwC,QAAQ,SAAAC,GAChCJ,EAAOI,GAAS1C,EAAMuB,qBACpBC,EACAC,EACAC,EACAgB,KAGGJ,EAAOI,OAYhB1C,EAAM2C,oBAAsB,SAC1BnB,EACAC,EACAC,EACAC,EACAiB,OAEIhB,EACc,SAAdH,GAAyC,SAAjBE,EACpB,YACA,aACNN,EAAKG,EAAU,UAAY,KAC3BK,EAAQC,SAASJ,GAAc,EAC/BK,EAAQf,EAAUY,GAASP,GAAIQ,UAC1Be,GAAiBb,EAAMZ,KAAO0B,cAAgBd,EAAMX,KAS7DpB,EAAM8C,aAAe,SAAAjB,UACZC,SAASD,GAAS,GAS3B7B,EAAM+C,aAAe,SAAAC,UACZlB,SAASkB,GAAS,GAU3BhD,EAAMiD,YAAc,SAAAD,UACXhD,EAAMC,OAAN,KAAqBiD,OAAS,EAAIpB,SAASkB,IASpDhD,EAAMmD,YAAc,SAAAtB,UACX7B,EAAMC,OAAN,KAAqBiD,OAAS,EAAIpB,SAASD,IASpD7B,EAAMoD,iBAAmB,SAAAvB,UAChBC,SAASD,GAAS7B,EAAMC,OAAN,KAAqBiD,OAAS,EACnDlD,EAAMC,OAAN,KAAqBiD,OAAS,EAC9B,GASNlD,EAAMqD,iBAAmB,SAAAL,UAChBlB,SAASkB,GAAShD,EAAMC,OAAN,KAAqBiD,OAAS,EAAI,EACvDlD,EAAMC,OAAN,KAAqBiD,OACrB,GAWNlD,EAAMsD,aAAe,eAACZ,yDAAQ,OAAQM,yDAAQ,QACrC,CAAC,yEAD+C,UACrB,QAASN,EAAOM,GAAOO,KAAK,MAWhEvD,EAAMwD,UAAY,eAChBd,yDAAQ,OACRM,yDAAQ,EACRS,yDAAQ,UACRC,yDAAS,SAEF,CAAC,iBAAkBD,EAAO,QAASf,EAAOM,GAAOO,KAAK,KAAOG,GAOtE1D,EAAM2D,OAAS,SAACC,EAAU/B,EAAOgC,UAC3BA,EACKD,EAAS5D,EAAMmD,YAAYnD,EAAMC,OAAQ4B,IAEzC+B,EAAS/B,IAMpB7B,EAAM8D,kBAAoB,SAACL,EAAOI,OAC5BE,EAAM,OACL,IAAIC,KAAQhE,EAAMC,OACrB8D,EAAIE,KAAKjE,EAAMkE,eAAeT,EAAOO,EAAMhE,EAAMC,OAAO+D,GAAOH,WAE1DE,EAAIR,KAAK,KAQlBvD,EAAMkE,eAAiB,SAACT,EAAOf,EAAOkB,EAAUC,WAC1CE,EAAM,GACDI,EAAI,EAAGA,EAAIP,EAASV,OAAQiB,IAAK,KACpCC,EAASpE,EAAMsD,aAAaZ,EAAOyB,EAAI,EAAGV,GAC5CY,EAAMR,EAAOD,EAAS5D,EAAMmD,YAAYgB,IAAMP,EAASO,GACzDJ,EAAIE,KAAKG,EAAS,IAAMC,EAAM,aAEzBN,EAAIR,KAAK,KAOlBvD,EAAMsE,gBAAkB,eAClBP,EAAM,GACRQ,EAAQvE,EAAMC,OAAN,YACV8D,EAAIE,KACFjE,EAAMwE,aACJ,QACAxE,EAAMkE,eAAe,UAAW,SAAUK,GAAO,GAC/CvE,EAAM8D,kBAAkB,WAAW,KAGzCC,EAAIE,KACFjE,EAAMwE,aACJ,QACAxE,EAAMkE,eAAe,QAAS,SAAUK,GAAO,GAC7CvE,EAAM8D,kBAAkB,SAAS,KAQvCC,EAAIE,KACFjE,EAAMwE,aACJ,QACAxE,EAAMkE,eAAe,QAAS,SAAUK,GAAO,GAC7CvE,EAAM8D,kBAAkB,SAAS,KAIvCC,EAAIE,KACFjE,EAAMwE,aACJ,QACAxE,EAAMkE,eAAe,OAAQ,SAAUK,GAAO,GAC5CvE,EAAM8D,kBAAkB,QAAQ,KAGtCC,EAAIE,KACFjE,EAAMwE,aACJ,gBACAxE,EAAMkE,eAAe,UAAW,SAAUK,GAAO,GAC/CvE,EAAM8D,kBAAkB,WAAW,KAGlC9D,EAAMyE,SAASV,EAAIR,KAAK,MAOjCvD,EAAM0E,mBAAqB,eACrBX,EAAM,OACL,IAAIrB,KAAS1C,EAAMC,OACtB8D,EAAIE,KACFjE,EAAMwE,aACJ,wBAA0B9B,EAAQ,MAClC,CACE1C,EAAMkE,eAAe,UAAW,SAAUlE,EAAMC,OAAOyC,IAAQ,GAC/D1C,EAAMkE,eAAe,QAAS,SAAUlE,EAAMC,OAAOyC,IAAQ,GAC7D1C,EAAMkE,eAAe,QAAS,SAAUlE,EAAMC,OAAOyC,IAAQ,GAC7D1C,EAAMkE,eAAe,OAAQ,SAAUlE,EAAMC,OAAOyC,IAAQ,IAC5Da,KAAK,MAIXQ,EAAIE,KACFjE,EAAMwE,aACJ,8BAAgC9B,EAAQ,MACxC,CACE1C,EAAMkE,eAAe,UAAW,SAAUlE,EAAMC,OAAOyC,IAAQ,IAC/Da,KAAK,aAINvD,EAAMyE,SAASV,EAAIR,KAAK,MAOjCvD,EAAM2E,WAAa,mBACbC,EAAS,CAAC,UAAW,QAAS,QAAS,QACzCb,EAAM,GACCI,EAAI,EAAGA,EAAIS,EAAO1B,OAAQiB,QAC5B,IAAIU,EAAI,EAAGA,EAAI7E,EAAMC,OAAN,KAAqBiD,OAAQ2B,IAAK,KAChDC,EAAK,SAAW9E,EAAMwD,UAAU,SAAUqB,EAAI,EAAGD,EAAOT,IAC1DC,EAASpE,EAAMsD,aAAa,SAAUuB,EAAI,EAAGD,EAAOT,QAWjD,IAAIzB,KAVTqB,EAAIE,KACF,CACEjE,EAAMwE,aAAaM,EAAI,yBAA2BV,EAAS,MAC3DpE,EAAMwE,aAAaM,EAAK,QAAS,cAAgBV,EAAS,MAC1DpE,EAAMwE,aACJM,EAAK,UACL,yBAA2BV,EAAS,OAEtCb,KAAK,KAESvD,EAAMC,OAAQ,KAC1B6E,EAAK,SAAW9E,EAAMwD,UAAUd,EAAOyB,EAAI,EAAGS,EAAOT,IAC9CnE,EAAMsD,aAAaZ,EAAOyB,EAAI,EAAGS,EAAOT,IACnDJ,EAAIE,KACF,CACEjE,EAAMwE,aAAaM,EAAI,yBAA2BV,EAAS,MAC3DpE,EAAMwE,aAAaM,EAAK,QAAS,cAAgBV,EAAS,MAC1DpE,EAAMwE,aACJM,EAAK,UACL,yBAA2BV,EAAS,OAEtCb,KAAK,aAKRvD,EAAMyE,SAASV,EAAIR,KAAK,MAEjCvD,EAAMwE,aAAe,SAACO,EAAUC,UACvBD,EAAW,OAASC,EAAQ,SAErChF,EAAMyE,SAAW,SAAAQ,SACR,YAAcA,EAAU,gBAEjCjF,EAAMkF,UAAY,SAAAnB,OACZoB,EAAOC,SAASC,cAAc,YAClCF,EAAKG,UAAYtF,EAAMyE,SAASV,GAChCwB,QAAQC,IAAIL,IAMd,IAAMM,EAAWL,SAASC,cAAc,YACtCK,EAAeN,SAASC,cAAc,qQAExCI,EAASH,UACPtF,EAAMsE,kBAAoBtE,EAAM0E,qBAAuB1E,EAAM2E,aAC/De,EAAaC,YAAYF,GACzBC,EAAaE,SAAS,qBCzrBhBC,gaAAqBC,+DAGhBC,qDAQA,CAILC,YAAa,CACXhC,KAAM,cACNiC,KAAM,SACNC,MAAO,OACPC,oBAAoB,EACpBC,QAAQ,GAKVvC,KAAM,CACJG,KAAM,OACNiC,KAAM,UACNC,OAAO,EACPC,oBAAoB,EACpBC,QAAQ,GAKVnG,OAAQ,CACN+D,KAAM,SACNiC,KAAM,SACNC,MAAOpG,OAAOC,sBAAsBE,OACpCmG,QAAQ,sCAML,0OAsBQpD,UACRlD,OAAOC,sBAAsBsD,iBAAiBL,uCAS3CA,UACHlD,OAAOC,sBAAsBkD,YAAYD,wCASrCvB,OACP4E,EAAQ5E,EACP6E,QAAQ,yCAA0C,IAClDC,MAAM,WACT9C,EAAQ4C,EAAMnD,OAAS,EAAImD,EAAM,GAAK,UACtCG,EAAQH,EAAMnD,OAAS,EAAImD,EAAM,GAAGE,MAAM,KAAOF,EAAM,GAAGE,MAAM,WAI3D,CACL9C,MAAOA,EACPf,MAJE8D,EAAMtD,OAAS,EAAIsD,EAAMC,MAAM,EAAGD,EAAMtD,OAAS,GAAGK,KAAK,KAAO,OAKlEP,MAJQwD,EAAMtD,OAAS,EAAIsD,EAAMA,EAAMtD,OAAS,GAAK,2NAiBhDpD,OAAOC,sBAAsBuD,aACzB,OACA,EACA,sRAaJxD,OAAOC,sBAAsByD,UACzB,OACA,EACA,UACC,iDAcO/B,EAAWC,EAAYF,UACnC1B,OAAOC,sBAAsBsC,qBAClCZ,EACAC,EACAF,gDAeiBA,EAASC,EAAWC,EAAYC,UAC5C7B,OAAOC,sBAAsBwB,qBAClCC,EACAC,EACAC,EACAC,+CAeFH,EACAC,EACAC,EACAC,EACAiB,UAEO9C,OAAOC,sBAAsB4C,oBAClCnB,EACAC,EACAC,EACAC,EACAiB,wCAIN8D,eAAeC,OAAOd,EAAae,IAAKf"}