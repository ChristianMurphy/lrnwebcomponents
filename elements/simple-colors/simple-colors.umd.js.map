{"version":3,"file":"simple-colors.umd.js","sources":["lib/simple-colors-styles.js","simple-colors.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n *\n * `simple-colors-styles`\n * `a shared set of styles for simple-colors`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { afterNextRender } from \"@polymer/polymer/lib/utils/render-status.js\";\nwindow.SimpleColorsStyles = {};\nwindow.SimpleColorsStyles.instance = null;\nwindow.SimpleColorsStyles.colors = {\n  grey: [\n    \"#ffffff\",\n    \"#eeeeee\",\n    \"#dddddd\",\n    \"#cccccc\",\n    \"#bbbbbb\",\n    \"#999999\",\n    \"#666666\",\n    \"#444444\",\n    \"#333333\",\n    \"#222222\",\n    \"#111111\",\n    \"#000000\"\n  ],\n  red: [\n    \"#ffdddd\",\n    \"#ffaeae\",\n    \"#ff8f8f\",\n    \"#ff7474\",\n    \"#fd5151\",\n    \"#ff2222\",\n    \"#ee0000\",\n    \"#ac0000\",\n    \"#850000\",\n    \"#670000\",\n    \"#520000\",\n    \"#3f0000\"\n  ],\n  pink: [\n    \"#ffe6f1\",\n    \"#ffa5cf\",\n    \"#ff87c0\",\n    \"#ff73b5\",\n    \"#fd60aa\",\n    \"#ff3996\",\n    \"#da004e\",\n    \"#b80042\",\n    \"#980036\",\n    \"#78002b\",\n    \"#5a0020\",\n    \"#440019\"\n  ],\n  purple: [\n    \"#fce6ff\",\n    \"#f4affd\",\n    \"#f394ff\",\n    \"#f07cff\",\n    \"#ed61ff\",\n    \"#e200ff\",\n    \"#a500ba\",\n    \"#8a009b\",\n    \"#6c0079\",\n    \"#490052\",\n    \"#33003a\",\n    \"#200025\"\n  ],\n  \"deep-purple\": [\n    \"#f3e4ff\",\n    \"#ddacff\",\n    \"#c97eff\",\n    \"#bb63f9\",\n    \"#b44aff\",\n    \"#a931ff\",\n    \"#7e00d8\",\n    \"#5d009f\",\n    \"#4c0081\",\n    \"#3a0063\",\n    \"#2a0049\",\n    \"#1d0033\"\n  ],\n  indigo: [\n    \"#e5ddff\",\n    \"#c3b2ff\",\n    \"#af97ff\",\n    \"#9e82ff\",\n    \"#9373ff\",\n    \"#835fff\",\n    \"#3a00ff\",\n    \"#2801b0\",\n    \"#20008c\",\n    \"#160063\",\n    \"#100049\",\n    \"#0a0030\"\n  ],\n  blue: [\n    \"#e2ecff\",\n    \"#acc9ff\",\n    \"#95baff\",\n    \"#74a5ff\",\n    \"#5892fd\",\n    \"#4083ff\",\n    \"#0059ff\",\n    \"#0041bb\",\n    \"#003494\",\n    \"#002569\",\n    \"#001947\",\n    \"#001333\"\n  ],\n  \"light-blue\": [\n    \"#ddefff\",\n    \"#a1d1ff\",\n    \"#92c9ff\",\n    \"#65b3ff\",\n    \"#58adff\",\n    \"#41a1ff\",\n    \"#007ffc\",\n    \"#0066ca\",\n    \"#0055a8\",\n    \"#003f7d\",\n    \"#002850\",\n    \"#001b36\"\n  ],\n  cyan: [\n    \"#ddf8ff\",\n    \"#9beaff\",\n    \"#77e2ff\",\n    \"#33d4ff\",\n    \"#1ccfff\",\n    \"#00c9ff\",\n    \"#009dc7\",\n    \"#007999\",\n    \"#005970\",\n    \"#003f50\",\n    \"#002c38\",\n    \"#001a20\"\n  ],\n  teal: [\n    \"#d9fff0\",\n    \"#98ffd7\",\n    \"#79ffcb\",\n    \"#56ffbd\",\n    \"#29ffac\",\n    \"#00ff9c\",\n    \"#009d75\",\n    \"#007658\",\n    \"#004e3a\",\n    \"#003829\",\n    \"#002a20\",\n    \"#001b14\"\n  ],\n  green: [\n    \"#e1ffeb\",\n    \"#acffc9\",\n    \"#79ffa7\",\n    \"#49ff88\",\n    \"#24ff70\",\n    \"#00f961\",\n    \"#008c37\",\n    \"#00762e\",\n    \"#005a23\",\n    \"#003d18\",\n    \"#002a11\",\n    \"#001d0c\"\n  ],\n  \"light-green\": [\n    \"#ebffdb\",\n    \"#c7ff9b\",\n    \"#b1ff75\",\n    \"#a1fd5a\",\n    \"#8efd38\",\n    \"#6fff00\",\n    \"#429d00\",\n    \"#357f00\",\n    \"#296100\",\n    \"#1b3f00\",\n    \"#143000\",\n    \"#0d2000\"\n  ],\n  lime: [\n    \"#f1ffd2\",\n    \"#dfff9b\",\n    \"#d4ff77\",\n    \"#caff58\",\n    \"#bdff2d\",\n    \"#aeff00\",\n    \"#649900\",\n    \"#4d7600\",\n    \"#3b5a00\",\n    \"#293f00\",\n    \"#223400\",\n    \"#182400\"\n  ],\n  yellow: [\n    \"#ffffd5\",\n    \"#ffffac\",\n    \"#ffff90\",\n    \"#ffff7c\",\n    \"#ffff3a\",\n    \"#f6f600\",\n    \"#929100\",\n    \"#787700\",\n    \"#585700\",\n    \"#454400\",\n    \"#303000\",\n    \"#242400\"\n  ],\n  amber: [\n    \"#fff2d4\",\n    \"#ffdf92\",\n    \"#ffd677\",\n    \"#ffcf5e\",\n    \"#ffc235\",\n    \"#ffc500\",\n    \"#b28900\",\n    \"#876800\",\n    \"#614b00\",\n    \"#413200\",\n    \"#302500\",\n    \"#221a00\"\n  ],\n  orange: [\n    \"#ffebd7\",\n    \"#ffca92\",\n    \"#ffbd75\",\n    \"#ffb05c\",\n    \"#ff9e36\",\n    \"#ff9625\",\n    \"#e56a00\",\n    \"#ae5100\",\n    \"#833d00\",\n    \"#612d00\",\n    \"#3d1c00\",\n    \"#2c1400\"\n  ],\n  \"deep-orange\": [\n    \"#ffe7e0\",\n    \"#ffb299\",\n    \"#ffa588\",\n    \"#ff8a64\",\n    \"#ff7649\",\n    \"#ff6c3c\",\n    \"#f53100\",\n    \"#b92500\",\n    \"#8a1c00\",\n    \"#561100\",\n    \"#3a0c00\",\n    \"#240700\"\n  ],\n  brown: [\n    \"#f0e2de\",\n    \"#e5b8aa\",\n    \"#c59485\",\n    \"#b68373\",\n    \"#ac7868\",\n    \"#a47060\",\n    \"#85574a\",\n    \"#724539\",\n    \"#5b3328\",\n    \"#3b1e15\",\n    \"#2c140e\",\n    \"#200e09\"\n  ],\n  \"blue-grey\": [\n    \"#e7eff1\",\n    \"#b1c5ce\",\n    \"#9badb6\",\n    \"#8d9fa7\",\n    \"#7a8f98\",\n    \"#718892\",\n    \"#56707c\",\n    \"#40535b\",\n    \"#2f3e45\",\n    \"#1e282c\",\n    \"#182023\",\n    \"#0f1518\"\n  ]\n};\n\n/**\n * returns a variable based on color name, shade, and fixed theme\n *\n * @param {string} the color name\n * @param {number} the color shade\n * @param {boolean} the color shade\n * @returns {string} the CSS Variable\n */\nwindow.SimpleColorsStyles.makeVariable = (\n  color = \"grey\",\n  shade = 1,\n  theme = \"default\"\n) => {\n  return [\"--simple-colors\", theme, \"theme\", color, shade].join(\"-\");\n};\n\n/**\n * adds all CSS variables for a given theme (default, dark, or light)\n */\nwindow.SimpleColorsStyles.addThemeVariables = (theme, dark) => {\n  let str = [];\n  for (var name in window.SimpleColorsStyles.colors) {\n    str.push(\n      window.SimpleColorsStyles.addColorShades(\n        theme,\n        name,\n        window.SimpleColorsStyles.colors[name],\n        dark\n      )\n    );\n  }\n  return str.join(\"\");\n};\n/**\n * adds CSS variables for all shades of contrast for a given theme+color\n * and assigns a hex code to it\n *\n * @returns {string}\n */\nwindow.SimpleColorsStyles.addColorShades = (theme, color, hexcodes, dark) => {\n  let str = [];\n  for (let i = 0; i < hexcodes.length; i++) {\n    let cssvar = window.SimpleColorsStyles.makeVariable(color, i + 1, theme),\n      hex = dark\n        ? hexcodes[window.SimpleColorsStyles.invertIndex(i)]\n        : hexcodes[i];\n    str.push(cssvar + \":\" + hex + \"; \");\n  }\n  return str.join(\"\");\n};\n/**\n * adds all CSS variables as styles for :host and :host([dark]) selectors\n *\n * @returns {string}\n */\nwindow.SimpleColorsStyles.addCssVariables = sheet => {\n  if (typeof sheet !== typeof undefined) {\n    let greys = window.SimpleColorsStyles.colors[\"grey\"];\n    sheet.insertRule(\n      window.SimpleColorsStyles.makeRule(\n        \"html\",\n        window.SimpleColorsStyles.addColorShades(\n          \"default\",\n          \"accent\",\n          greys,\n          false\n        ) + window.SimpleColorsStyles.addThemeVariables(\"default\", false)\n      ),\n      sheet.cssRules.length\n    );\n    sheet.insertRule(\n      window.SimpleColorsStyles.makeRule(\n        \"body\",\n        window.SimpleColorsStyles.addColorShades(\n          \"fixed\",\n          \"accent\",\n          greys,\n          false\n        ) + window.SimpleColorsStyles.addThemeVariables(\"fixed\", false)\n      ),\n      sheet.cssRules.length\n    );\n    sheet.insertRule(\n      window.SimpleColorsStyles.makeRule(\n        \"body[dark], [dark]\",\n        window.SimpleColorsStyles.addColorShades(\n          \"default\",\n          \"accent\",\n          greys,\n          true\n        ) + window.SimpleColorsStyles.addThemeVariables(\"default\", true)\n      ),\n      sheet.cssRules.length\n    );\n    return sheet;\n  }\n};\n/**\n * adds all CSS accent color variables as styles for :host([accent-color]]) selectors\n *\n * @returns {object}\n */\nwindow.SimpleColorsStyles.addAccentVariables = sheet => {\n  if (typeof sheet !== typeof undefined) {\n    for (let color in window.SimpleColorsStyles.colors) {\n      sheet.insertRule(\n        window.SimpleColorsStyles.makeRule(\n          `body[accent-color=\"${color}\"], [accent-color=\"${color}\"]`,\n          [\n            window.SimpleColorsStyles.addColorShades(\n              \"default\",\n              \"accent\",\n              window.SimpleColorsStyles.colors[color],\n              false\n            ),\n            window.SimpleColorsStyles.addColorShades(\n              \"fixed\",\n              \"accent\",\n              window.SimpleColorsStyles.colors[color],\n              false\n            )\n          ].join(\"\")\n        ),\n        sheet.cssRules.length\n      );\n\n      sheet.insertRule(\n        window.SimpleColorsStyles.makeRule(\n          `body[dark][accent-color=\"${color}\"], [dark][accent-color=\"${color}\"]`,\n          [\n            window.SimpleColorsStyles.addColorShades(\n              \"default\",\n              \"accent\",\n              window.SimpleColorsStyles.colors[color],\n              true\n            )\n          ].join(\"\")\n        ),\n        sheet.cssRules.length\n      );\n    }\n    return sheet;\n  }\n};\nwindow.SimpleColorsStyles.makeRule = (selector, style) => {\n  return selector + \" {\\n\" + style + \"\\n}\\n\";\n};\n\n/**\n * inverts the current index\n *\n * @param {string} the index\n * @param {number} the inverted index\n */\nwindow.SimpleColorsStyles.invertIndex = index => {\n  return window.SimpleColorsStyles.colors[\"grey\"].length - 1 - parseInt(index);\n};\n\nclass SimpleColorsStyles extends PolymerElement {\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * The colors object.\n       * Each color contains an array of shades as hex codes from lightest to darkest.\n       */\n      colors: {\n        type: Object,\n        value: window.SimpleColorsStyles.colors\n      },\n      /**\n       * Object with information on which color combinations are WCAG 2.0AA compliant, eg: ```\n        {\n          greyColor: {          //if either the color or its contrast will be a grey\n            aaLarge: [          //if bold text >= 14pt, text >= 18pt, decorative only, or disabled\n              {                 //for the first shade of a color\n                min: 7,         //index of the lightest contrasting shade of another color\n                max: 12         //index of the darkest contrasting shade of another color\n              },\n              ...\n            ],\n            aa: [ ... ]         //if bold text < 14pt, or text < 18pt\n          },\n          colorColor: { ... }   //if neither the color nor its contrast are grey\n        }```\n      */\n      contrasts: {\n        type: Object,\n        value: {\n          greyColor: {\n            aaLarge: [\n              { min: 7, max: 12 },\n              { min: 7, max: 12 },\n              { min: 7, max: 12 },\n              { min: 7, max: 12 },\n              { min: 8, max: 12 },\n              { min: 10, max: 12 },\n              { min: 1, max: 3 },\n              { min: 1, max: 5 },\n              { min: 1, max: 6 },\n              { min: 1, max: 6 },\n              { min: 1, max: 6 },\n              { min: 1, max: 6 }\n            ],\n            aa: [\n              //if bold text < 14pt, or text < 18pt\n              { min: 7, max: 12 },\n              { min: 7, max: 12 },\n              { min: 7, max: 12 },\n              { min: 8, max: 12 },\n              { min: 8, max: 12 },\n              { min: 11, max: 12 },\n              { min: 1, max: 2 },\n              { min: 1, max: 7 },\n              { min: 1, max: 7 },\n              { min: 1, max: 6 },\n              { min: 1, max: 6 },\n              { min: 1, max: 6 }\n            ]\n          },\n          colorColor: {\n            //if neither the color nor its contrast are grey\n            aaLarge: [\n              { min: 7, max: 12 },\n              { min: 7, max: 12 },\n              { min: 8, max: 12 },\n              { min: 9, max: 12 },\n              { min: 10, max: 12 },\n              { min: 11, max: 12 },\n              { min: 1, max: 2 },\n              { min: 1, max: 3 },\n              { min: 1, max: 4 },\n              { min: 1, max: 5 },\n              { min: 1, max: 6 },\n              { min: 1, max: 6 }\n            ],\n            aa: [\n              { min: 8, max: 12 },\n              { min: 8, max: 12 },\n              { min: 9, max: 12 },\n              { min: 9, max: 12 },\n              { min: 11, max: 12 },\n              { min: 12, max: 12 },\n              { min: 1, max: 1 },\n              { min: 1, max: 2 },\n              { min: 1, max: 4 },\n              { min: 1, max: 4 },\n              { min: 1, max: 5 },\n              { min: 1, max: 5 }\n            ]\n          }\n        }\n      }\n    };\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"simple-colors-styles\";\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   * /\n  connectedCallback() {\n    super.connectedCallback();\n    /**\n     * append and register the shared styles\n     * /\n    afterNextRender(this, function() {\n    });\n  }\n\n  /**\n   * gets the color information of a given CSS variable or class\n   *\n   * @param {string} the CSS variable (eg. `--simple-colors-fixed-theme-red-3`)\n   * @param {object} an object that includes the theme, color, and shade information\n   */\n  getColorInfo(colorName) {\n    let temp1 = colorName\n        .replace(/(simple-colors-)?(-text)?(-border)?/g, \"\")\n        .split(\"-theme-\"),\n      theme = temp1.length > 0 ? temp1[0] : \"default\",\n      temp2 = temp1.length > 0 ? temp1[1].split(\"-\") : temp1[0].split(\"-\"),\n      color =\n        temp2.length > 1 ? temp2.slice(1, temp2.length - 1).join(\"-\") : \"grey\",\n      shade = temp2.length > 1 ? temp2[temp2.length - 1] : \"1\";\n    return {\n      theme: theme,\n      color: color,\n      shade: shade\n    };\n  }\n  /**\n   * for large or small text given a color and its shade,\n   * lists all the shades of another color that would be\n   * WCAG 2.0 AA-compliant for contrast\n   *\n   * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n   * @param {string} color name, e.g. \"deep-purple\"\n   * @param {string} color shade, e.g. 3\n   * @param {string} contrasting color name, e.g. \"grey\"\n   * @param {array} all of the WCAG 2.0 AA-compliant shades of the contrasting color\n   */\n  getContrastingShades(isLarge, colorName, colorShade, contrastName) {\n    let hasGrey =\n        colorName === \"grey\" || contrastName === \"grey\"\n          ? \"greyColor\"\n          : \"colorColor\",\n      aa = isLarge ? \"aaLarge\" : \"aa\",\n      index = parseInt(colorShade) + 1,\n      range = this.contrasts[hasGrey][aa][index];\n    return Array(range.max - range.min + 1)\n      .fill()\n      .map((_, idx) => range.min + idx);\n  }\n\n  /**\n   * for large or small text given a color and its shade,\n   * lists all the colors and shades that would be\n   * WCAG 2.0 AA-compliant for contrast\n   *\n   * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n   * @param {string} color name, e.g. \"deep-purple\"\n   * @param {string} color shade, e.g. 3\n   * @param {object} all of the WCAG 2.0 AA-compliant colors and shades\n   */\n  getContrastingColors(colorName, colorShade, isLarge) {\n    let result = {};\n    Object.keys(this.colors).forEach(color => {\n      result[color] = this.getContrastingShades(\n        isLarge,\n        colorName,\n        colorShade,\n        color\n      );\n    });\n    return result.color;\n  }\n  /**\n   * determines if two shades are WCAG 2.0 AA-compliant for contrast\n   *\n   * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n   * @param {string} color name, e.g. \"deep-purple\"\n   * @param {string} color shade, e.g. 3\n   * @param {string} contrasting color name, e.g. \"grey\"\n   * @param {string} contrast shade, e.g. 12\n   * @param {boolean} whether or not the contrasting shade is WCAG 2.0 AA-compliant\n   */\n  isContrastCompliant(\n    isLarge,\n    colorName,\n    colorShade,\n    contrastName,\n    contrastShade\n  ) {\n    let hasGrey =\n        colorName === \"grey\" || contrastName === \"grey\"\n          ? \"greyColor\"\n          : \"colorColor\",\n      aa = isLarge ? \"aaLarge\" : \"aa\",\n      index = parseInt(colorShade) + 1,\n      range = this.contrasts[hasGrey][aa][index];\n    return contrastShade >= range.min && ontrastShade >= range.max;\n  }\n\n  /**\n   * gets the current shade based on the index\n   *\n   * @param {string} the index\n   * @param {number} the shade\n   */\n  indexToShade(index) {\n    return parseInt(index) + 1;\n  }\n\n  /**\n   * gets the current shade based on the index\n   *\n   * @param {string} the shade\n   * @param {number} the index\n   */\n  shadeToIndex(shade) {\n    return parseInt(shade) - 1;\n  }\n\n  /**\n   * gets the current shade\n   *\n   * @param {string} the shade\n   * @param {number} the inverted shade\n   */\n\n  invertShade(shade) {\n    return this.colors[\"grey\"].length + 1 - parseInt(shade);\n  }\n}\n/**\n * Checks to see if there is an instance available, and if not appends one\n */\nwindow.SimpleColorsStyles.requestAvailability = () => {\n  if (window.SimpleColorsStyles.instance == null) {\n    let style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    window.SimpleColorsStyles.addCssVariables(style.sheet);\n    window.SimpleColorsStyles.addAccentVariables(style.sheet);\n    window.SimpleColorsStyles.instance = style.sheet;\n  }\n  return window.SimpleColorsStyles.instance;\n};\n","/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"./lib/simple-colors-styles.js\";\n/**\n * `simple-colors`\n * `a shared set of styles for @lrnwebcomponents`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @demo demo/index.html demo\n * @demo demo/how.html getting started\n * @demo demo/colors.html all of the colors\n * @demo demo/picker.html simple-colors-picker\n * @demo demo/extending.html extending simple-colors\n */\nclass SimpleColors extends PolymerElement {\n  // render function\n  static get template() {\n    return html`\n      <style></style>\n      <slot></slot>\n    `;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n      /**\n       * a selected accent-color: grey, red, pink, purple, etc.\n       */\n      accentColor: {\n        name: \"accentColor\",\n        type: \"String\",\n        value: \"grey\",\n        reflectToAttribute: true,\n        notify: true\n      },\n      /**\n       * make the default theme dark?\n       */\n      dark: {\n        name: \"dark\",\n        type: \"Boolean\",\n        value: false,\n        reflectToAttribute: true,\n        notify: true\n      },\n      /**\n       * make the default theme dark?\n       */\n      colors: {\n        name: \"colors\",\n        type: \"Object\",\n        value: window.SimpleColorsStyles.colors,\n        notify: true\n      },\n      /**\n       * styles inherited based on an ancestor's accent and dark attributes.\n       */\n      inheritStyles: {\n        name: \"inheritStyles\",\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      }\n    };\n  }\n\n  static get tag() {\n    return \"simple-colors\";\n  }\n\n  ready() {\n    super.ready();\n    let styles = window.SimpleColorsStyles.requestAvailability();\n    if (!this.inheritStyles) {\n      let style = document.createElement(\"style\"),\n        ruleList = styles.cssRules;\n      this.shadowRoot.appendChild(style);\n\n      for (let rule of ruleList) {\n        let text = rule.cssText;\n        style.innerText += text;\n      }\n    }\n  }\n\n  /**\n   * returns the maximum contrast to the shade\n   *\n   * @param {string} the shade\n   * @param {number} the shade with maximum contrast\n   */\n  maxContrastShade(shade) {\n    return this.__utils.maxContrastShade(shade);\n  }\n\n  /**\n   * gets the current shade\n   *\n   * @param {string} the shade\n   * @param {number} the inverted shade\n   */\n  invertShade(shade) {\n    return this.__utils.invertShade(shade);\n  }\n\n  /**\n   * gets the color information of a given CSS variable or class\n   *\n   * @param {string} the CSS variable (eg. `--simple-colors-fixed-theme-red-3`) or a class (eg. `.simple-colors-fixed-theme-red-3-text`)\n   * @param {object} an object that includes the theme, color, and shade information\n   */\n  getColorInfo(colorName) {\n    return this.__utils.getColorInfo(colorName);\n  }\n\n  /**\n   * returns a variable based on color name, shade, and fixed theme\n   *\n   * @param {string} the color name\n   * @param {number} the color shade\n   * @param {boolean} the color shade\n   * @returns {string} the CSS Variable\n   */\n  makeVariable(color = \"grey\", shade = 1, theme = \"default\") {\n    return this.__utils.makeVariable(\n      (color = \"grey\"),\n      (shade = 1),\n      (theme = \"default\")\n    );\n  }\n\n  /**\n   * for large or small text given a color and its shade,\n   * lists all the colors and shades that would be\n   * WCAG 2.0 AA-compliant for contrast\n   *\n   * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n   * @param {string} color name, e.g. \"deep-purple\"\n   * @param {string} color shade, e.g. 3\n   * @param {object} all of the WCAG 2.0 AA-compliant colors and shades\n   */\n  getContrastingColors(colorName, colorShade, isLarge) {\n    return this.__utils.getContrastingColors(colorName, colorShade, isLarge);\n  }\n\n  /**\n   * for large or small text given a color and its shade,\n   * lists all the shades of another color that would be\n   * WCAG 2.0 AA-compliant for contrast\n   *\n   * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n   * @param {string} color name, e.g. \"deep-purple\"\n   * @param {string} color shade, e.g. 3\n   * @param {string} contrasting color name, e.g. \"grey\"\n   * @param {array} all of the WCAG 2.0 AA-compliant shades of the contrasting color\n   */\n  getContrastingShades(isLarge, colorName, colorShade, contrastName) {\n    return this.__utils.getContrastingShades(\n      isLarge,\n      colorName,\n      colorShade,\n      contrastName\n    );\n  }\n\n  /**\n   * determines if two shades are WCAG 2.0 AA-compliant for contrast\n   *\n   * @param {boolean} large text? >= 18pt || (bold && >= 14pt)\n   * @param {string} color name, e.g. \"deep-purple\"\n   * @param {string} color shade, e.g. 3\n   * @param {string} contrasting color name, e.g. \"grey\"\n   * @param {string} contrast shade, e.g. 12\n   * @param {boolean} whether or not the contrasting shade is WCAG 2.0 AA-compliant\n   */\n  isContrastCompliant(\n    isLarge,\n    colorName,\n    colorShade,\n    contrastName,\n    contrastShade\n  ) {\n    return this.__utils.isContrastCompliant(\n      isLarge,\n      colorName,\n      colorShade,\n      contrastName,\n      contrastShade\n    );\n  }\n}\ncustomElements.define(SimpleColors.tag, SimpleColors);\nexport { SimpleColors };\n"],"names":["window","SimpleColorsStyles","instance","colors","grey","red","pink","purple","indigo","blue","cyan","teal","green","lime","yellow","amber","orange","brown","makeVariable","color","shade","join","addThemeVariables","theme","dark","str","name","push","addColorShades","hexcodes","i","length","cssvar","hex","invertIndex","addCssVariables","sheet","_typeof","greys","insertRule","makeRule","cssRules","addAccentVariables","selector","style","index","parseInt","requestAvailability","document","createElement","head","appendChild","SimpleColors","PolymerElement","styles","this","inheritStyles","ruleList","shadowRoot","text","cssText","innerText","__utils","maxContrastShade","invertShade","colorName","getColorInfo","colorShade","isLarge","getContrastingColors","contrastName","getContrastingShades","contrastShade","isContrastCompliant","html","accentColor","type","value","reflectToAttribute","notify","Boolean","customElements","define","tag"],"mappings":"q2DAgBAA,OAAOC,mBAAqB,GAC5BD,OAAOC,mBAAmBC,SAAW,KACrCF,OAAOC,mBAAmBE,OAAS,CACjCC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,IAAK,CACH,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,yBAEa,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,wBAEY,CACZ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,MAAO,CACL,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,yBAEa,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,MAAO,CACL,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,yBAE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"}