{"version":3,"file":"jwt-login.umd.js","sources":["jwt-login.umd.js"],"sourcesContent":["import { LitElement, html, css } from \"lit-element/lit-element.js\";\nimport \"@polymer/iron-ajax/iron-ajax.js\";\n/**\n * `jwt-login`\n * `a simple element to check for and fetch JWTs`\n * @demo demo/index.html\n * @microcopy - the mental model for this element\n * - jwt - a json web token which is an encrypted security token to talk\n */\nclass JwtLogin extends LitElement {\n  /**\n   * LitElement constructable styles enhancement\n   */\n  static get styles() {\n    return [\n      css`\n      <style>\n        :host {\n          display: none;\n        }\n      </style>\n      `\n    ];\n  }\n  constructor() {\n    super();\n    this.auto = false;\n    this.method = \"GET\";\n    this.body = {};\n    this.key = \"jwt\";\n    this.jwt = null;\n  }\n  /**\n   * LitElement\n   */\n  render() {\n    return html`\n      <iron-ajax\n        ?auto=\"${this.auto}\"\n        id=\"loginrequest\"\n        method=\"${this.method}\"\n        url=\"${this.url}\"\n        handle-as=\"json\"\n        content-type=\"application/json\"\n        @response=\"${this.loginResponse}\"\n      >\n      </iron-ajax>\n    `;\n  }\n\n  static get tag() {\n    return \"jwt-login\";\n  }\n\n  static get properties() {\n    return {\n      /**\n       * auto, useful for demos\n       */\n      auto: {\n        type: Boolean\n      },\n      /**\n       * url\n       */\n      url: {\n        type: String\n      },\n      /**\n       * Request method\n       */\n      method: {\n        type: String\n      },\n      /**\n       * Optional body, useful when doing posts\n       */\n      body: {\n        type: Object\n      },\n      /**\n       * Key that contains the token in local storage\n       */\n      key: {\n        type: String\n      },\n      /**\n       * JSON Web token to securely pass around\n       */\n      jwt: {\n        type: String\n      }\n    };\n  }\n  /**\n   * LitElement life cycle - properties changed callback\n   */\n  updated(changedProperties) {\n    changedProperties.forEach((oldValue, propName) => {\n      if (propName == \"jwt\") {\n        this._jwtChanged(this[propName], oldValue);\n        // notify\n        this.dispatchEvent(\n          new CustomEvent(\"jwt-changed\", {\n            detail: {\n              value: this[propName]\n            }\n          })\n        );\n      }\n    });\n  }\n  _jwtChanged(newValue, oldValue) {\n    if (\n      (newValue == null || newValue == \"\") &&\n      typeof oldValue !== typeof undefined\n    ) {\n      // remove this key from local storage bin\n      localStorage.removeItem(this.key);\n      // jwt was invalid some how\n      this.dispatchEvent(\n        new CustomEvent(\"jwt-logged-in\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: false\n        })\n      );\n    } else if (newValue) {\n      // set the jwt into local storage so we can reference later\n      localStorage.setItem(this.key, newValue);\n      this.dispatchEvent(\n        new CustomEvent(\"jwt-token\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: newValue\n        })\n      );\n      this.dispatchEvent(\n        new CustomEvent(\"jwt-logged-in\", {\n          bubbles: true,\n          cancelable: true,\n          composed: true,\n          detail: true\n        })\n      );\n    }\n  }\n  /**\n   * LitElement life cycle - ready\n   */\n  firstUpdated(changedProperties) {\n    // set jwt from local storage bin\n    this.jwt = localStorage.getItem(this.key);\n  }\n  /**\n   * Request a user login if we need one or log out\n   */\n  toggleLogin() {\n    // null is default, if we don't have anything go get one\n    if (this.jwt == null) {\n      this.shadowRoot.querySelector(\"#loginrequest\").body = { ...this.body };\n      this.shadowRoot.querySelector(\"#loginrequest\").generateRequest();\n    } else {\n      // we were told to logout, reset body\n      this.body = {};\n      // reset jwt which will do all the events / local storage work\n      this.jwt = null;\n    }\n  }\n  /**\n   * Login bridge to get a JWT and hang onto it\n   */\n  loginResponse(e) {\n    this.jwt = e.detail.response;\n  }\n}\nwindow.customElements.define(JwtLogin.tag, JwtLogin);\nexport { JwtLogin };\n"],"names":["JwtLogin","auto","method","body","key","jwt","LitElement","css","html","this","url","loginResponse","changedProperties","forEach","oldValue","propName","_this2","_jwtChanged","dispatchEvent","CustomEvent","detail","value","newValue","_typeof","localStorage","setItem","bubbles","cancelable","composed","removeItem","getItem","shadowRoot","querySelector","generateRequest","e","response","type","Boolean","String","Object","window","customElements","define","tag"],"mappings":"q3DASMA,yKAiBGC,MAAO,IACPC,OAAS,QACTC,KAAO,KACPC,IAAM,QACNC,IAAM,mPArBQC,2DAKZ,CACLC,2DAqBKC,WAEMC,KAAKR,KAEJQ,KAAKP,OACRO,KAAKC,IAGCD,KAAKE,+CAqDhBC,cACNA,EAAkBC,QAAQ,SAACC,EAAUC,GACnB,OAAZA,IACFC,EAAKC,YAAYD,EAAKD,GAAWD,GAEjCE,EAAKE,cACH,IAAIC,YAAY,cAAe,CAC7BC,OAAQ,CACNC,MAAOL,EAAKD,8CAOZO,EAAUR,GAEL,MAAZQ,GAAgC,IAAZA,iBACrBC,EAAOT,GAaEQ,IAETE,aAAaC,QAAQhB,KAAKL,IAAKkB,QAC1BJ,cACH,IAAIC,YAAY,YAAa,CAC3BO,SAAS,EACTC,YAAY,EACZC,UAAU,EACVR,OAAQE,UAGPJ,cACH,IAAIC,YAAY,gBAAiB,CAC/BO,SAAS,EACTC,YAAY,EACZC,UAAU,EACVR,QAAQ,OA1BZI,aAAaK,WAAWpB,KAAKL,UAExBc,cACH,IAAIC,YAAY,gBAAiB,CAC/BO,SAAS,EACTC,YAAY,EACZC,UAAU,EACVR,QAAQ,2CA2BHR,QAENP,IAAMmB,aAAaM,QAAQrB,KAAKL,2CAOrB,MAAZK,KAAKJ,UACF0B,WAAWC,cAAc,iBAAiB7B,2UAAYM,KAAKN,WAC3D4B,WAAWC,cAAc,iBAAiBC,yBAG1C9B,KAAO,QAEPE,IAAM,4CAMD6B,QACP7B,IAAM6B,EAAEd,OAAOe,6CA5Hb,qDAIA,CAILlC,KAAM,CACJmC,KAAMC,SAKR3B,IAAK,CACH0B,KAAME,QAKRpC,OAAQ,CACNkC,KAAME,QAKRnC,KAAM,CACJiC,KAAMG,QAKRnC,IAAK,CACHgC,KAAME,QAKRjC,IAAK,CACH+B,KAAME,kBAwFdE,OAAOC,eAAeC,OAAO1C,EAAS2C,IAAK3C"}