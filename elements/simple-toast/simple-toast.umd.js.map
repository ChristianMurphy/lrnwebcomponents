{"version":3,"file":"simple-toast.umd.js","sources":["simple-toast.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"@polymer/paper-toast/paper-toast.js\";\nimport \"@polymer/paper-button/paper-button.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport * as async from \"@polymer/polymer/lib/utils/async.js\";\n\n// register globally so we can make sure there is only one\nwindow.SimpleToast = window.SimpleToast || {};\n// request if this exists. This helps invoke the element existing in the dom\n// as well as that there is only one of them. That way we can ensure everything\n// is rendered through the same simple-toast element, making it a singleton.\nwindow.SimpleToast.requestAvailability = () => {\n  // if there is no single instance, generate one and append it to end of the document\n  if (!window.SimpleToast.instance) {\n    window.SimpleToast.instance = document.createElement(\"simple-toast\");\n    document.body.appendChild(window.SimpleToast.instance);\n  }\n  return window.SimpleToast.instance;\n};\n\n/**\n * `simple-toast`\n * `A singular toast / message for conistency`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass SimpleToast extends PolymerElement {\n  \n  // render function\n  static get template() {\n    return html`\n<style>:host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\npaper-toast {\n  width: var(--simple-toast-width, inherit);\n  height: var(--simple-toast-height, inherit);\n  color: var(--simple-toast-color, white);\n  background-color: var(--simple-toast-bg, black);\n  top: var(--simple-toast-top, inherit);\n  margin: var(--simple-toast-margin, 16px);\n  padding: var(--simple-toast-padding, 16px);\n  left: var(--simple-toast-left, inherit);\n  bottom: var(--simple-toast-bottom, inherit);\n  right: var(--simple-toast-right, inherit);\n  border: var(--simple-toast-border, inherit);\n  z-index: var(--simple-toast-z-index, inherit);\n  font-size: var(--simple-toast-font-size, inherit);\n}</style>\n<paper-toast id=\"toast\" text=\"[[text]]\" duration$=\"[[duration]]\" opened=\"{{opened}}\" class$=\"[[classStyle]]\">\n  <slot></slot>\n  <paper-button hidden$=\"[[!closeButton]]\" on-click=\"hide\">[[closeText]]</paper-button>\n</paper-toast>`;\n  }\n\n  // properties available to the custom element for data binding\n    static get properties() {\n    let props = {\n  /**\n   * Opened state of the toast, use event to change\n   */\n  \"opened\": {\n    \"name\": \"opened\",\n    \"type\": Boolean,\n    \"value\": false,\n    \"reflectToAttribute\": true\n  },\n  /**\n   * Plain text based message to display\n   */\n  \"text\": {\n    \"name\": \"text\",\n    \"type\": String,\n    \"value\": \"Saved\"\n  },\n  /**\n   * Class name, fit-bottom being a useful one\n   */\n  \"classStyle\": {\n    \"name\": \"classStyle\",\n    \"type\": String,\n    \"value\": \"\"\n  },\n  /**\n   * Text for the close button\n   */\n  \"closeText\": {\n    \"name\": \"closeText\",\n    \"type\": String,\n    \"value\": \"Close\"\n  },\n  /**\n   * How long the toast message should be displayed\n   */\n  \"duration\": {\n    \"name\": \"duration\",\n    \"type\": Number,\n    \"value\": 4000\n  },\n  /**\n   * Event callback when hide is called\n   */\n  \"eventCallback\": {\n    \"name\": \"eventCallback\",\n    \"type\": String\n  },\n  /**\n   * If there should be a close button shown\n   */\n  \"closeButton\": {\n    \"name\": \"closeButton\",\n    \"type\": Boolean,\n    \"value\": true,\n    \"reflectToAttribute\": true\n  }\n}\n;\n    if (super.properties) {\n      props = Object.assign(props, super.properties);\n    }\n    return props;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"simple-toast\";\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n\n    window.addEventListener(\n      \"simple-toast-hide\",\n      this.hideSimpleToast.bind(this)\n    );\n    window.addEventListener(\n      \"simple-toast-show\",\n      this.showSimpleToast.bind(this)\n    );\n  }\n  /**\n   * life cycle, element is removed from the DOM\n   */\n  disconnectedCallback() {\n    super.connectedCallback();\n    window.removeEventListener(\n      \"simple-toast-hide\",\n      this.hideSimpleToast.bind(this)\n    );\n    window.removeEventListener(\n      \"simple-toast-show\",\n      this.showSimpleToast.bind(this)\n    );\n  }\n  /**\n   * Hide callback\n   */\n  hideSimpleToast(e) {\n    this.hide();\n  }\n  /**\n   * Show / available callback\n   */\n  showSimpleToast(e) {\n    // add your code to run when the singleton is called for\n    if (e.detail.duration) {\n      this.duration = e.detail.duration;\n    }\n    if (e.detail.text) {\n      this.text = e.detail.text;\n    }\n    if (e.detail.classStyle) {\n      this.classStyle = e.detail.classStyle;\n    }\n    if (e.detail.closeText) {\n      this.closeText = e.detail.closeText;\n    }\n    if (e.detail.closeButton) {\n      this.closeButton = e.detail.closeButton;\n    }\n    if (e.detail.eventCallback) {\n      this.eventCallback = e.detail.eventCallback;\n    }\n    while (this.firstChild !== null) {\n      this.removeChild(this.firstChild);\n    }\n    if (e.detail.slot) {\n      this.appendChild(e.detail.slot);\n    }\n    async.microTask.run(() => {\n      setTimeout(() => {\n        this.show();\n      }, 50);\n    });\n  }\n\n  show() {\n    this.shadowRoot.querySelector(\"#toast\").show();\n  }\n  hide() {\n    if (this.eventCallback) {\n      const evt = new CustomEvent(this.eventCallback, {\n        bubbles: true,\n        cancelable: true,\n        detail: true\n      });\n      this.dispatchEvent(evt);\n    }\n    this.shadowRoot.querySelector(\"#toast\").hide();\n  }\n}\nwindow.customElements.define(SimpleToast.tag, SimpleToast);\nexport { SimpleToast };\n"],"names":["window","SimpleToast","requestAvailability","instance","document","createElement","body","appendChild","PolymerElement","html","props","Boolean","String","Number","Object","assign","addEventListener","this","hideSimpleToast","bind","showSimpleToast","removeEventListener","e","hide","detail","duration","text","classStyle","closeText","closeButton","eventCallback","firstChild","removeChild","slot","async","run","setTimeout","_this","show","shadowRoot","querySelector","evt","CustomEvent","bubbles","cancelable","dispatchEvent","customElements","define","tag"],"mappings":"0nFAWAA,OAAOC,YAAcD,OAAOC,aAAe,GAI3CD,OAAOC,YAAYC,oBAAsB,kBAElCF,OAAOC,YAAYE,WACtBH,OAAOC,YAAYE,SAAWC,SAASC,cAAc,gBACrDD,SAASE,KAAKC,YAAYP,OAAOC,YAAYE,WAExCH,OAAOC,YAAYE,cActBF,gaAAoBO,+DAIfC,mDAgCHC,EAAQ,QAIJ,MACA,cACAC,eACC,sBACa,QAKhB,MACE,YACAC,aACC,oBAKG,MACJ,kBACAA,aACC,cAKE,MACH,iBACAA,aACC,kBAKC,MACF,gBACAC,aACC,mBAKM,MACP,qBACAD,oBAKK,MACL,mBACAD,eACC,sBACa,uCAKpBD,EAAQI,OAAOC,OAAOL,8BAEjBA,oCAQA,sHAQPV,OAAOgB,iBACL,oBACAC,KAAKC,gBAAgBC,KAAKF,OAE5BjB,OAAOgB,iBACL,oBACAC,KAAKG,gBAAgBD,KAAKF,4GAQ5BjB,OAAOqB,oBACL,oBACAJ,KAAKC,gBAAgBC,KAAKF,OAE5BjB,OAAOqB,oBACL,oBACAJ,KAAKG,gBAAgBD,KAAKF,+CAMdK,QACTC,+CAKSD,kBAEVA,EAAEE,OAAOC,gBACNA,SAAWH,EAAEE,OAAOC,UAEvBH,EAAEE,OAAOE,YACNA,KAAOJ,EAAEE,OAAOE,MAEnBJ,EAAEE,OAAOG,kBACNA,WAAaL,EAAEE,OAAOG,YAEzBL,EAAEE,OAAOI,iBACNA,UAAYN,EAAEE,OAAOI,WAExBN,EAAEE,OAAOK,mBACNA,YAAcP,EAAEE,OAAOK,aAE1BP,EAAEE,OAAOM,qBACNA,cAAgBR,EAAEE,OAAOM,eAEL,OAApBb,KAAKc,iBACLC,YAAYf,KAAKc,YAEpBT,EAAEE,OAAOS,WACN1B,YAAYe,EAAEE,OAAOS,MAE5BC,YAAgBC,IAAI,WAClBC,WAAW,WACTC,EAAKC,QACJ,0CAKAC,WAAWC,cAAc,UAAUF,yCAGpCrB,KAAKa,cAAe,KAChBW,EAAM,IAAIC,YAAYzB,KAAKa,cAAe,CAC9Ca,SAAS,EACTC,YAAY,EACZpB,QAAQ,SAELqB,cAAcJ,QAEhBF,WAAWC,cAAc,UAAUjB,4CAG5CvB,OAAO8C,eAAeC,OAAO9C,EAAY+C,IAAK/C"}